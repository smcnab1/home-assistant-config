---
### Card Graph ###
custom_card_graph:
  template:
    - "extended_card"
  variables:
    ulm_card_graph_color: "var(--info-color)"
    ulm_card_graph_name: "[[[ return entity.attributes.friendly_name; ]]]"
    ulm_card_graph_icon: "[[[ return entity.attributes.icon ]]]"
    ulm_card_graph_color2: "var(--info-color)"
    ulm_card_graph_entity2: ""
    ulm_card_graph_hours: 24
    ulm_card_graph_type: "fill"
    ulm_card_graph_points: "0.5"
    ulm_card_graph_group_by: "interval"
    ulm_battery_entity: ""
  triggers_update: "all"
  custom_fields:
    item1:
      card:
        type: "custom:button-card"
        template:
          - "card_generic"
        variables:
          ulm_card_generic_icon: "[[[ return variables.ulm_card_graph_icon; ]]]"
          ulm_card_generic_name: "[[[ return variables.ulm_card_graph_name; ]]]"
          ulm_battery_entity: "[[[ return variables.ulm_battery_entity; ]]]"

    item2:
      card:
        type: "custom:mini-graph-card"
        entities: >
          [[[
            var ent = [];
            ent.push(variables.ulm_card_graph_entity);
            if(variables.ulm_card_graph_entity2 != "")
              ent.push(variables.ulm_card_graph_entity2);
            return ent;
          ]]]
        line_color: >
          [[[
            var col = [];
            col.push(variables.ulm_card_graph_color);
            if(variables.ulm_card_graph_color2 != "")
              col.push(variables.ulm_card_graph_color2);
            return col;
          ]]]
        show:
          name: false
          icon: false
          legend: false
          state: false
          graph: "[[[ return variables.ulm_card_graph_type=='fill'?'line':variables.ulm_card_graph_type; ]]]"
          fill: "[[[ return variables.ulm_card_graph_type=='fill'?true:false; ]]]"
        hours_to_show: "[[[ return variables.ulm_card_graph_hours; ]]]"
        points_per_hour: "[[[ return variables.ulm_card_graph_points; ]]]"
        group_by: "[[[ return variables.ulm_card_graph_group_by; ]]]"
        style: |
          ha-card {
            box-shadow: none;
            border-radius: var(--border-radius);
          }

card_battery_info:
  variables:
    - ulm_battery_entity:
  styles:
    custom_fields:
      info:
        - position: "absolute"
        - right: "6px"
        - top: "6px"
        - width: "25px"
        - height: "25px"

  custom_fields:
    info: |
      [[[
          if (variables.ulm_battery_entity){
            const battery = Math.round((states[variables.ulm_battery_entity].state)/1);
            const radius = 20.5; const circumference = radius * 2 * Math.PI;
            return `<svg viewBox="0 0 50 50"><circle cx="25" cy="25" r="${radius}"
            stroke="green" stroke-width="3" fill="none"
            style="transform: rotate(-90deg); transform-origin: 50% 50%;
            stroke-dasharray: ${circumference};
            stroke-dashoffset: ${circumference - battery / 100 * circumference};" />
            <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="16" font-weight= "bold"
            text-anchor="middle" alignment-baseline="middle">
            ${battery}<tspan font-size="10">%</tspan></text></svg>`;}
          else{
            const battery = Math.round((entity.attributes.battery || entity.attributes.battery_level)/1);
            const radius = 20.5; const circumference = radius * 2 * Math.PI;
            return `<svg viewBox="0 0 50 50"><circle cx="25" cy="25" r="${radius}"
            stroke="green" stroke-width="3" fill="none"
            style="transform: rotate(-90deg); transform-origin: 50% 50%;
            stroke-dasharray: ${circumference};
            stroke-dashoffset: ${circumference - battery / 100 * circumference};" />
            <text x="50%" y="54%" fill="var(--primary-text-color)" font-size="16" font-weight= "bold"
            text-anchor="middle" alignment-baseline="middle">
            ${battery}<tspan font-size="10">%</tspan></text></svg>`;}
      ]]]