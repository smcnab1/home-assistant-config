import { ListBlockChildrenResponse } from "@notionhq/client/build/src/api-endpoints";
import { Client } from "@notionhq/client";
export declare type BlockAttributes = {
    numbered_list_item?: {
        number?: number;
    };
};
export declare type ListBlockChildrenResponseResults = ListBlockChildrenResponse["results"] & BlockAttributes;
export declare type ListBlockChildrenResponseResult = ListBlockChildrenResponseResults[0] & BlockAttributes;
export declare type TextRequest = string;
export interface NotionToMarkdownOptions {
    notionClient: Client;
}
export declare type MdBlock = {
    type?: string;
    parent: string;
    children: MdBlock[];
};
export declare type Annotations = {
    bold: boolean;
    italic: boolean;
    strikethrough: boolean;
    underline: boolean;
    code: boolean;
    color: "default" | "gray" | "brown" | "orange" | "yellow" | "green" | "blue" | "purple" | "pink" | "red" | "gray_background" | "brown_background" | "orange_background" | "yellow_background" | "green_background" | "blue_background" | "purple_background" | "pink_background" | "red_background";
};
export declare type Text = {
    type: "text";
    text: {
        content: string;
        link: {
            url: TextRequest;
        } | null;
    };
    annotations: Annotations;
    plain_text: string;
    href: string | null;
};
export declare type CalloutIcon = {
    type: "emoji";
    emoji?: string;
} | {
    type: "external";
    external?: {
        url: string;
    };
} | {
    type: "file";
    file: {
        url: string;
        expiry_time: string;
    };
} | null;
export declare type CustomTransformer = (block: ListBlockChildrenResponseResult) => string | Promise<string>;
//# sourceMappingURL=index.d.ts.map