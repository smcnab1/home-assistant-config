{"version":3,"file":"md.spec.js","sourceRoot":"","sources":["../../src/utils/md.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  callout,\r\n  table,\r\n  inlineCode,\r\n  bold,\r\n  italic,\r\n  strikethrough,\r\n  underline,\r\n  link,\r\n  codeBlock,\r\n  heading1,\r\n  heading2,\r\n  heading3,\r\n  quote,\r\n  bullet,\r\n  todo,\r\n  toggle,\r\n  image,\r\n} from \"./md\";\r\n\r\ndescribe(\"Callout\", () => {\r\n  test(\"parses callout without emoji\", () => {\r\n    const text = \"Call out text content.\";\r\n\r\n    expect(callout(text)).toBe(`> ${text}`);\r\n  });\r\n\r\n  test(\"parses callout with emoji\", () => {\r\n    const text = \"Call out text content.\";\r\n\r\n    expect(\r\n      callout(text, {\r\n        type: \"emoji\",\r\n        emoji: \"😍\",\r\n      })\r\n    ).toBe(`> 😍 ${text}`);\r\n  });\r\n});\r\n\r\ndescribe(\"Markdown Table\", () => {\r\n  test(\"parse simple table to markdown table\", () => {\r\n    const mockTable = [\r\n      [\"number\", \"char\"],\r\n      [\"1\", \"a\"],\r\n      [\"2\", \"b\"],\r\n    ];\r\n\r\n    expect(table(mockTable)).toBe(\r\n      `\r\n| number | char |\r\n| ------ | ---- |\r\n| 1      | a    |\r\n| 2      | b    |\r\n    `.trim()\r\n    );\r\n  });\r\n});\r\n\r\ndescribe(\"Text Annotations\", () => {\r\n  test(\"Inline Code\", () => {\r\n    expect(inlineCode(\"simple text\")).toBe(\"`simple text`\");\r\n  });\r\n  test(\"Code Block\", () => {\r\n    expect(codeBlock(\"simple text\", \"javascript\")).toBe(\r\n      `\\`\\`\\`javascript\r\nsimple text\r\n\\`\\`\\``.trim()\r\n    );\r\n  });\r\n  test(\"Bold\", () => {\r\n    expect(bold(\"simple text\")).toBe(\"**simple text**\");\r\n  });\r\n  test(\"Italic\", () => {\r\n    expect(italic(\"simple text\")).toBe(\"_simple text_\");\r\n  });\r\n  test(\"StrikeThrough\", () => {\r\n    expect(strikethrough(\"simple text\")).toBe(\"~~simple text~~\");\r\n  });\r\n  test(\"Underline\", () => {\r\n    expect(underline(\"simple text\")).toBe(\"<u>simple text</u>\");\r\n  });\r\n});\r\n\r\ndescribe(\"Headings\", () => {\r\n  test(\"Heading 1\", () => {\r\n    expect(heading1(\"simple text\")).toBe(\"# simple text\");\r\n  });\r\n  test(\"Heading 2\", () => {\r\n    expect(heading2(\"simple text\")).toBe(\"## simple text\");\r\n  });\r\n  test(\"Heading 3\", () => {\r\n    expect(heading3(\"simple text\")).toBe(\"### simple text\");\r\n  });\r\n});\r\n\r\ndescribe(\"List Elements\", () => {\r\n  test(\"Bullet\", () => {\r\n    expect(bullet(\"simple text\")).toBe(\"- simple text\");\r\n  });\r\n\r\n  test(\"Checked todo\", () => {\r\n    expect(todo(\"simple text\", true)).toBe(\"- [x] simple text\");\r\n  });\r\n\r\n  test(\"Unchecked todo\", () => {\r\n    expect(todo(\"simple text\", false)).toBe(\"- [ ] simple text\");\r\n  });\r\n});\r\n\r\ndescribe(\"Image\", () => {\r\n  test(\"Image with alt text\", () => {\r\n    expect(image(\"simple text\", \"https://example.com/image\")).toBe(\r\n      `![simple text](https://example.com/image)`\r\n    );\r\n  });\r\n});\r\n\r\ndescribe(\"Toggle\", () => {\r\n  const noSpaces = (text: string) => text.replace(/\\s+/g, '')\r\n  test(\"displays content if toggle title is empty\", () => {\r\n    expect(noSpaces(toggle(undefined, \"content\"))).toBe(\r\n      \"content\"\r\n    );\r\n  })\r\n  test(\"return empty string if title and content are empty\", () => {\r\n    expect(noSpaces(toggle(undefined, undefined))).toBe(\r\n      \"\"\r\n    );\r\n  })\r\n  test(\"Displays toggle with <details> and <summary>\", () => {\r\n    expect(noSpaces(toggle(\"title\", \"content\"))).toBe(\r\n      \"<details><summary>title</summary>content</details>\"\r\n    );\r\n  })\r\n})"]}