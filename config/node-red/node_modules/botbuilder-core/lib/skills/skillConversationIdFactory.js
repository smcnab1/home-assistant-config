"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkillConversationIdFactory = void 0;
const skillConversationIdFactoryBase_1 = require("./skillConversationIdFactoryBase");
const turnContext_1 = require("../turnContext");
const uuid_1 = require("uuid");
class SkillConversationIdFactory extends skillConversationIdFactoryBase_1.SkillConversationIdFactoryBase {
    constructor(storage) {
        super();
        this.storage = storage;
    }
    createSkillConversationIdWithOptions(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const conversationReference = turnContext_1.TurnContext.getConversationReference(options.activity);
            const skillConversationId = uuid_1.v4();
            const skillConversationReference = {
                conversationReference: conversationReference,
                oAuthScope: options.fromBotOAuthScope,
            };
            yield this.storage.write({ [skillConversationId]: skillConversationReference });
            return skillConversationId;
        });
    }
    getSkillConversationReference(skillConversationId) {
        return __awaiter(this, void 0, void 0, function* () {
            const skillConversationInfo = yield this.storage.read([skillConversationId]);
            if (!skillConversationInfo) {
                return undefined; // eslint-disable-line @typescript-eslint/no-non-null-assertion
            }
            const skillConversationReference = skillConversationInfo[skillConversationId];
            if (!skillConversationReference) {
                return undefined; // eslint-disable-line @typescript-eslint/no-non-null-assertion
            }
            return skillConversationReference;
        });
    }
    deleteConversationReference(skillConversationId) {
        return this.storage.delete([skillConversationId]);
    }
}
exports.SkillConversationIdFactory = SkillConversationIdFactory;
//# sourceMappingURL=skillConversationIdFactory.js.map