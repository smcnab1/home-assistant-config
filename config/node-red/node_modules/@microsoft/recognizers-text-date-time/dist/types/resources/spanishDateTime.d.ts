export declare namespace SpanishDateTime {
    const LangMarker = "Spa";
    const CheckBothBeforeAfter = false;
    const TillRegex = "(?<till>hasta|al|a|--|-|\u2014|\u2014\u2014)(\\s+(el|la(s)?))?";
    const RangeConnectorRegex: string;
    const DayRegex = "(?<day>01|02|03|04|05|06|07|08|09|10|11|12|13|14|15|16|17|18|19|1|20|21|22|23|24|25|26|27|28|29|2|30|31|3|4|5|6|7|8|9)(?=\\b|t)";
    const MonthNumRegex = "(?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)\\b";
    const AmDescRegex: string;
    const PmDescRegex: string;
    const AmPmDescRegex: string;
    const DescRegex: string;
    const OfPrepositionRegex = "(do|da|del|de)";
    const AfterNextSuffixRegex = "\\b(que\\s+viene|pasad[oa])\\b";
    const RangePrefixRegex = "((desde|de|entre)\\s+(la(s)?\\s+)?)";
    const TwoDigitYearRegex: string;
    const RelativeRegex = "(?<rela>((esta|este|pr[o\u00F3]xim[oa]|([u\u00FA]ltim(o|as|os)))(\\s+fin(ales)?\\s+de(\\s+la)?)?)|(fin(ales)?\\s+de(\\s+la)?))\\b";
    const StrictRelativeRegex = "(?<rela>((esta|este|pr[o\u00F3]xim[oa]|([u\u00FA]ltim(o|as|os)))(\\s+fin(ales)?\\s+de(\\s+la)?)?)|(fin(ales)?\\s+de(\\s+la)?))\\b";
    const WrittenOneToNineRegex = "(uno|un|una|dos|tres|cuatro|cinco|seis|siete|ocho|nueve)";
    const WrittenOneHundredToNineHundredRegex = "(cien|ciento|doscient[oa]s|trescient[oa]s|cuatrocient[ao]s|quinient[ao]s|seiscient[ao]s|setecient[ao]s|ochocient[ao]s|novecient[ao]s)";
    const WrittenOneToNinetyNineRegex: string;
    const FullTextYearRegex: string;
    const YearRegex: string;
    const RelativeMonthRegex = "(?<relmonth>((este|pr[o\u00F3]ximo|([u\u00FA]ltim(o|as|os)))\\s+mes)|(mes\\s+((que\\s+viene)|pasado)))\\b";
    const MonthRegex = "\\b(?<month>abril|abr|agosto|ago|diciembre|dic|febrero|feb|enero|ene|julio|jul|junio|jun|marzo|mar|mayo|may|noviembre|nov|octubre|oct|septiembre|setiembre|sept|set|sep)\\b";
    const MonthSuffixRegex: string;
    const DateUnitRegex = "(?<unit>a\u00F1os?|mes(es)?|semanas?|d[i\u00ED]as?)\\b";
    const PastRegex = "(?<past>\\b(pasad(a|o)(s)?|[u\u00FA]ltim[oa](s)?|anterior(es)?|previo(s)?)\\b)";
    const FutureRegex = "(?<past>\\b(siguiente(s)?|pr[o\u00F3]xim[oa](s)?|dentro\\s+de|en)\\b)";
    const SimpleCasesRegex: string;
    const MonthFrontSimpleCasesRegex: string;
    const MonthFrontBetweenRegex: string;
    const DayBetweenRegex: string;
    const OneWordPeriodRegex: string;
    const MonthWithYearRegex: string;
    const MonthNumWithYearRegex: string;
    const WeekOfMonthRegex: string;
    const WeekOfYearRegex: string;
    const FollowedDateUnit: string;
    const NumberCombinedWithDateUnit: string;
    const QuarterTermRegex = "(?<cardinal>primer|1er|segundo|2do|tercer|3ro|4to|((1|2|3|4)\u00BA))\\s+(cuatrimestre|cuarto)";
    const QuarterRegex: string;
    const QuarterRegexYearFront: string;
    const AllHalfYearRegex = "^[.]";
    const EarlyPrefixRegex: string;
    const MidPrefixRegex: string;
    const LaterPrefixRegex: string;
    const PrefixPeriodRegex: string;
    const PrefixDayRegex = "^[.]";
    const CenturySuffixRegex = "^[.]";
    const SeasonRegex: string;
    const WhichWeekRegex = "\\b(semana)(\\s*)(?<number>5[0-3]|[1-4]\\d|0?[1-9])\\b";
    const WeekOfRegex: string;
    const MonthOfRegex: string;
    const RangeUnitRegex = "\\b(?<unit>a\u00F1os|a\u00F1o|meses|mes|semanas|semana)\\b";
    const InConnectorRegex = "\\b(in)\\b";
    const SinceYearSuffixRegex = "^[.]";
    const WithinNextPrefixRegex = "\\b(dentro\\s+de)\\b";
    const FromRegex = "((desde|de)(\\s*la(s)?)?)$";
    const BetweenRegex = "(entre\\s*(la(s)?)?)";
    const WeekDayRegex = "\\b(?<weekday>domingos?|lunes|martes|mi[e\u00E9]rcoles|jueves|viernes|s[a\u00E1]bados?|lun|mar|mi[e\u00E9]|jue|vie|s[a\u00E1]b|dom|lu|ma|mi|ju|vi|s[a\u00E1]|do)\\b";
    const OnRegex: string;
    const RelaxedOnRegex = "(?<=\\b(en|el|del)\\s+)((?<day>10|11|12|13|14|15|16|17|18|19|1st|20|21|22|23|24|25|26|27|28|29|2|30|31|3|4|5|6|7|8|9)s?)\\b";
    const ThisRegex: string;
    const LastDateRegex: string;
    const NextDateRegex: string;
    const SpecialDayRegex = "\\b((el\\s+)?(d[i\u00ED]a\\s+antes\\s+de\\s+ayer|anteayer)|((el\\s+)?d[i\u00ED]a\\s+(despu[e\u00E9]s\\s+)?de\\s+ma\u00F1ana|pasado\\s+ma\u00F1ana)|(el\\s)?d[i\u00ED]a siguiente|(el\\s)?pr[o\u00F3]ximo\\s+d[i\u00ED]a|(el\\s+)?[u\u00FA]ltimo d[i\u00ED]a|(d)?el d[i\u00ED]a|ayer|ma\u00F1ana|hoy)\\b";
    const SpecialDayWithNumRegex = "^[.]";
    const ForTheRegex = "^[.]";
    const WeekDayAndDayOfMonthRegex = "^[.]";
    const WeekDayAndDayRegex = "^[.]";
    const WeekDayOfMonthRegex: string;
    const RelativeWeekDayRegex = "^[.]";
    const AmbiguousRangeModifierPrefix = "^[.]";
    const NumberEndingPattern = "^[.]";
    const SpecialDateRegex: string;
    const OfMonthRegex: string;
    const MonthEndRegex: string;
    const WeekDayEnd: string;
    const WeekDayStart = "^[\\.]";
    const DateYearRegex: string;
    const DateExtractor1: string;
    const DateExtractor2: string;
    const DateExtractor3: string;
    const DateExtractor4: string;
    const DateExtractor5: string;
    const DateExtractor6: string;
    const DateExtractor7: string;
    const DateExtractor8: string;
    const DateExtractor9: string;
    const DateExtractor10: string;
    const HourNumRegex = "\\b(?<hournum>cero|una|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce)\\b";
    const MinuteNumRegex = "(?<minnum>un|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce|trece|catorce|quince|dieciseis|diecisiete|dieciocho|diecinueve|veinte|treinta|cuarenta|cincuenta)";
    const DeltaMinuteNumRegex = "(?<deltaminnum>un|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce|trece|catorce|quince|dieciseis|diecisiete|dieciocho|diecinueve|veinte|treinta|cuarenta|cincuenta)";
    const OclockRegex = "(?<oclock>en\\s+punto)";
    const PmRegex = "(?<pm>((por|de|a|en)\\s+la)\\s+(tarde|noche))";
    const AmRegex = "(?<am>((por|de|a|en)\\s+la)\\s+(ma\u00F1ana|madrugada))";
    const AmTimeRegex = "(?<am>(esta|(por|de|a|en)\\s+la)\\s+(ma\u00F1ana|madrugada))";
    const PmTimeRegex = "(?<pm>(esta|(por|de|a|en)\\s+la)\\s+(tarde|noche))";
    const LessThanOneHour: string;
    const TensTimeRegex = "(?<tens>diez|veint(i|e)|treinta|cuarenta|cincuenta)";
    const WrittenTimeRegex: string;
    const TimePrefix: string;
    const TimeSuffix: string;
    const BasicTime: string;
    const AtRegex: string;
    const ConnectNumRegex: string;
    const TimeRegex1: string;
    const TimeRegex2: string;
    const TimeRegex3: string;
    const TimeRegex4: string;
    const TimeRegex5: string;
    const TimeRegex6: string;
    const TimeRegex7: string;
    const TimeRegex8: string;
    const TimeRegex9: string;
    const TimeRegex10 = "(a\\s+la|al)\\s+(madrugada|ma\u00F1ana|medio\\s*d[i\u00ED]a|tarde|noche)";
    const TimeRegex11: string;
    const TimeRegex12: string;
    const PrepositionRegex = "\\b(?<prep>(a(l)?|en|de(l)?)?(\\s*(la(s)?|el|los))?$)\\b";
    const NowRegex = "\\b(?<now>(justo\\s+)?ahora(\\s+mismo)?|en\\s+este\\s+momento|tan\\s+pronto\\s+como\\s+sea\\s+posible|tan\\s+pronto\\s+como\\s+(pueda|puedas|podamos|puedan)|lo\\s+m[a\u00E1]s\\s+pronto\\s+posible|recientemente|previamente)\\b";
    const SuffixRegex = "^\\s*(((y|a|en|por)\\s+la|al)\\s+)?(ma\u00F1ana|madrugada|medio\\s*d[i\u00ED]a|tarde|noche)\\b";
    const TimeOfDayRegex = "\\b(?<timeOfDay>ma\u00F1ana|madrugada|(pasado\\s+(el\\s+)?)?medio\\s?d[i\u00ED]a|tarde|noche|anoche)\\b";
    const SpecificTimeOfDayRegex: string;
    const TimeOfTodayAfterRegex: string;
    const TimeOfTodayBeforeRegex: string;
    const SimpleTimeOfTodayAfterRegex: string;
    const SimpleTimeOfTodayBeforeRegex: string;
    const SpecificEndOfRegex = "((a|e)l\\s+)?fin(alizar|al)?(\\s+(el|de(l)?)(\\s+d[i\u00ED]a)?(\\s+de)?)?\\s*$";
    const UnspecificEndOfRegex = "^[.]";
    const UnspecificEndOfRangeRegex = "^[.]";
    const UnitRegex = "(?<unit>a\u00F1os|a\u00F1o|meses|mes|semanas|semana|d[i\u00ED]as|d[i\u00ED]a|horas|hora|h|hr|hrs|hs|minutos|minuto|mins|min|segundos|segundo|segs|seg)\\b";
    const ConnectorRegex = "^(,|t|para la|para las|cerca de la|cerca de las)$";
    const TimeHourNumRegex = "(?<hour>veintiuno|veintidos|veintitres|veinticuatro|cero|uno|dos|tres|cuatro|cinco|seis|siete|ocho|nueve|diez|once|doce|trece|catorce|quince|diecis([e\u00E9])is|diecisiete|dieciocho|diecinueve|veinte)";
    const PureNumFromTo: string;
    const PureNumBetweenAnd: string;
    const TimeRegexWithDotConnector: string;
    const SpecificTimeFromTo: string;
    const SpecificTimeBetweenAnd: string;
    const TimeUnitRegex = "([^A-Za-z]{1,}|\\b)(?<unit>horas|hora|h|minutos|minuto|mins|min|segundos|segundo|secs|sec)\\b";
    const TimeFollowedUnit: string;
    const TimeNumberCombinedWithUnit: string;
    const DateTimePeriodNumberCombinedWithUnit: string;
    const PeriodTimeOfDayWithDateRegex = "\\b(((y|a|en|por)\\s+(la\\s+)?|al\\s+)?(((?<early>primeras\\s+horas\\s+)|(?<late>(\u00FAltimas|altas)\\s+horas\\s+))?(de\\s+la\\s+)?(?<timeOfDay>(ma\u00F1ana|madrugada|(pasado\\s+(el\\s+)?)?medio\\s?d[i\u00ED]a|tarde|noche|anoche))))(\\s+(del|de))?\\b";
    const RelativeTimeUnitRegex: string;
    const LessThanRegex = "\\b(dentro\\s+de\\s+menos\\s+de)\\b";
    const MoreThanRegex = "\\b(durante\\s+(m[\u00E1a]s\\s+)?de)\\b";
    const SuffixAndRegex = "(?<suffix>\\s*(y)\\s+((un|uno|una)\\s+)?(?<suffix_num>media|cuarto))";
    const FollowedUnit: string;
    const DurationNumberCombinedWithUnit: string;
    const AnUnitRegex: string;
    const DuringRegex = "^[.]";
    const AllRegex = "\\b(?<all>tod[oa]?\\s+(el|la)\\s+(?<unit>a\u00F1o|mes|semana|d[i\u00ED]a))\\b";
    const HalfRegex = "\\b(?<half>medi[oa]\\s+(?<unit>ano|mes|semana|d[\u00EDi]a|hora))\\b";
    const ConjunctionRegex = "^[.]";
    const InexactNumberRegex = "\\b(pocos|poco|algo|varios)\\b";
    const InexactNumberUnitRegex: string;
    const HolidayRegex1: string;
    const HolidayRegex2: string;
    const HolidayRegex3: string;
    const BeforeRegex = "(antes(\\s+del?(\\s+las?)?)?)";
    const AfterRegex = "(despues(\\s*del?(\\s+las?)?)?)";
    const SinceRegex = "(desde(\\s+(las?|el))?)";
    const AroundRegex = "^[.]";
    const PeriodicRegex = "\\b(?<periodic>a\\s*diario|diariamente|mensualmente|semanalmente|quincenalmente|anualmente)\\b";
    const EachExpression = "cada|tod[oa]s\\s*(l[oa]s)?";
    const EachUnitRegex: string;
    const EachPrefixRegex: string;
    const EachDayRegex: string;
    const BeforeEachDayRegex: string;
    const SetEachRegex: string;
    const LaterEarlyPeriodRegex: string;
    const RelativeWeekRegex = "(((la|el)\\s+)?(((esta|este|pr[o\u00F3]xim[oa]|[u\u00FA]ltim(o|as|os))\\s+semana(s)?)|(semana(s)?\\s+(que\\s+viene|pasad[oa]))))";
    const WeekWithWeekDayRangeRegex: string;
    const GeneralEndingRegex = "^[.]";
    const MiddlePauseRegex = "^[.]";
    const PrefixArticleRegex = "^[\\.]";
    const OrRegex = "^[.]";
    const YearPlusNumberRegex: string;
    const NumberAsTimeRegex = "^[.]";
    const TimeBeforeAfterRegex = "^[.]";
    const DateNumberConnectorRegex = "^[.]";
    const CenturyRegex = "^[.]";
    const DecadeRegex = "(?<decade>diez|veinte|treinta|cuarenta|cincuenta|sesenta|setenta|ochenta|noventa)";
    const DecadeWithCenturyRegex: string;
    const RelativeDecadeRegex: string;
    const ComplexDatePeriodRegex = "^[.]";
    const YearSuffix: string;
    const AgoRegex = "\\b(antes\\s+de\\s+(?<day>hoy|ayer|ma\u00F1ana)|antes)\\b";
    const LaterRegex = "\\b(despu[e\u00E9]s|desde\\s+ahora|a\\s+partir\\s+de\\s+(?<day>hoy|ayer|ma\u00F1ana))\\b";
    const Tomorrow = "ma\u00F1ana";
    const UnitMap: ReadonlyMap<string, string>;
    const UnitValueMap: ReadonlyMap<string, number>;
    const SpecialYearPrefixesMap: ReadonlyMap<string, string>;
    const SeasonMap: ReadonlyMap<string, string>;
    const SeasonValueMap: ReadonlyMap<string, number>;
    const CardinalMap: ReadonlyMap<string, number>;
    const DayOfWeek: ReadonlyMap<string, number>;
    const MonthOfYear: ReadonlyMap<string, number>;
    const Numbers: ReadonlyMap<string, number>;
    const HolidayNames: ReadonlyMap<string, string[]>;
    const VariableHolidaysTimexDictionary: ReadonlyMap<string, string>;
    const DoubleNumbers: ReadonlyMap<string, number>;
    const DateTokenPrefix = "en ";
    const TimeTokenPrefix = "a las ";
    const TokenBeforeDate = "el ";
    const TokenBeforeTime = "la ";
    const UpcomingPrefixRegex = ".^";
    const NextPrefixRegex: string;
    const PastPrefixRegex = ".^";
    const PreviousPrefixRegex: string;
    const PreviousSuffixRegex = "\\b(pasad[ao])\\b";
    const ThisPrefixRegex = "(est[ea])\\b";
    const RelativeDayRegex = "(?<relday>((este|pr[o\u00F3]ximo|([u\u00FA]ltim(o|as|os)))\\s+d\u00EDas)|(d\u00EDas\\s+((que\\s+viene)|pasado)))\\b";
    const RestOfDateRegex = "\\bresto\\s+((del|de)\\s+)?((la|el|est[ae])\\s+)?(?<duration>semana|mes|a\u00F1o|decada)(\\s+actual)?\\b";
    const RelativeDurationUnitRegex = "^[\\.]";
    const ReferencePrefixRegex = "(mism[ao]|aquel)\\b";
    const ReferenceDatePeriodRegex: string;
    const FromToRegex = "\\b(from).+(to)\\b.+";
    const SingleAmbiguousMonthRegex = "^(the\\s+)?(may|march)$";
    const UnspecificDatePeriodRegex = "^[.]";
    const PrepositionSuffixRegex = "\\b(on|in|at|around|for|during|since|from|to)$";
    const RestOfDateTimeRegex = "\\bresto\\s+((del|de)\\s+)?((la|el|est[ae])\\s+)?(?<unit>(d\u00EDa|jornada))(\\s+de\\s+hoy)?\\b";
    const SetWeekDayRegex = "^[\\.]";
    const NightRegex = "\\b(medionoche|noche)\\b";
    const CommonDatePrefixRegex = "^[\\.]";
    const DurationUnitRegex = "^[\\.]";
    const DurationConnectorRegex = "^[.]";
    const SuffixAfterRegex = "^[.](?!$)";
    const YearPeriodRegex = "^[.]";
    const FutureSuffixRegex = "\\b(despu[\u00E9e]s)\\b";
    const WrittenDecades: ReadonlyMap<string, number>;
    const SpecialDecadeCases: ReadonlyMap<string, number>;
    const DefaultLanguageFallback = "DMY";
    const DurationDateRestrictions: string[];
    const EarlyMorningTermList: string[];
    const MorningTermList: string[];
    const AfternoonTermList: string[];
    const EveningTermList: string[];
    const NightTermList: string[];
    const SameDayTerms: string[];
    const PlusOneDayTerms: string[];
    const MinusOneDayTerms: string[];
    const PlusTwoDayTerms: string[];
    const MinusTwoDayTerms: string[];
    const MonthTerms: string[];
    const MonthToDateTerms: string[];
    const WeekendTerms: string[];
    const WeekTerms: string[];
    const YearTerms: string[];
    const YearToDateTerms: string[];
    const SpecialCharactersEquivalent: ReadonlyMap<string, string>;
}
