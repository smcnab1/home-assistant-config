"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var nora_1 = require("../nora");
var util_1 = require("./util");
module.exports = function (RED) {
    RED.nodes.registerType('nora-outlet', function (config) {
        var _this = this;
        RED.nodes.createNode(this, config);
        var noraConfig = RED.nodes.getNode(config.nora);
        if (!noraConfig || !noraConfig.token) {
            return;
        }
        var close$ = new rxjs_1.Subject();
        var state$ = new rxjs_1.BehaviorSubject({ on: false, online: true });
        var stateString$ = new rxjs_1.Subject();
        var _a = util_1.convertValueType(RED, config.onvalue, config.onvalueType, { defaultValue: true }), onValue = _a.value, onType = _a.type;
        var _b = util_1.convertValueType(RED, config.offvalue, config.offvalueType, { defaultValue: false }), offValue = _b.value, offType = _b.type;
        var device$ = nora_1.NoraService
            .getService(RED)
            .getConnection(noraConfig, this, stateString$)
            .pipe(operators_1.switchMap(function (connection) { return connection.addDevice(config.id, {
            type: 'outlet',
            name: config.devicename,
            roomHint: config.roomhint || undefined,
            state: state$.value,
        }); }), operators_1.publishReplay(1), operators_1.refCount(), operators_1.takeUntil(close$));
        rxjs_1.combineLatest([device$, state$])
            .pipe(operators_1.tap(function (_a) {
            var _ = _a[0], state = _a[1];
            return notifyState(state.on);
        }), operators_1.skip(1), operators_1.takeUntil(close$))
            .subscribe(function (_a) {
            var device = _a[0], state = _a[1];
            return device.updateState(state);
        });
        device$.pipe(operators_1.switchMap(function (d) { return d.errors$; }), operators_1.takeUntil(close$)).subscribe(function (err) { return _this.warn(err); });
        device$.pipe(operators_1.switchMap(function (d) { return d.state$; }), operators_1.takeUntil(close$)).subscribe(function (state) {
            var value = state.on;
            notifyState(state.on);
            _this.send({
                payload: util_1.getValue(RED, _this, value ? onValue : offValue, value ? onType : offType),
                topic: config.topic
            });
        });
        this.on('input', function (msg) {
            if (config.passthru) {
                _this.send(msg);
            }
            var myOnValue = util_1.getValue(RED, _this, onValue, onType);
            var myOffValue = util_1.getValue(RED, _this, offValue, offType);
            if (RED.util.compareObjects(myOnValue, msg.payload)) {
                state$.next(tslib_1.__assign(tslib_1.__assign({}, state$.value), { on: true }));
            }
            else if (RED.util.compareObjects(myOffValue, msg.payload)) {
                state$.next(tslib_1.__assign(tslib_1.__assign({}, state$.value), { on: false }));
            }
            else {
                util_1.updateState(msg === null || msg === void 0 ? void 0 : msg.payload, state$);
            }
        });
        this.on('close', function () {
            close$.next();
            close$.complete();
        });
        function notifyState(on) {
            stateString$.next("(" + (on ? 'on' : 'off') + ")");
        }
    });
};
