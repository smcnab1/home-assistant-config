"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserTokenClientImpl = void 0;
const z = require("zod");
const tokenApiClient_1 = require("../tokenApi/tokenApiClient");
const userTokenClient_1 = require("./userTokenClient");
// Internal
class UserTokenClientImpl extends userTokenClient_1.UserTokenClient {
    constructor(appId, credentials, oauthEndpoint, connectorClientOptions = {}) {
        super();
        this.appId = appId;
        this.client = new tokenApiClient_1.TokenApiClient(credentials, Object.assign({ baseUri: oauthEndpoint }, connectorClientOptions));
    }
    getUserToken(userId, connectionName, channelId, magicCode) {
        return __awaiter(this, void 0, void 0, function* () {
            z.object({
                userId: z.string(),
                connectionName: z.string(),
                channelId: z.string(),
            }).parse({
                userId,
                connectionName,
                channelId,
            });
            const result = yield this.client.userToken.getToken(userId, connectionName, { channelId, code: magicCode });
            return result._response.parsedBody;
        });
    }
    getSignInResource(connectionName, activity, finalRedirect) {
        return __awaiter(this, void 0, void 0, function* () {
            z.object({
                activity: z.record(z.unknown()),
                connectionName: z.string(),
            }).parse({
                activity,
                connectionName,
            });
            const result = yield this.client.botSignIn.getSignInResource(userTokenClient_1.UserTokenClient.createTokenExchangeState(this.appId, connectionName, activity), { finalRedirect });
            return result._response.parsedBody;
        });
    }
    signOutUser(userId, connectionName, channelId) {
        return __awaiter(this, void 0, void 0, function* () {
            z.object({
                userId: z.string(),
                connectionName: z.string(),
                channelId: z.string(),
            }).parse({
                userId,
                connectionName,
                channelId,
            });
            yield this.client.userToken.signOut(userId, { channelId, connectionName });
        });
    }
    getTokenStatus(userId, channelId, includeFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            z.object({
                userId: z.string(),
                channelId: z.string(),
            }).parse({
                userId,
                channelId,
            });
            const result = yield this.client.userToken.getTokenStatus(userId, {
                channelId,
                include: includeFilter,
            });
            return result._response.parsedBody;
        });
    }
    getAadTokens(userId, connectionName, resourceUrls, channelId) {
        return __awaiter(this, void 0, void 0, function* () {
            z.object({
                userId: z.string(),
                connectionName: z.string(),
                channelId: z.string(),
            }).parse({
                userId,
                connectionName,
                channelId,
            });
            const result = yield this.client.userToken.getAadTokens(userId, connectionName, { resourceUrls }, { channelId });
            return result._response.parsedBody;
        });
    }
    exchangeToken(userId, connectionName, channelId, exchangeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            z.object({
                userId: z.string(),
                connectionName: z.string(),
                channelId: z.string(),
            }).parse({
                userId,
                connectionName,
                channelId,
            });
            const result = yield this.client.userToken.exchangeAsync(userId, connectionName, channelId, exchangeRequest);
            return result._response.parsedBody;
        });
    }
}
exports.UserTokenClientImpl = UserTokenClientImpl;
//# sourceMappingURL=userTokenClientImpl.js.map