import { Activity } from 'botframework-schema';
import { AuthenticateRequestResult } from './authenticateRequestResult';
import { AuthenticationConfiguration } from './authenticationConfiguration';
import { BotFrameworkAuthentication } from './botFrameworkAuthentication';
import { ConnectorClientOptions } from '../connectorApi/models';
import { ConnectorFactory } from './connectorFactory';
import { BotFrameworkClient } from '../skills';
import { ClaimsIdentity } from './claimsIdentity';
import { ServiceClientCredentialsFactory } from './serviceClientCredentialsFactory';
import { UserTokenClient } from './userTokenClient';
export declare class ParameterizedBotFrameworkAuthentication extends BotFrameworkAuthentication {
    private readonly validateAuthority;
    private readonly toChannelFromBotLoginUrl;
    private readonly toChannelFromBotOAuthScope;
    private readonly toBotFromChannelTokenIssuer;
    private readonly oAuthUrl;
    private readonly toBotFromChannelOpenIdMetadataUrl;
    private readonly toBotFromEmulatorOpenIdMetadataUrl;
    private readonly callerId;
    private readonly credentialsFactory;
    private readonly authConfiguration;
    private readonly botFrameworkClientFetch?;
    private readonly connectorClientOptions;
    constructor(validateAuthority: boolean, toChannelFromBotLoginUrl: string, toChannelFromBotOAuthScope: string, toBotFromChannelTokenIssuer: string, oAuthUrl: string, toBotFromChannelOpenIdMetadataUrl: string, toBotFromEmulatorOpenIdMetadataUrl: string, callerId: string, credentialsFactory: ServiceClientCredentialsFactory, authConfiguration: AuthenticationConfiguration, botFrameworkClientFetch?: (input: RequestInfo, init?: RequestInit) => Promise<Response>, connectorClientOptions?: ConnectorClientOptions);
    getOriginatingAudience(): string;
    authenticateChannelRequest(authHeader: string): Promise<ClaimsIdentity>;
    authenticateRequest(activity: Activity, authHeader: string): Promise<AuthenticateRequestResult>;
    authenticateStreamingRequest(authHeader: string, channelIdHeader: string): Promise<AuthenticateRequestResult>;
    createUserTokenClient(claimsIdentity: ClaimsIdentity): Promise<UserTokenClient>;
    createConnectorFactory(claimsIdentity: ClaimsIdentity): ConnectorFactory;
    createBotFrameworkClient(): BotFrameworkClient;
    private JwtTokenValidation_authenticateRequest;
    private JwtTokenValidation_validateAuthHeader;
    private JwtTokenValidation_validateClaims;
    private JwtTokenValidation_authenticateToken;
    private SkillValidation_authenticateChannelToken;
    private SkillValidation_ValidateIdentity;
    private EmulatorValidation_authenticateEmulatorToken;
    private ChannelValidation_authenticateChannelToken;
    private ChannelValidation_GetTokenValidationParameters;
    private governmentChannelValidation_ValidateIdentity;
}
//# sourceMappingURL=parameterizedBotFrameworkAuthentication.d.ts.map
