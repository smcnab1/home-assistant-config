"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var nora_1 = require("../nora");
var util_1 = require("./util");
module.exports = function (RED) {
    RED.nodes.registerType('nora-scene', function (config) {
        var _this = this;
        RED.nodes.createNode(this, config);
        var noraConfig = RED.nodes.getNode(config.nora);
        if (!noraConfig || !noraConfig.token) {
            return;
        }
        var _a = util_1.convertValueType(RED, config.onvalue, config.onvalueType, { defaultValue: true }), onValue = _a.value, onType = _a.type;
        var _b = util_1.convertValueType(RED, config.offvalue, config.offvalueType, { defaultValue: false }), offValue = _b.value, offType = _b.type;
        var close$ = new rxjs_1.Subject();
        nora_1.NoraService
            .getService(RED)
            .getConnection(noraConfig, this)
            .pipe(operators_1.switchMap(function (connection) { return connection.addDevice(config.id, {
            type: 'scene',
            name: config.devicename,
            roomHint: config.roomhint || undefined,
            sceneReversible: !!config.scenereversible,
            state: { online: true },
        }); }), operators_1.switchMap(function (device) { return device.activateScene$; }), operators_1.takeUntil(close$)).subscribe(function (_a) {
            var deactivate = _a.deactivate;
            var value = !deactivate;
            _this.send({
                payload: util_1.getValue(RED, _this, value ? onValue : offValue, value ? onType : offType),
                topic: config.topic
            });
        });
        this.on('close', function () {
            close$.next();
            close$.complete();
        });
    });
};
