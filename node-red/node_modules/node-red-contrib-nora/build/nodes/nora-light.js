"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var nora_1 = require("../nora");
var util_1 = require("./util");
module.exports = function (RED) {
    RED.nodes.registerType('nora-light', function (config) {
        var _this = this;
        RED.nodes.createNode(this, config);
        var noraConfig = RED.nodes.getNode(config.nora);
        if (!noraConfig || !noraConfig.token) {
            return;
        }
        var brightnessControl = !!config.brightnesscontrol;
        var statepayload = !!config.statepayload;
        var colorControl = !!config.lightcolor;
        var turnOnWhenBrightnessChanges = !!config.turnonwhenbrightnesschanges;
        var _a = util_1.convertValueType(RED, config.onvalue, config.onvalueType, { defaultValue: true }), onValue = _a.value, onType = _a.type;
        var _b = util_1.convertValueType(RED, config.offvalue, config.offvalueType, { defaultValue: false }), offValue = _b.value, offType = _b.type;
        var brightnessOverride = Math.max(0, Math.min(100, Math.round(config.brightnessoverride))) || 0;
        var close$ = new rxjs_1.Subject();
        var initialState = {
            online: true,
            on: false,
        };
        if (brightnessControl) {
            initialState.brightness = 100;
        }
        if (colorControl) {
            initialState.color = {
                spectrumHsv: {
                    hue: 0,
                    saturation: 0,
                    value: 1,
                },
            };
        }
        var state$ = new rxjs_1.BehaviorSubject(initialState);
        var stateString$ = new rxjs_1.Subject();
        var device$ = nora_1.NoraService
            .getService(RED)
            .getConnection(noraConfig, this, stateString$)
            .pipe(operators_1.switchMap(function (connection) { return connection.addDevice(config.id, {
            type: 'light',
            brightnessControl: brightnessControl,
            turnOnWhenBrightnessChanges: brightnessControl ? turnOnWhenBrightnessChanges : undefined,
            colorControl: colorControl,
            name: config.devicename,
            roomHint: config.roomhint || undefined,
            state: tslib_1.__assign({ online: true }, state$.value),
        }); }), operators_1.publishReplay(1), operators_1.refCount(), operators_1.takeUntil(close$));
        rxjs_1.combineLatest([device$, state$])
            .pipe(operators_1.tap(function (_a) {
            var _ = _a[0], state = _a[1];
            return notifyState(state);
        }), operators_1.skip(1), operators_1.takeUntil(close$))
            .subscribe(function (_a) {
            var device = _a[0], state = _a[1];
            return device.updateState(state);
        });
        device$.pipe(operators_1.switchMap(function (d) { return d.errors$; }), operators_1.takeUntil(close$)).subscribe(function (err) { return _this.warn(err); });
        device$.pipe(operators_1.switchMap(function (d) { return d.state$; }), operators_1.takeUntil(close$)).subscribe(function (state) {
            notifyState(state);
            if (!brightnessControl) {
                var value = state.on;
                _this.send({
                    payload: util_1.getValue(RED, _this, value ? onValue : offValue, value ? onType : offType),
                    topic: config.topic
                });
            }
            else {
                if (statepayload) {
                    _this.send({
                        payload: tslib_1.__assign({}, state),
                        topic: config.topic
                    });
                }
                else {
                    _this.send({
                        payload: state.on && 'brightness' in state ? state.brightness : 0,
                        topic: config.topic
                    });
                }
            }
        });
        this.on('input', function (msg) {
            if (config.passthru) {
                _this.send(msg);
            }
            if (!brightnessControl) {
                var myOnValue = util_1.getValue(RED, _this, onValue, onType);
                var myOffValue = util_1.getValue(RED, _this, offValue, offType);
                if (RED.util.compareObjects(myOnValue, msg.payload)) {
                    state$.next(tslib_1.__assign(tslib_1.__assign({}, state$.value), { on: true }));
                }
                else if (RED.util.compareObjects(myOffValue, msg.payload)) {
                    state$.next(tslib_1.__assign(tslib_1.__assign({}, state$.value), { on: false }));
                }
                else {
                    util_1.updateState(msg === null || msg === void 0 ? void 0 : msg.payload, state$);
                }
            }
            else {
                if (!util_1.updateState(msg === null || msg === void 0 ? void 0 : msg.payload, state$)) {
                    var brightness = Math.max(0, Math.min(100, Math.round(msg.payload)));
                    if (isFinite(brightness)) {
                        if (brightness === 0) {
                            if (brightnessOverride !== 0) {
                                state$.next(tslib_1.__assign(tslib_1.__assign({}, state$.value), { on: false, brightness: brightnessOverride }));
                            }
                            else {
                                state$.next(tslib_1.__assign(tslib_1.__assign({}, state$.value), { on: false }));
                            }
                        }
                        else {
                            state$.next(tslib_1.__assign(tslib_1.__assign({}, state$.value), { on: true, brightness: brightness }));
                        }
                    }
                    else {
                        _this.error('Payload must be a number in range 0-100');
                    }
                }
            }
        });
        this.on('close', function () {
            close$.next();
            close$.complete();
        });
        function notifyState(state) {
            var stateString = state.on ? 'on' : 'off';
            if (brightnessControl && 'brightness' in state) {
                stateString += " " + state.brightness;
            }
            if (colorControl && 'color' in state) {
                stateString += " hue: " + Number(state.color.spectrumHsv.hue).toFixed(2) + "\u00B0";
                stateString += " sat: " + Number(state.color.spectrumHsv.saturation * 100).toFixed(2) + "%";
                stateString += " val: " + Number(state.color.spectrumHsv.value * 100).toFixed(2) + "%";
            }
            stateString$.next("(" + stateString + ")");
        }
    });
};
