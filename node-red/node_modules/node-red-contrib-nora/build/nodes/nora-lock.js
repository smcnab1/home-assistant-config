"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var nora_1 = require("../nora");
var util_1 = require("./util");
module.exports = function (RED) {
    RED.nodes.registerType('nora-lock', function (config) {
        var _this = this;
        RED.nodes.createNode(this, config);
        var noraConfig = RED.nodes.getNode(config.nora);
        if (!noraConfig || !noraConfig.token) {
            return;
        }
        var close$ = new rxjs_1.Subject();
        var state$ = new rxjs_1.BehaviorSubject({
            online: true,
            isLocked: false,
            isJammed: false,
        });
        var stateString$ = new rxjs_1.Subject();
        var _a = util_1.convertValueType(RED, config.lockValue, config.lockValueType, { defaultValue: true }), lockValue = _a.value, lockType = _a.type;
        var _b = util_1.convertValueType(RED, config.unlockValue, config.unlockValueType, { defaultValue: false }), unlockValue = _b.value, unlockType = _b.type;
        var _c = util_1.convertValueType(RED, config.jammedValue, config.jammedValueType, { defaultValue: true }), jammedValue = _c.value, jammedType = _c.type;
        var _d = util_1.convertValueType(RED, config.unjammedValue, config.unjammedValueType, { defaultValue: false }), unjammedValue = _d.value, unjammedType = _d.type;
        var device$ = nora_1.NoraService
            .getService(RED)
            .getConnection(noraConfig, this, stateString$)
            .pipe(operators_1.switchMap(function (connection) { return connection.addDevice(config.id, {
            type: 'lock',
            name: config.devicename,
            roomHint: config.roomhint || undefined,
            state: state$.value,
        }); }), operators_1.publishReplay(1), operators_1.refCount(), operators_1.takeUntil(close$));
        rxjs_1.combineLatest([device$, state$])
            .pipe(operators_1.tap(function (_a) {
            var _ = _a[0], state = _a[1];
            return notifyState(state);
        }), operators_1.skip(1), operators_1.takeUntil(close$))
            .subscribe(function (_a) {
            var device = _a[0], state = _a[1];
            return device.updateState(state);
        });
        device$.pipe(operators_1.switchMap(function (d) { return d.errors$; }), operators_1.takeUntil(close$)).subscribe(function (err) { return _this.warn(err); });
        device$.pipe(operators_1.switchMap(function (d) { return d.state$; }), operators_1.takeUntil(close$)).subscribe(function (state) {
            notifyState(state);
            var lvalue = state.isLocked;
            if (!state.isJammed) {
                _this.send({
                    payload: util_1.getValue(RED, _this, lvalue ? lockValue : unlockValue, lvalue ? lockType : unlockType),
                    topic: config.topic,
                });
            }
            else {
                _this.error('Lock is jammed');
            }
        });
        this.on('input', function (msg) {
            var _a;
            if (config.passthru) {
                _this.send(msg);
            }
            var myLockValue = util_1.getValue(RED, _this, lockValue, lockType);
            var myUnlockValue = util_1.getValue(RED, _this, unlockValue, unlockType);
            if (((_a = msg.topic) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'jammed') {
                var myJammedValue = util_1.getValue(RED, _this, jammedValue, jammedType);
                var myUnjammedValue = util_1.getValue(RED, _this, unjammedValue, unjammedType);
                if (RED.util.compareObjects(myJammedValue, msg.payload)) {
                    state$.next(tslib_1.__assign(tslib_1.__assign({}, state$.value), { isJammed: true }));
                }
                else if (RED.util.compareObjects(myUnjammedValue, msg.payload)) {
                    state$.next(tslib_1.__assign(tslib_1.__assign({}, state$.value), { isJammed: false }));
                }
            }
            else {
                if (RED.util.compareObjects(myLockValue, msg.payload)) {
                    state$.next(tslib_1.__assign(tslib_1.__assign({}, state$.value), { isLocked: true }));
                }
                else if (RED.util.compareObjects(myUnlockValue, msg.payload)) {
                    state$.next(tslib_1.__assign(tslib_1.__assign({}, state$.value), { isLocked: false }));
                }
                else {
                    util_1.updateState(msg === null || msg === void 0 ? void 0 : msg.payload, state$);
                }
            }
        });
        this.on('close', function () {
            close$.next();
            close$.complete();
        });
        function notifyState(state) {
            if (state.isJammed) {
                stateString$.next("(jammed)");
            }
            else {
                stateString$.next("(" + (state.isLocked ? 'locked' : 'unlocked') + ")");
            }
        }
    });
};
