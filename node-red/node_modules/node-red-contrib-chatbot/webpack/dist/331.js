(self.webpackChunknode_red_contrib_chatbot=self.webpackChunknode_red_contrib_chatbot||[]).push([[331],{54331:(e,t,n)=>{"use strict";n.r(t);var a=n(67294),l=n(18985),r=n(25912),o=n(46111),i=n(80091),s=n(71777),c=n(48891),u=n(77560);var m=n(84197),d=n(63792),p=n(66352),g=n(89061);function h(){return h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},h.apply(this,arguments)}const f=[{name:"authorization.notAuthorized",description:"Shown when the user is not authorized in a private chatbot"},{name:"authorization.suspended",description:"Shown when the user is suspeded in a public chatbot"},{name:"authorization.userNotFound",description:"Shown when the user is not found on the local db, something went wrong"}],{NodeRedNode:y,SlugHelp:b,TypeCommand:E}=r.AK;(0,l.plug)("user-tabs",(({formValue:e={},formError:t=null,onChange:n})=>(e=e||{},a.createElement(o.Z,{formValue:e,formError:t,onChange:n,fluid:!0,autoComplete:"off"},a.createElement(i.Z,null,a.createElement(s.Z,null,"Authorized"),a.createElement(c.Z,{onChange:t=>n({...e,authorized:t,suspended:!t&&e.suspended}),checked:e.authorized}),a.createElement(u.Z,null,"Only authorized users can access private chatbot")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Suspend"),a.createElement(c.Z,{onChange:t=>n({...e,suspended:t,authorized:!t&&e.authorized}),checked:e.suspended}),a.createElement(u.Z,null,"Suspended user cannot access a public chatbot"))))),{id:"suspend-user",label:"Access",permission:"users.authorize"}),(0,l.plug)("sidebar",null,{permission:"configure",id:"configuration",label:"Configuration",icon:"cog",options:[{id:"authorization",label:"Bot Access",url:"/authorization"}]}),(0,l.plug)("pages",(0,r.ln)("redbot-authorization",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,y]=(0,a.useState)(e),[b,E]=(0,a.useState)(null),[v,w]=(0,a.useState)("access"),Z=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(m.Z,{appearance:"tabs",activeKey:v,onSelect:w,style:{marginBottom:"25px"}},a.createElement(m.Z.Item,{eventKey:"access"},"Access"),a.createElement(m.Z.Item,{eventKey:"translations"},"Translations")),a.createElement(o.Z,{disabled:!0,formValue:l,formError:b,ref:Z,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{y(e),E(null)},onCheck:e=>{E(e)}},"translations"===v&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(d.Z,{name:"translations",accepter:r.Xy,schema:f,disabled:n}))),"access"===v&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(s.Z,null,"Private"),a.createElement(d.Z,{name:"private",accepter:(k=c.Z,({value:e,...t})=>a.createElement(k,h({checked:e},t))),disabled:n}),a.createElement(u.Z,null,"In a private chatbot, only authorized user can access"))),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{Z.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&y(e)}},"Reset")))));var k}),{Legend:()=>a.createElement("div",null,a.createElement(y,null,"Authorization"),a.createElement("p",null,"Set the chatbot private, only authorized user will be able to use the chatbot. Set the authorization in the users section."),a.createElement("p",null,"For public chatbot it's possibile to suspend a user.")),title:"Bot Access"}),{permission:"configure",url:"/authorization",title:"Welcome Message",id:"page-authorization"}),(0,l.plug)("permissions",null,{permission:"users.authorize",name:"Authorize/Suspend",description:"Authorize or suspend a user",group:"Users"});var v=n(70319),w=n(98134),Z=n(20968),k=n(19642),x=n(96486),C=n.n(x),S=n(88182);const{StringType:q,ArrayType:I,ObjectType:T,DateType:N}=S.Z.Types,P=S.Z.Model({openings:I().of(T().shape({start:N().isRequired("Specify starting hour"),end:N().isRequired("Specify ending hour"),range:q().isRequired("Select a range for opening hours")})).addRule((e=>C().isArray(e)&&0!==e.length),"Specify at least an opening hour")});var R=n(45697),O=n.n(R),A=n(57770);const z=[{key:"url",type:"string",description:"The url opened clicking on the card button",defaultValue:"http://",color:"red"},{key:"labelButton",type:"string",description:"The label of the card button",defaultValue:"Open",color:"orange"}],j=({value:e,onChange:t,disabled:n=!1})=>a.createElement("div",null,a.createElement(A.Z,{disabled:n,useSlug:!0,canCreate:!0,value:e.slug,customFieldsSchema:z,fluid:!0,onChange:n=>t({...e,slug:n})}));j.propTypes={value:O().shape({slug:O().string}),onChange:O().func,disabled:O().bool};const M=j,B=[{name:"carousel.intro",description:"Introduction text of the carousel"}];(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"carousel",label:"Carousel",url:"/configuration-carousel"}]}),(0,l.plug)("pages",(0,w.Z)("carousel",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,r]=(0,a.useState)(e),[c,h]=(0,a.useState)(null),[f,y]=(0,a.useState)("carousel"),b=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(m.Z,{appearance:"tabs",activeKey:f,onSelect:y,style:{marginBottom:"25px"}},a.createElement(m.Z.Item,{eventKey:"carousel"},"Carousel"),a.createElement(m.Z.Item,{eventKey:"translations"},"Translations")),a.createElement(o.Z,{model:P,disabled:!0,formValue:l,formError:c,ref:b,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{r(e),h(null)},onCheck:e=>{h(e)}},"translations"===f&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(d.Z,{name:"translations",accepter:k.Z,schema:B,disabled:n}))),"carousel"===f&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(s.Z,null,"Carousel Cards",a.createElement(u.Z,{tooltip:!0},"Select one or more content")),a.createElement(d.Z,{name:"cards",accepter:Z.Z,form:M,labelAdd:"Add card",disabled:n}))),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{b.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&r(e)}},"Reset")))))}),{Legend:()=>a.createElement("div",null,a.createElement(v.NodeRedNode,null,"Cards"),a.createElement("p",null,"Configure the carousel of cards to show in the chabot: select one or more ",a.createElement("em",null,"slugs")," from the ",a.createElement("strong",null,"Content")," section."),a.createElement(v.SlugHelp,null)),title:"Carousel"}),{permission:"configure",url:"/configuration-carousel",title:"Carousel",id:"configuration-carousel"});const{StringType:F,ArrayType:K,ObjectType:L,DateType:D}=S.Z.Types,V=S.Z.Model({commands:K().of(L().shape({command:F().isRequired("Specify the command").addRule((e=>e.startsWith("/")),'Command should start with "/"'),slug:F().isRequired("Specifig a slug (shortcut) for a content")})).addRule((e=>{const t=e.map((e=>e.command));return C().uniq(t).length===t.length}),"Some contents have the same command")});var U=n(50721),H=n(85951);const W=({value:e,onChange:t,disabled:n=!1})=>a.createElement(U.Z,{justify:"space-between"},a.createElement(U.Z.Item,{colspan:8},a.createElement(H.Z,{value:e.command,placeholder:"/command",onChange:n=>t({...e,command:n})})),a.createElement(U.Z.Item,{colspan:15},a.createElement(r.MN,{disabled:n,useSlug:!0,canCreate:!0,value:e.slug,fluid:!0,onChange:n=>t({...e,slug:n})})));W.propTypes={value:O().shape({slug:O().string,command:O().string}),onChange:O().func,disabled:O().bool};const $=W,{NodeRedNode:J,SlugHelp:Q,TypeCommand:G}=r.AK;(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"commands",label:"Commands",url:"/configuration-commands"}]}),(0,l.plug)("pages",(0,r.ln)("commands",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,c]=(0,a.useState)(e),[m,h]=(0,a.useState)(null),f=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(o.Z,{model:V,disabled:!0,formValue:l,formError:m,ref:f,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{c(e),h(null)},onCheck:e=>{h(e)}},a.createElement(i.Z,null,a.createElement(s.Z,null,"Content Commands",a.createElement(u.Z,{tooltip:!0},"Select one or more content to be shown after a command-line message (like ",a.createElement("em",null,"/privacy"),", etc)")),a.createElement(d.Z,{name:"commands",accepter:r.JX,form:$,labelAdd:"Add command",disabled:n,sortable:!1})),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{f.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&c(e)}},"Reset")))))}),{Legend:()=>a.createElement("div",null,a.createElement(J,null,"Commands"),a.createElement("p",null,"Use the this node to show some contents in response of some command-like messages from users, this is a perfect place to put some statics documents for pricacy or tos (for example ",a.createElement(G,null,"/privacy")," or ",a.createElement(G,null,"/terms"),")."),a.createElement(Q,null)),title:"Commands"}),{permission:"configure",url:"/configuration-commands",title:"Commands",id:"configuration-commands"});var X=n(77188),Y=n(52996);const ee=[{name:"knowledge-base.bestMatch",description:"Text shown before the list of opening hours"},{name:"knowledge-base.sorryNotFound1",description:"Answer when no support articles were found (first version)"},{name:"knowledge-base.sorryNotFound2",description:"Answer when no support articles were found (second version)"},{name:"knowledge-base.sorryNotFound3",description:"Answer when no support articles were found (third version)"},{name:"knowledge-base.askSomething1",description:"What the chatbot answer when the user requests help (first version)"},{name:"knowledge-base.askSomething2",description:"What the chatbot answer when the user requests help (second version)"},{name:"knowledge-base.askSomething3",description:"What the chatbot answer when the user requests help (third version)"},{name:"knowledge-base.no"},{name:"knowledge-base.yes"},{name:"knowledge-base.ok"},{name:"knowledge-base.wasUseful",description:"Asked if an article is useful after a search"},{name:"knowledge-base.thanksBye1",description:"Answer when the user is satisfied with the found article (first version)"},{name:"knowledge-base.thanksBye2",description:"Answer when the user is satisfied with the found article (second version)"},{name:"knowledge-base.thanksBye3",description:"Answer when the user is satisfied with the found article (third version)"},{name:"knowledge-base.selectOneOfThese",description:"Shown when the user is asked to select on of the related articles of a search"},{name:"knowledge-base.somethingWentWrong",description:"Shown when an unrecoverable error occurs"},{name:"knowledge-base.noMoreArticles",description:"Shown when user ask to more results but there aren't"}],{Contents:te,Categories:ne}=r.VY,{NodeRedNode:ae,SlugHelp:le,TypeCommand:re,ChatbotStatus:oe}=r.AK;(0,l.plug)("sidebar",null,{id:"knowledgebase",label:"Knowledge Base",url:"/knowledge-base",icon:"file-text",permission:"faq.edit",options:[{label:"Articles",url:"/knowledge-base",id:"faqs"},{label:"Categories",url:"/knowledge-base/categories",id:"faqs-categories"}]}),(0,l.plug)("sidebar",null,{id:"knowledgebase",label:"Knowledge Base",url:"/knowledge-base",icon:"file-text",permission:["faq.configure","configure"],options:[{label:"Configuration",url:"/knowledge-base/configure",id:"faqs-configure"}]}),(0,l.plug)("pages",ne,{url:"/knowledge-base/categories",title:"Categories",id:"faq-categories",permission:"faq.edit",namespace:"faq",breadcrumbs:[{title:"Knowledge Base",url:"/knowledge-base"},"Categories"]}),(0,l.plug)("pages",(0,r.ln)("knowledge-base",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,h]=(0,a.useState)(e),[f,y]=(0,a.useState)(null),[b,E]=(0,a.useState)("openings"),v=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(m.Z,{appearance:"tabs",activeKey:b,onSelect:E,style:{marginBottom:"25px"}},a.createElement(m.Z.Item,{eventKey:"openings"},"Knowledge Base"),a.createElement(m.Z.Item,{eventKey:"translations"},"Translations")),a.createElement(o.Z,{disabled:!0,formValue:l,formError:f,ref:v,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{h(e),y(null)},onCheck:e=>{y(e)}},"translations"===b&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(d.Z,{name:"translations",accepter:r.Xy,schema:ee,disabled:n}))),"openings"===b&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(s.Z,null,"Answer by Default"),a.createElement(d.Z,{name:"answerByDefault",accepter:c.Z,disabled:n}),a.createElement(u.Z,null,"With this option ",a.createElement("em",null,"enabled"),", the block execute a search for every input of the user, if ",a.createElement("em",null,"disabled")," the user has to enter in the ",a.createElement("em",null,"ask question state")," entering some sentences like ",a.createElement("em",null,'"I need help"'))),a.createElement(i.Z,null,a.createElement(s.Z,null,"Articles Sensitivity"),a.createElement(d.Z,{disabled:n,name:"threshold",accepter:r.nH}),a.createElement(u.Z,null,"The minimum score of an article to be considered relevant. Lower this value if the search doesn't return any value.")),a.createElement(i.Z,null,a.createElement(s.Z,null,"NLP Sensitivity"),a.createElement(d.Z,{disabled:n,name:"nlpThreshold",accepter:r.nH}),a.createElement(u.Z,null,"The minimum score of an intent to be considered relevant. Lower this value if the NLP doesn't catch any intent of the user input, raise this value if the NLP of this block is interfering with the NLP of other blocks.")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Suggest Articles"),a.createElement(d.Z,{disabled:n,name:"articlesToSuggest",accepter:r.zs,min:1,max:20,style:{maxWidth:"200px"},postfix:a.createElement("span",null," articles")}),a.createElement(u.Z,null,'The maximum articles to suggest if user clicks on "More articles"'))),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{v.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&h(e)}},"Reset")))))}),{Legend:()=>{const{sendMessage:e}=(0,Y.f)();return a.createElement("div",null,a.createElement(ae,null,"Knowledge Base"),a.createElement("p",null,"Configure the ",a.createElement("b",null,"Knowledge Base")," block, use the ",a.createElement("b",null,"Articles")," section to enter the knowledge base of your product or service.",a.createElement("br",null),"For articles that represent the same content but in different languages, use the same ",a.createElement("em",null,"slug"),", the block will take care of the rest."),a.createElement("p",null,"Adjust the sensitivity of the search engine, raise it when the results are not relevant to the user's question, lower it when the search is not returning anything, keep an eye on the system console to see the score of the searches.",a.createElement("br",null),"With ",a.createElement("b",null,"Answer by Default")," the block can answer automatically to any input text message or can start answering only when the chatbot in ",a.createElement(oe,null,"faq.answer")," status, which is entered when the user types senteces like ",a.createElement(re,null,"I need help"),"."),a.createElement(le,null),a.createElement("div",{style:{textAlign:"center",marginTop:"10px"}},a.createElement(g.Z,{appearance:"primary",onClick:()=>{e("faq.refresh"),X.Z.success({title:"Knowledge Base",description:"Re-index of articles started"})}},"Refresh index")))},title:"Knowledge Base"}),{url:"/knowledge-base/configure",title:"Configure",id:"faqs-configure",permission:["faq.configure","configure"]}),(0,l.plug)("pages",te,{url:"/knowledge-base",title:"Knowledge Base",id:"faqs",namespace:"faq",permission:"faq.edit",breadcrumbs:["Knowledge Base","Articles"],labels:{saveContent:"Save article",createContent:"Create article"}}),(0,l.plug)("permissions",null,{permission:"faq.edit",name:"Edit Kwnowledge base",description:"Add and edit articles of the knowledge base",group:"Knowledge Base"}),(0,l.plug)("permissions",null,{permission:"faq.configure",name:"Configure Kwnowledge base",description:"Configure Kwnowledge base",group:"Knowledge Base"});var ie=n(18499),se=n(95990),ce=n(61009),ue=n(78932);const me=se.default`
query {
  contents(namespace: "plugins") {
    id,
    title,
    body,
    payload,
    fields {
      name,
      value
    }
  }
}
`,de=()=>{const e=(0,ie.xJ)(),{data:t}=(0,ue.Z)({namespace:"market-place"}),[n,l]=(0,a.useState)(null),{put:r}=(0,ce.default)("https://api.jsonbin.io",{headers:{"Content-Type":"application/json","secret-key":null!=t?t.jsonbin_key:null,versioning:"false"}}),o=null!=t&&!C().isEmpty(t.jsonbin_key);return a.createElement(g.Z,{disabled:null!=n||!o,appearance:"primary",onClick:async()=>{l("Loading...");const n=(await e.query({query:me,fetchPolicy:"network-only"})).data.contents.map((e=>{const t=e.fields.reduce(((e,t)=>({...e,[t.name]:t.value})),{});let n=null;return C().isEmpty(t.content_title)&&C().isEmpty(t.content_slug)&&C().isEmpty(t.content_body)||(n={title:t.content_title,slug:t.content_slug,body:t.content_body,namespace:t.content_namespace}),{id:t.id,name:e.title,description:e.body,url:t.url,flow:t.flow,version:t.version,github:t.github,keywords:t.tags,author:{name:t.author,url:t.author_url},content:n,initialConfiguration:null==e.payload||C().isEmpty(e.payload.initial_configuration)?null:e.payload.initial_configuration}}));l("Publishing..."),await r(`/b/${t.jsonbin_id}`,n),l(null),X.Z.success({title:"Published",description:"Plugin list published succesfully "})}},null!=n?n:"Publish plugins")};(0,l.plug)("sidebar",null,{id:"market-place",label:"Market Place",url:"/market-place",icon:"shopping-basket"}),(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"configuration-market-place",label:"Market Place",url:"/configuration-market-place"}]}),(0,l.plug)("pages",(0,r.ln)("market-place",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,r]=(0,a.useState)(e),[c,m]=(0,a.useState)(null),h=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(o.Z,{formValue:l,formError:c,ref:h,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{r(e),m(null)},onCheck:e=>{m(e)}},a.createElement(i.Z,null,a.createElement(s.Z,null,"JSONbin.io id"),a.createElement(d.Z,{name:"jsonbin_id",accepter:H.Z,disabled:n}),a.createElement(u.Z,null,"The ",a.createElement("em",null,"id")," of the ",a.createElement("strong",null,"jsonbin.io")," snippet of the plugins meta info")),a.createElement(i.Z,null,a.createElement(s.Z,null,"JSONbin.io key"),a.createElement(d.Z,{name:"jsonbin_key",accepter:H.Z,disabled:n}),a.createElement(u.Z,null,"The ",a.createElement("em",null,"secret key")," to write on ",a.createElement("strong",null,"jsonbin.io"))),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{h.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&r(e)}},"Reset")))))}),{Legend:()=>a.createElement("div",null,"Configure the id and the key to access ",a.createElement("strong",null,"jsonbing.io")," for the plugins met information.",a.createElement("br",null),"Docs about the API ",a.createElement("a",{href:"https://jsonbin.io/api-reference/bins/read",target:"blank"},"here"),"."),title:"Market Place"}),{permission:"configure",url:"/configuration-market-place",title:"Market Place",id:"configuration"}),(0,l.plug)("pages",r.VY.Contents,{url:"/market-place",title:"Market Place",id:"market-place",namespace:"plugins",breadcrumbs:["Market Place","Plugins"],labels:{saveContent:"Save plugin",createContent:"Create plugin",emptyContent:"No plugins"},custom:()=>a.createElement(de,null),customFieldsSchema:[{key:"url",type:"string",description:"URL of the compiled plugin",color:"cyan"},{key:"flow",type:"string",description:"URL of the Node-RED flow for this plugin",color:"cyan"},{key:"id",type:"string",description:"Unique id of the plugin",color:"red"},{key:"version",type:"string",description:"The version of the current (latest) plugin",color:"red"},{key:"github",type:"string",description:"The URL of the github page of the plugin",color:"red"},{key:"author",type:"string",description:"The username of the author of the plugin",color:"orange"},{key:"author_url",type:"string",description:"The home page of the username, if any",color:"orange"},{key:"tags",type:"tags",description:"List of keywords, comma separated",color:"red"},{key:"content_title",type:"string",description:"Create a content with this title",color:"violet"},{key:"content_slug",type:"string",description:"Create a content with this slug",color:"violet"},{key:"content_body",type:"string",description:"Create a content with this body",color:"violet"},{key:"content_namespace",type:"string",description:"Create a content with this namespace",color:"violet"}]}),(0,l.plug)("content-tabs",(({formValue:e={},onChange:t=(()=>{})})=>{const{initial_configuration:n}=e||{};return a.createElement("div",{style:{paddingBottom:"15px"}},a.createElement(r.Ad,{value:C().isEmpty(n)?"":n,height:"55vh",onChange:n=>{t({...e,initial_configuration:C().isEmpty(n)?null:n})}}))}),{id:"content-configuration",label:"Configuration",namespace:["plugins"]});var pe=n(91624);n(83751);const ge=e=>"location"===e?"#5E8263":e?"#D36135":e?"#595D88":"#000000";n(26926);const he=()=>a.createElement(pe.Z,{className:"map-marker",icon:"map-marker",size:"2x",style:{color:"red"}});var fe=n(73727),ye=n(87596),be=n(82122),Ee=n(69873),ve=n(40660),we=n(94184),Ze=n.n(we);function ke(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class xe extends a.Component{render(){const{thumb:e,height:t,width:n,maxWidth:l,maxHeight:r}=this.props,o=t/n;let i=Math.floor(o*l);i>r&&(i=r);const s={backgroundImage:`url(${e})`,backgroundPosition:"center",width:`${l}px`,height:`${i}px`};return a.createElement("div",{style:s})}}ke(xe,"propTypes",{thumb:O().string,height:O().number,width:O().number,maxWidth:O().number,maxHeight:O().number,onClick:O().func}),ke(xe,"defaultProps",{thumb:null,height:null,width:null,maxWidth:200,maxHeight:400,onClick:()=>{}});const Ce=xe;function Se(){return Se=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},Se.apply(this,arguments)}const qe=({topic:e,ts:t,content:n,onDelete:l,onZoom:r,thumb:o,image:i,width:s,height:c,maxHeight:u,...m})=>{let d;return C().isEmpty(o)||(d=a.createElement(Ce,{thumb:o,topic:e,width:s,height:c,maxHeight:u,onClick:()=>{console.log("clicked"),r({})}})),a.createElement(Ee.Z,Se({title:e},m,{onMouseLeave:()=>{}}),a.createElement("div",{className:"popover-map-marker"},"vario"))};function Ie(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}qe.propTypes={topic:O().string,thumb:O().string,image:O().string,content:O().string,ts:O().instanceOf(Date),onDelete:O().func,width:O().number,height:O().number},qe.defaultProps={topic:null,thumb:null,image:null,content:null,ts:null,onDelete:()=>{},width:null,height:null};class Te extends a.Component{constructor(e){super(e),this.handleLoaded=this.handleLoaded.bind(this),this.handleClick=this.handleClick.bind(this);const{thumb:t}=e;this.state={needPreload:!C().isEmpty(t),preload:!1,width:null,height:null}}componentDidMount(){const{type:e,color:t}=this.props;null!=this.tooltip&&"tooltip"===e&&(this.tooltip.querySelector(".rs-tooltip-inner").style.backgroundColor=t,this.tooltip.querySelector(".rs-tooltip-arrow").style.backgroundColor=t)}handleLoaded(e){this.setState({preload:!1,width:e.target.width,height:e.target.height},(()=>this.trigger.show()))}handleClick(e){e.preventDefault(),e.stopPropagation();const{thumb:t}=this.props;C().isEmpty(t)?this.trigger.show():this.setState({preload:!0})}render(){const{children:e,point:t,text:n,type:l,popover:r,showPopover:o,thumb:i,image:s,inkColor:c,maxHeight:u,onDeletePoint:m,onShowImage:d}=this.props;let{icon:p,color:g,size:h}=this.props;const{height:f,width:y,preload:b,needPreload:E}=this.state;let v;switch(C().isEmpty(p)&&(p="map-marker"),C().isEmpty(h)&&(h="lg"),C().isEmpty(g)&&(g="#FF3300"),C().isEmpty(c)&&(g="#000000"),new Date(parseInt(t.ts,10)),l){case"icon":v=a.createElement("a",{href:"#",className:Ze()("wrapper-map-marker",{preload:b}),onClick:this.handleClick},b&&a.createElement("img",{src:i,style:{display:"none"},onLoad:this.handleLoaded,alt:""}),a.createElement(pe.Z,{className:Ze()("map-marker",{pointer:o}),icon:p,size:h,style:{color:g}}));break;case"tooltip":v=a.createElement("div",{ref:e=>this.tooltip=e,style:{height:20,backgroundColor:"#ff0000"}},a.createElement(be.Z,{visible:!0},a.createElement("span",{style:{color:c}},n)));break;default:v=null}if(o){if(E&&b)return v;const t=a.createElement(Ee.Z,{onMouseLeave:()=>{}},a.createElement("div",{className:"popover-map-marker"},e));return a.createElement(ve.Z,{trigger:"click",placement:"top",speaker:t,triggerRef:e=>this.trigger=e},v)}return v}}Ie(Te,"propTypes",{point:O().shape({topic:O().string,text:O().string,ts:O().string}).isRequired,icon:O().string,size:O().string,color:O().string,text:O().string,popover:O().string,thumb:O().string,image:O().string,showPopover:O().bool,type:O().oneOf(["icon","tooltip"]),inkColor:O().string,maxHeight:O().number}),Ie(Te,"defaultProps",{icon:"map-marker",color:"#FF3300",text:null,size:"2x",popover:null,thumb:null,image:null,type:"icon",showPopover:!1,inkColor:"#ffffff",maxHeight:480});const Ne=Te,Pe=se.default`
query($where: JSON) {
  records(limit: 50, order: "geohash", where: $where) {
    id,
    status,
    title,
    latitude,
    longitude,
    geohash,
    payload
  }
}`,{NodeRedNode:_e,SlugHelp:Re,TypeCommand:Oe}=r.AK;(0,l.plug)("sidebar",null,{id:"wiggle",label:"Panopticon",icon:"logo-survey",permission:"wiggle.view",options:[{id:"wiggle-secrets",label:"Secrets",url:"/secrets"},{id:"wiggle-secrets-map",label:"Secrets Map",url:"/secrets-map"}]}),(0,l.plug)("pages",(()=>{const[e,t]=(0,a.useState)(null),[n,l]=(0,a.useState)(!1),o=(0,ie.xJ)();let i=(e||[]).filter((e=>null!=e.latitude&&null!=e.longitude)).map((e=>a.createElement(Ne,{key:e.id,lat:e.latitude,lng:e.longitude,point:{},popover:e.title,showPopover:!0},a.createElement("div",{style:{minHeight:"120px"}},a.createElement("strong",null,e.title),null!=e.payload.secret_url&&a.createElement("div",{style:{backgroundImage:`url(${e.payload.secret_url})`,backgroundPosition:"center",minWidth:"120px",backgroundRepeat:"no-repeat",backgroundSize:"contain",height:"120px"}}),null!=e.payload.secret&&a.createElement("div",null,e.payload.secret),a.createElement(fe.rU,{to:`/record/${e.id}`},"view")))));return a.createElement(r._z,{className:"my-page"},a.createElement(r.Oo,{pages:["Secret locations"]}),a.createElement("div",{style:{width:"100%",height:"450px",position:"relative"}},n&&a.createElement("div",{style:{position:"absolute",top:"20px",left:"20px",zIndex:1e7}},a.createElement(ye.Z,{size:"md"})),a.createElement(r.oe,{defaultCenter:{lat:45.4854739,lng:9.2022176},defaultZoom:11,height:450,onChange:async({bounds:e})=>{const{se:n,nw:a}=e;l(!0);const{data:{records:r}}=await o.query({query:Pe,variables:{where:{latitude:{gte:n.lat,lte:a.lat},longitude:{gte:a.lng,lte:n.lng}}},fetchPolicy:"network-only"});t(r),l(!1)}},i)))}),{url:"/secrets-map",title:"Secrets Map",id:"secrets-maps",permission:"wiggle.view",breadcrumbs:["Secrets Map"]}),(0,l.plug)("pages",r.Op,{url:"/secrets",title:"Secrets",id:"secrets",type:"secret",permission:"wiggle.view",breadcrumbs:["Secrets"],labels:{title:"Name",record:"secret"},columns:[{id:"secret-type",label:"Type",width:120,cell:({payload:e})=>a.createElement(r.vx,{color:ge(e.secret_type)},e.secret_type)}]}),(0,l.plug)("permissions",null,{permission:"wiggle.view",name:"View Panopticon secret",description:"View secrets stored in Panopticon Bot",group:"Panopticon"}),(0,l.plug)("user-record-types",null,{type:"secret",name:"Secret",list:"Secrets",description:"List of Panopticon secrets",form:({record:e})=>{const{payload:t}=e,n=new Date(t.secret_duration),l=new Date,o=n.getTime()-l.getTime();return a.createElement("div",{className:"secret-viewer"},a.createElement(U.Z,{justify:"space-between",style:{marginTop:"30px"}},a.createElement(U.Z.Item,{colspan:7},a.createElement("div",null,a.createElement("b",null,"Secret is")," ",a.createElement(r.vx,{color:ge(t.secret_type)},t.secret_type)),("time"===t.secret_type||"location+time"===t.secret_type)&&a.createElement("div",null,a.createElement("b",null,"Revealed when"),a.createElement("br",null),a.createElement("em",null,n.toLocaleDateString(),", ",n.toLocaleTimeString()),o>0&&a.createElement("div",{className:"secret-reveal-at"},Math.round(o/1e3/60)," minutes"),o<0&&a.createElement("div",null,"Secret date is due")),null!=t.secret_bounty&&a.createElement(a.Fragment,null,a.createElement("b",null,"ICE price:")," ",t.secret_bounty," EUR",a.createElement("br",null)),null!=t.secret_payment&&a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("b",null,"User paid to reveal the secret"),a.createElement("br",null),a.createElement("b",null,"Email: ")," ",t.secret_payment.order_info.email,a.createElement("br",null),a.createElement("b",null,"Currency: ")," ",t.secret_payment.currency,a.createElement("br",null),a.createElement("b",null,"Amount: ")," ",(t.secret_payment.total_amount/100).toFixed(2),a.createElement("br",null),a.createElement("b",null,"Payment ID: ")," ",t.secret_payment.provider_payment_charge_id,a.createElement("br",null))),a.createElement(U.Z.Item,{colspan:7},null!=t.secret_url&&a.createElement("div",null,a.createElement("b",null,"Secret image"),a.createElement("img",{src:t.secret_url,width:"100%"})),null!=t.secret&&a.createElement("div",null,a.createElement("b",null,"Secret text"),a.createElement("div",{className:"display-secret"},t.secret))),a.createElement(U.Z.Item,{colspan:7},null!=e.latitude&&a.createElement("div",{className:"ui-devices-map",style:{height:"300px"}},a.createElement(r.oe,{defaultCenter:{lat:e.latitude,lng:e.longitude},defaultZoom:11},a.createElement(he,null))),null==e.latitude&&a.createElement("div",null,a.createElement("em",null,"No location for this secret")))))},status:[{value:"private",label:"Private"},{value:"public",label:"Public"},{value:"crazy",label:"Crazy"},{value:"keyholder-free",label:"Keyholder free"},{value:"keyholder-taken",label:"Keyholder taken"}]}),(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"panopticon",label:"Panopticon",url:"/configuration-panopticon"}]}),(0,l.plug)("pages",(0,r.ln)("panopticon",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,c]=(0,a.useState)(e),[m,h]=(0,a.useState)(null),f=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(o.Z,{disabled:!0,formValue:l,formError:m,ref:f,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{c(e),h(null)},onCheck:e=>{h(e)}},a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(s.Z,null,"Content"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"content",accepter:r.MN}),a.createElement(u.Z,null,"Select a ",a.createElement("em",null,"slug")," for a multi-language content to show additional information when a user requests information about opening hours")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Sensitivity"),a.createElement(d.Z,{disabled:n,name:"threshold",accepter:r.nH}),a.createElement(u.Z,null,"The minimum score of an intent to be considered relevant. Lower this value if the NLP doesn't catch any intent of the user input, raise this value if the NLP of this block is interfering with the NLP of other blocks."))),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{f.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&c(e)}},"Reset")))))}),{Legend:()=>a.createElement("div",null,a.createElement("p",null,"Configure some ",a.createElement("i",null,"Panopticon")," parameters")),title:"Panopticon"}),{permission:"configure",url:"/configuration-panopticon",title:"Configure Panopticon",id:"configuration-panopticon"});const{NodeRedNode:Ae,SlugHelp:ze,TypeCommand:je}=r.AK;(0,l.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"postcard-bot",label:"PostcardBot",url:"/configuration-postcard-bot"}]}),(0,l.plug)("pages",(0,r.ln)("postcardbot",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,r]=(0,a.useState)(e),[c,m]=(0,a.useState)(null),[h,f]=(0,a.useState)("openings"),y=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(o.Z,{disabled:!0,formValue:l,formError:c,ref:y,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{r(e),m(null)},onCheck:e=>{m(e)}},a.createElement(i.Z,null,a.createElement(s.Z,null,"ClickSend username"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"clicksendUser",accepter:H.Z}),a.createElement(u.Z,null,"Username for ClickSend API")),a.createElement(i.Z,null,a.createElement(s.Z,null,"ClickSend API Key"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"clicksendApiKey",accepter:H.Z}),a.createElement(u.Z,null,"Secret API key for ClickSend API")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Cloudinary Username"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"cloudinaryUsername",accepter:H.Z}),a.createElement(u.Z,null,"Cloudinary username, where the images are uploaded")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Cloudinary API Key"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"cloudinaryApiKey",accepter:H.Z})),a.createElement(i.Z,null,a.createElement(s.Z,null,"Cloudinary Secret"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"cloudinarySecret",accepter:H.Z})),a.createElement(i.Z,null,a.createElement(s.Z,null,"PDF Path (production)"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"pdfPathProduction",accepter:H.Z}),a.createElement(u.Z,null,"Path to store generated PDF in production")),a.createElement(i.Z,null,a.createElement(s.Z,null,"PDF Path (development)"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"pdfPathDevelopment",accepter:H.Z}),a.createElement(u.Z,null,"Path to store generated PDF in development")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Image Path (production)"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"imagePathProduction",accepter:H.Z}),a.createElement(u.Z,null,"Path to store uploaded images in production")),a.createElement(i.Z,null,a.createElement(s.Z,null,"Image Path (development)"),a.createElement(d.Z,{useSlug:!0,readOnly:n,name:"imagePathDevelopment",accepter:H.Z}),a.createElement(u.Z,null,"Path to store uploaded images in development")),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{y.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&r(e)}},"Reset")))))}),{Legend:()=>a.createElement("div",null,a.createElement(Ae,null,"Opening Hours node"),a.createElement("p",null,"Configure the behaviour of this node: customize the opening hours and and some additional content (for example to show extra openings, etc)."),a.createElement(ze,null)),title:"PostcardBot"}),{permission:"configure",url:"/configuration-postcard-bot",title:"PostcardBot",id:"configuration-postcard-bot"}),(0,l.plug)("sidebar",null,{id:"postcardbot",label:"PostcardBot",icon:"logo-survey",options:[{id:"postcard-invoices",label:"Invoices",url:"/invoices"}]}),(0,l.plug)("pages",r.Op,{url:"/invoices",title:"Invoices",id:"invoices",type:"invoice",breadcrumbs:["Invoices"],labels:{title:"Name",record:"invoice"},columns:[]}),(0,l.plug)("user-record-types",null,{type:"invoice",name:"Invoice",list:"Invoices",description:"List of PostcardBot invoices",form:()=>a.createElement("div",null,"ok"),status:[{value:"new",label:"New"},{value:"problem",label:"Problem"}]});var Me=n(13067);const Be=e=>C().isEmpty(e.first_name)&&C().isEmpty(e.last_name)?C().isEmpty(username)?"Anonymous (id: {id})":e.username:[e.first_name,e.last_name].filter((e=>!C().isEmpty(e))).join(" "),Fe=({value:e,validation:t,onChange:n=(()=>{}),onSubmit:l=(()=>{})})=>{const{state:{activeChatbots:c}}=(0,Me.Z)();return a.createElement("div",null,a.createElement(o.Z,{fluid:!0,formValue:e,onChange:n,formError:t},a.createElement(U.Z,{justify:"space-between"},a.createElement(U.Z.Item,{colspan:15},a.createElement(i.Z,null,a.createElement(s.Z,null,"Recipient"),a.createElement(d.Z,{name:"recipient",accepter:r.P2,cleanable:!0,onChange:t=>{if(null!=t&&_.isArray(t.chatIds)&&!_.isEmpty(t.chatIds)){const a=t.chatIds.find((e=>((e,t)=>e.some((e=>e.transport===t)))(c,e.transport)));null!=a&&n({...e,chatId:a.chatId,userId:t.userId,recipient:t,transport:a.transport,botNode:c.find((e=>e.transport===a.transport)).nodeId})}}}))),a.createElement(U.Z.Item,{colspan:8},a.createElement(i.Z,null,a.createElement(s.Z,null,"Transport",a.createElement(u.Z,{tooltip:!0},"Shows only platforms for which the selected users has a valid ",a.createElement("em",null,"chatId"))),a.createElement(d.Z,{name:"botNode",accepter:r.Tl,transports:null!=e.recipient?e.recipient.chatIds.map((e=>e.transport)):null,disabled:null==e.recipient,onChange:t=>{const a=c.find((e=>e.nodeId===t));if(null!=a&&null!=e.recipient){const l=e.recipient.chatIds.find((e=>e.transport===a.transport));null!=l&&n({...e,chatId:l.chatId,botNode:t})}},block:!0})))),a.createElement(i.Z,{style:{marginTop:"15px"}},a.createElement(s.Z,null,"Message to send"),a.createElement(d.Z,{name:"message",componentClass:"textarea",style:{height:"150px",resize:"none"},onKeyUp:e=>{e.shiftKey&&13===e.keyCode&&l()}}))))},{useModal:Ke}=r.u_,Le=e=>null!=e.recipient&&null!=e.chatId&&null!=e.botNode&&!C().isEmpty(e.message),{StringType:De,ObjectType:Ve}=S.Z.Types,Ue=(S.Z.Model({recipient:Ve().isRequired("Select recipient"),botNode:De().isRequired("Select chatbot platoform"),message:De().isRequired("Enter message for the user")}),({user:e,appearance:t="ghost",transport:n})=>{const{sendMessage:l}=(0,r.fI)(),{state:{activeChatbots:o}}=(0,Me.Z)(),{open:i,close:s,validate:c,error:u,disable:m,openWithModel:d,openWith:p}=Ke({view:Fe,title:"Send message",labelSubmit:"Send message",size:"sm"});let h,f;if(!C().isEmpty(n)&&e.chatIds.some((e=>e.transport===n))){const t=o.find((e=>e.transport===n));console.log("chatBot",t,o,n),null!=t&&(h=t.nodeId,f=e.chatIds.find((e=>e.transport===n)).chatId)}return a.createElement(g.Z,{appearance:t,onClick:async()=>{let t={recipient:e,botNode:h,chatId:f,message:""};t=await p(t,Le),t&&(l("message.send",t),X.Z.success({title:"Message sent",description:`Message sent successfully to "${Be(t.recipient)}"`}))}},"Contact User")});n(56959);const{WidgetForm:He,Content:We,Footer:$e}=r.DD;(0,l.plug)("widgets",(({stats:e})=>{const[t,n]=(0,a.useState)({message:""}),l=!_.isEmpty(t.chatId)&&!_.isEmpty(t.botNode),{sendMessage:o}=(0,Y.f)();return a.createElement(r.s_,{title:"Send Message",className:"widget-send-message"},a.createElement(He,{fluid:!0,formValue:t,onChange:e=>n(e)},a.createElement(We,null,a.createElement(Fe,{value:t,onChange:e=>n(e),onSubmit:()=>{o("message.send",t),n({...t,message:""})}})),a.createElement($e,null,a.createElement(i.Z,null,a.createElement(p.Z,null,a.createElement(g.Z,{appearance:"primary",disabled:!l,onClick:()=>{o("message.send",t),n({...t,message:""})}},"Send Message"),a.createElement("div",{className:"key-hint"},"Shift + Enter to Send"),a.createElement(g.Z,{style:{float:"right"},appearance:"default",onClick:()=>n({botNode:null,recipient:null,chatId:null,message:""})},"Cancel"))))))}),{x:0,y:0,w:2,h:6,isResizable:!1,id:1}),(0,l.plug)("user-button",Ue),(0,l.plug)("user-record-buttons",(({record:e})=>a.createElement(Ue,{transport:e.transport,appearance:"primary",user:e.user})),{type:"survey"});var Je=n(25280),Qe=n(21712);function Ge(){return Ge=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},Ge.apply(this,arguments)}var Xe=n(61151);var Ye=n(14617),et=n(4664),tt=(n(44923),n(52908)),nt=n(50580),at=n(62863),lt=n(55670),rt=n(71262),ot=n(23447);const it=({params:e,onCancel:t=(()=>{}),onSubmit:n=(()=>{}),disabled:l=!1,activeChatbots:r})=>{const[c,u]=(0,a.useState)(e);return a.createElement(at.Z,{backdrop:!0,show:!0,onHide:t,keyboard:!1,className:"modal-simulator"},a.createElement(at.Z.Header,null,a.createElement(at.Z.Title,null,"Simulator Configuration")),a.createElement(at.Z.Body,null,a.createElement(o.Z,{formValue:c,onChange:e=>{const t={...e};null==e.user||null!=c.user&&c.user.id===e.user.id||!e.user.language||(t.language=e.user.language),u(t)},fluid:!0},a.createElement(i.Z,null,a.createElement(s.Z,null,"Impersonated User"),a.createElement(d.Z,{accepter:rt.Z,name:"user",placeholder:"Test User",style:{width:"100%"}})),a.createElement(U.Z,{justify:"space-between",style:{marginBottom:"20px"}},a.createElement(U.Z.Item,{colspan:11},a.createElement(i.Z,null,a.createElement(s.Z,null,"Language"),a.createElement(d.Z,{accepter:lt.Z,name:"language",block:!0}))),a.createElement(U.Z.Item,{colspan:11},a.createElement(i.Z,null,a.createElement(s.Z,null,"Transport"),a.createElement(d.Z,{accepter:ot.Z,name:"nodeId",block:!0,size:"sm",cleanable:!1})))))),a.createElement(at.Z.Footer,null,a.createElement(g.Z,{onClick:t,appearance:"subtle"},"Cancel"),a.createElement(g.Z,{appearance:"primary",disabled:l,appearance:"primary",onClick:()=>n({...c,chatBot:r.find((e=>e.nodeId===c.nodeId))})},"Save configuration")))};it.propTypes={params:O().shape({language:O().string,user:O().shape({id:O().number,userId:O().string,username:O().string,language:O().string}),nodeId:O().string}),disabled:O().bool,onCancel:O().func,onSubmit:O().func,activeChatbots:O().arrayOf(O().shape({transport:O().string,nodeId:O().string,name:O().string}))};const st=it,ct=({user:e,language:t,nodeId:n,activeChatbots:l,dispatch:r})=>{const[o,i]=(0,a.useState)(null);return a.createElement("div",{className:"simulator-transport-menu cancel-drag"},null!=o&&a.createElement(st,{activeChatbots:l,params:o,onCancel:()=>i(null),onSubmit:e=>{r({type:"params",params:e}),i(null)}}),a.createElement("div",{className:"meta"},null!=e&&a.createElement("div",{className:"user"},e.username," ",a.createElement("em",null,"(",e.userId,")")),null==e&&a.createElement("div",{className:"user"},"Test User"),a.createElement(nt.Z,null,t)),a.createElement(tt.Z,{appearance:"subtle",icon:a.createElement(pe.Z,{icon:"cog"}),onClick:()=>i({user:e,language:t,nodeId:n}),style:{marginTop:"-3px",marginRight:"1px"}}))};ct.propTypes={user:O().shape({id:O().number,userId:O().string,username:O().string,language:O().string}),language:O().string,nodeId:O().string,dispatch:O().func,activeChatbots:O().arrayOf(O().shape({transport:O().string,nodeId:O().string,name:O().string}))};const ut=ct;var mt=n(30381),dt=n.n(mt);const pt=a.createContext();var gt;(0,l.plug)("widgets",(0,Xe.Z)((gt=({activeChatbots:e,user:t})=>{const{state:{simulator:n},dispatch:l,sendMessage:r}=(({activeChatbots:e})=>{const{state:t,dispatch:n}=(e=>{const{state:t,dispatch:n}=(0,a.useContext)(Qe.Z),l=Object.keys(e);return(0,a.useEffect)((()=>{l.forEach((a=>{void 0===t[a]&&n({type:"default",key:a,value:e[a]})}))}),[]),{state:l.reduce(((n,a)=>(n[a]=void 0!==t[a]?t[a]:e[a],n)),{}),dispatch:n}})({simulator:{messages:{},transport:C().isEmpty(e)?null:e[0].transport,nodeId:C().isEmpty(e)?null:e[0].nodeId,globals:null,language:"en",user:null}}),{sendMessage:l}=(0,Y.f)({onReceive:(e,t)=>{"simulator"===e&&n({type:"message",payload:t,topic:e})}});return{state:t,dispatch:n,sendMessage:(e,{echo:n=!0}={})=>{const{transport:a,nodeId:r,language:o,user:i}=t.simulator;l("simulator",{transport:a,nodeId:r,language:o,userId:null!=i?i.userId:42,username:null!=i?i.username:"testUser",firstName:null!=i?i.first_name:null,lastName:null!=i?i.last_name:null,payload:{content:e,type:"message"},simulatorOptions:{echo:n}})}}})({activeChatbots:e}),{messages:o,transport:i,nodeId:s,language:c,user:u}=n,m=null==e,d=e=>{!C().isObject(e)||"postback"!==e.type&&"quick-reply"!==e.type||r(e.value,{echo:!1})};return a.createElement(Je.Z,{title:"Chat Simulator",className:"chat-simulator",menu:!m&&a.createElement(ut,{user:u,language:c,nodeId:s,transport:i,dispatch:l,activeChatbots:e,onChange:e=>l({type:"chatBot",chatBot:e})})},!m&&a.createElement(pt.Provider,{value:n},a.createElement(Ye.zL,null,a.createElement(Ye.Vm,null,null!=o[i]&&o[i].map((e=>C().isArray(e)?a.createElement(et.Z,{onClick:d,key:e.map((e=>e.messageId)).join(),message:e.map((e=>({...e,username:"chatbot"})))}):a.createElement(et.Z,{onClick:d,key:e.messageId,message:e.inbound?e:{...e,username:"chatbot"}})))),a.createElement(Ye.M9,{onSend:e=>r(e),onClear:()=>l({type:"clear",transport:i})}))))},e=>a.createElement(Qe.Z.Consumer,null,(({activeChatbots:t})=>a.createElement(gt,Ge({},e,{activeChatbots:t}),e.children)))),"user"),{x:0,y:0,w:2,h:8,isResizable:!0,id:"simulator-widget",permission:"simulator"}),(0,l.plug)("reducers",((e,t)=>"default"===t.type?{...e,[t.key]:t.value}:e)),(0,l.plug)("reducers",((e,t)=>{switch(t.type){case"message":const{payload:n,topic:a}=t;if("simulator"!==a)return e;const l=C().isArray(e.simulator.messages[n.transport])?e.simulator.messages[n.transport]:[];let r;r=C().isArray(n.payload)?n.payload.map((e=>({...n,...e,payload:void 0,ts:dt()()}))):{...n,ts:dt()()};const o={...e.messages,[n.transport]:[...l,r]};return{...e,simulator:{...e.simulator,messages:o}};case"clear":return{...e,simulator:{...e.simulator,messages:{...e.messages,[t.transport]:[]}}};case"globals":return{...e,simulator:{...e.simulator,globals:t.globals}};case"params":const{params:i}=t;return{...e,simulator:{...e.simulator,transport:i.chatBot.transport,nodeId:i.chatBot.nodeId,language:i.language,user:i.user}};default:return e}})),(0,l.plug)("permissions",null,{permission:"simulator",name:"Chat Simulator",description:"Access to chat simulator",group:"General"});var ht=n(30306);n(67383);const ft=({question:e})=>{switch(e.type){case"text":case"number":return a.createElement("div",{className:Ze()("answer",{[e.type]:!0})},e.answer);case"multiple":return a.createElement("div",{className:"answer multiple"},e.data.map(((t,n)=>a.createElement("div",{className:Ze()("choice",{selected:t.answer===e.answer||t.value===e.answer})},a.createElement("span",{className:"placeholder"},"ABCDEFGHILMNOPQRTSUVZ"[n])," ",t.answer))))}};ft.propTypes={question:O().shape({type:O().oneOf(["text","number","multiple","image"]),answer:O().string,data:O().oneOfType([O().string,O().shape({answer:O().string,value:O().string})])})};const yt=({record:e})=>{const{payload:t}=e;return a.createElement("div",{className:"survey-viewer"},t.map((e=>a.createElement("div",{key:e.id,className:"question"},a.createElement("h5",null,e.title),a.createElement(ft,{question:e})))))};yt.propTypes={record:O().shape({question:O().shape({type:O().oneOf(["text","number","multiple","image"]),answer:O().string,data:O().oneOfType([O().string,O().shape({answer:O().string,value:O().string})])})})};const bt=yt;var Et=n(74491);n(16573),n(37353);const vt=({icon:e,text:t,tooltip:n,color:l})=>{const r=a.createElement("div",{className:Ze()("ui-badge-icon-tooltip",{[l]:!0})},a.createElement(pe.Z,{icon:e}),null!=t&&a.createElement("span",{className:"text"},t));return null!=n?a.createElement(ve.Z,{trigger:"hover",placement:"top",speaker:a.createElement(be.Z,null,n)},r):r};vt.propTypes={color:O().oneOf(["red","orange"]),text:O().oneOfType([O().string,O().number]),icon:O().string,tooltip:O().string};const wt=vt;var Zt=n(11450);const kt=(e,t)=>e.find((e=>e.id===t.id)),xt=(e,t)=>null!=t.parent?e.find((e=>e.id===t.parent)):null,Ct=(e,t)=>e.some((e=>e.parent===t.id)),St=e=>{const t={};return e.forEach((n=>{if(null!=n.parent&&null==t[n.parent]){const a=e.find((e=>e.id===n.parent));null!=a.parent?t[n.parent]=t[a.parent]+1:t[n.parent]=1}})),t},qt=e=>{const t=St(e),n={root:0},a=t=>{if(null==t)return"";const l=null!=t.parent?e.find((e=>e.id===t.parent)):null;return`${null!=l?a(l):""}${n[null!=l?l.id:"root"]}.`},l=t=>{const l=null!=t.parent?e.find((e=>e.id===t.parent)):null;let r;return null!=l?null!=n[l.id]?(n[l.id]+=1,r=n[l.id]):(n[l.id]=1,r=1):(n.root+=1,r=n.root),`Q${a(l)}${r}`};return e.map((e=>({...e,tag:l(e),level:C().isEmpty(e.parent)?0:t[e.parent]})))},It=a.createContext({});n(14589);const Tt=({children:e,size:t="small"})=>a.createElement("div",{className:Ze()("question-tag",{[t]:!0})},e),Nt=(0,Et.JV)((()=>a.createElement("div",{className:"grippy"}))),Pt=({question:e,onSelect:t=(()=>{}),active:n=!1,level:l=null})=>{const{questions:r}=(0,a.useContext)(It),o=(_.isArray(e.data)?e.data:[]).filter((e=>null!=e.jump)).map((e=>{const t=r.find((t=>t.id===e.jump));if(null!=t)return a.createElement(wt,{key:t.tag,icon:"code-fork",text:t.tag,color:"orange",tooltip:`Jump to ${t.tag} if user selects "${e.answer}"`})}));let i;if(null!=e.parent&&((e,t)=>{const n=e.findIndex((e=>e.id===t.id));return-1!==n&&0!==n&&t.parent===e[n-1].id})(r,e)){const t=_(r).chain().filter((e=>"multiple"===e.type)).map((e=>_.isArray(e.data)?e.data:[])).flatten().some((t=>t.jump===e.id)).value();t||(i=a.createElement(wt,{icon:"exclamation-triangle",key:"jump-warning",color:"red",tooltip:"No conditional jump to this question.\n        This is a nested question and can only be reached in the survey with a conditional answer in a multiple choice question"}))}return a.createElement("div",{className:Ze()("ui-survey-question",{active:n})},null!=l&&a.createElement("div",{className:"indent",style:{flex:`0 0 ${8*l}px`}}),a.createElement(Nt,null),a.createElement("div",{className:"content",onClick:n=>{n.preventDefault(),t(e)}},a.createElement("div",{className:"meta"},a.createElement(Tt,null,e.tag),a.createElement("div",{className:"icons"},o,i,"multiple"===e.type&&a.createElement(wt,{icon:"list",text:e.data.length,tooltip:"Multiple choice question"}),"text"===e.type&&a.createElement(wt,{icon:"font",tooltip:"Free text question"}),"number"===e.type&&a.createElement(wt,{icon:"percent",tooltip:"Numeric question"}),"image"===e.type&&a.createElement(wt,{icon:"image",tooltip:"Image   question"}))),a.createElement("div",{className:"title"},e.title)),a.createElement("div",{className:"selection-bar"}))};Pt.propTypes={question:O().shape({id:O().string.isRequired,level:O().number,tag:O().string,title:O().string.isRequired,type:O().oneOf(["multiple","string","number","image"]).isRequired,data:O().oneOfType([O().arrayOf(O().shape({answer:O().string.isRequired,id:O().string.isRequired,jump:O().string,value:O().string}))])}),onSelect:O().func,active:O().bool,level:O().number};const _t=(0,Et.gU)(Pt);var Rt=n(76543),Ot=n(20450),At=n(90616),zt=n(73935);let jt=null;function Mt({okButtonText:e="Ok",onOk:t,showCancelButton:n=!0,cancelButtonText:l="Cancel",onCancel:r,children:o}){const[i,s]=(0,a.useState)(!0),c=(0,a.useCallback)((()=>{s(!1),t&&t()}),[t]),u=(0,a.useCallback)((()=>{s(!1),r&&r()}),[r]);return a.createElement(at.Z,{size:"sm",show:i},a.createElement(at.Z.Body,null,o),a.createElement(at.Z.Footer,null,n&&a.createElement(g.Z,{onClick:u},l),a.createElement(g.Z,{onClick:c,appearance:"primary"},e)))}const Bt=(e,t,{okLabel:n="Ok",cancelLabel:l="Cancel"}={})=>{let r={...t};return new Promise((t=>{zt.render(a.createElement(Mt,{okButtonText:n,cancelButtonText:l,key:Date.now(),onOk:()=>t(r),onCancel:()=>t(null)},a.createElement(e,{formValue:r,onChange:e=>r=e})),(jt||(jt=document.createElement("div"),document.body.appendChild(jt)),jt))}))};n(63934);var Ft=n(94973);const Kt=({formValue:e,questions:t,onChange:n=(()=>{}),exclude:l})=>a.createElement("div",null,a.createElement(o.Z,{formDefaultValue:e,onChange:n,fluid:!0},a.createElement(i.Z,null,a.createElement(s.Z,null,"Jump To Question"),a.createElement(d.Z,{name:"jump",accepter:Ft.Z,block:!0,data:t.filter((e=>null==l||e.id!==l)).map((e=>({value:e.id,label:e.title,...e}))),renderMenuItem:(e,t)=>a.createElement("div",null,a.createElement(Tt,null,t.tag)," ",t.title),renderValue:(e,t)=>a.createElement("div",null,a.createElement(Tt,null,t.tag)," ",t.title),onClean:()=>n({...e,jump:null})}),a.createElement(u.Z,null,"Select the question to jump to if the user select this the answer ",a.createElement("em",null,'"',e.answer,'"'))))),Lt=a.createContext({});function Dt(){return Dt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},Dt.apply(this,arguments)}const Vt=({formValue:e,onChange:t=(()=>{})})=>a.createElement("div",null,a.createElement(o.Z,{formDefaultValue:e,onChange:e=>{C().isEmpty(e.value)&&(e.value=null),t(e)},fluid:!0},a.createElement(i.Z,null,a.createElement(s.Z,null,"Store value for the answer"),a.createElement(d.Z,{name:"value",accepter:H.Z}),a.createElement(u.Z,null,"Select the value for the answer ",a.createElement("em",null,'"',e.answer,'"')," (which is what the user will see), select tha real value that will be stored (generally a more concise string)"))));Vt.propTypes={formDefaultValue:O().shape({value:O().string}),onChange:O().func};const Ut=({value:e,onChange:t,order:n})=>{const{questions:l}=(0,a.useContext)(It),{question:r}=(0,a.useContext)(Lt);return a.createElement("div",{className:"ui-survey-editor-multiple-answer"},a.createElement("div",{className:"placeholder"},"ABCDEFGHILMNOPQRTSUVZ"[n]),a.createElement("div",{className:"answer"},a.createElement(H.Z,{value:e.answer,onChange:n=>t({...e,answer:n})})),a.createElement("div",{className:"controls"},a.createElement(tt.Z,{appearance:null!=e.value?"primary":"default",icon:a.createElement(pe.Z,{icon:"align-justify",size:"lg"}),onClick:async()=>{const n=await Bt(Vt,e);null!=n&&t({...e,value:n.value})}})," ",a.createElement(tt.Z,{appearance:null!=e.jump?"primary":"default",icon:a.createElement(pe.Z,{icon:"arrow-circle-right",size:"lg"}),onClick:async()=>{const n=await Bt((e=>a.createElement(Kt,Dt({},e,{exclude:r.id,questions:l}))),e);null!=n&&t({...e,jump:n.jump})}})))};Ut.propTypes={value:O().shape({answer:O().string.isRequired,id:O().string.isRequired,jump:O().string,value:O().string}),onChange:O().func,order:O().number};const Ht=({data:e,onChange:t=(()=>{})})=>a.createElement("div",{className:"control control-multiple"},a.createElement(Z.Z,{value:e,form:Ut,onChange:t,labelAdd:"Add answer",labelEmpty:"No answers"}));Ht.propTypes={onChange:O().func,data:O().oneOfType([O().arrayOf(O().shape({answer:O().string.isRequired,id:O().string.isRequired,jump:O().string,value:O().string}))])};const Wt=Ht;n(10873);const $t=[{type:"multiple",label:"Multiple Choice",default:[]},{type:"text",label:"Free Text",default:null},{type:"number",label:"Number",default:null},{type:"image",label:"Upload image",default:null}],Jt=({question:e,onChange:t=(()=>{}),onRemove:n=(()=>{}),onAdd:l=(()=>{})})=>{let r;return r="multiple"===e.type?a.createElement(Wt,{data:e.data,onChange:n=>t({...e,data:n})}):a.createElement("div",{className:"control control-empty"},"No configuration available for this type of question"),a.createElement(Lt.Provider,{value:{question:e}},a.createElement("div",{className:"question-detail"},a.createElement("div",{className:"header"},a.createElement(Tt,{size:"large"},e.tag),a.createElement("div",{className:"buttons"},a.createElement(p.Z,null,a.createElement(Rt.Z,{renderTitle:()=>a.createElement(tt.Z,{appearance:"primary",icon:a.createElement(pe.Z,{icon:"plus"})})},a.createElement(Rt.Z.Item,{onSelect:()=>l({after:e})},"Add question after"),a.createElement(Rt.Z.Item,{onSelect:()=>l({before:e})},"Add question before"),a.createElement(Rt.Z.Item,{onSelect:()=>l({nested:e})},"Add nested question")),a.createElement(tt.Z,{onClick:async()=>{await(0,At.Z)(a.createElement("div",null,"Remove the question ",a.createElement(Tt,null,e.tag),_.isEmpty(e.title)?null:a.createElement("em",null,' "',e.title,'"')," ?"),{okLabel:"Yes, remove"})&&n(e)},icon:a.createElement(pe.Z,{icon:"trash2"})})))),a.createElement("div",{className:"title"},a.createElement("textarea",{className:"rs-input",rows:3,value:e.title,onChange:n=>t({...e,title:n.target.value})})),a.createElement(p.Z,null,a.createElement(Ot.Z,null,$t.map((n=>a.createElement(g.Z,{key:n.type,appearance:e.type===n.type?"primary":"ghost",onClick:()=>t({...e,type:n.type,data:n.default})},n.label))))),a.createElement("div",{className:"configuration"},r)))};Jt.propTypes={question:O().shape({id:O().string.isRequired,level:O().number,tag:O().string,title:O().string.isRequired,type:O().oneOf(["multiple","string","number","image"]).isRequired,data:O().oneOfType([O().arrayOf(O().shape({answer:O().string.isRequired,id:O().string.isRequired,jump:O().string,value:O().string}))])}),onChange:O().func,onAdd:O().func,onRemove:O().func};const Qt=Jt,Gt=(0,Et.hv)((({children:e})=>a.createElement("div",{className:"questions"},e))),Xt=({value:e=[{}],onChange:t=(()=>{})})=>{const[n,l]=(0,a.useState)();(0,a.useEffect)((()=>{null==n&&l(C().isEmpty(e)?null:e[0].id)}),[e]);const r=(0,a.useCallback)((({oldIndex:n,newIndex:a})=>{const l=((e,t,n)=>{if(t===n)return e;const a=[...e],l=n,r=t,o=l<0?a.length+l:l,i=a.splice(r,1)[0];a.splice(o,0,i);const s=a[n],c=n>0?a[n-1]:null,u=Ct(e,s),m=xt(e,s);return null!=c&&Ct(e,c)?a[n].parent=c.id:a[n].parent=null,u&&e.forEach((e=>{e.parent===s.id&&(e.parent=null!=m?m.id:null)})),a})(e,n,a);t(qt(l))})),o=e.find((e=>e.id===n)),i=St(e);return a.createElement(It.Provider,{value:{questions:e}},a.createElement("div",{className:"ui-survey-editor"},a.createElement(Gt,{onSortEnd:r,helperClass:"sorting",useDragHandle:!0},e.map(((e,t)=>a.createElement(_t,{key:e.id,index:t,question:e,level:null!=e.parent?i[e.parent]:null,active:n===e.id,onSelect:e=>l(e.id)})))),a.createElement("div",{className:"question-detail"},null!=o&&a.createElement(Qt,{key:o.id,question:o,onChange:a=>t(((e,t,n)=>{const a=[...e];return a[e.findIndex((e=>e.id===t))]=n,a})(e,n,a)),onRemove:n=>{l(null),t(qt(((e,t)=>{const n=xt(e,t);return e.filter((e=>e.id!==t.id)).map((e=>e.parent==t.id?null!=n?{...e,parent:n.id}:C().omit(e,"parent"):e))})(e,n)))},onAdd:n=>{const{questions:a,question:r}=((e,t)=>{const n={id:(0,Zt.Z)("q_"),title:"",type:"multiple",data:[]};let a;if(null!=t.after){const l=kt(e,t.after);Ct(e,l)?n.parent=l.id:n.parent=l.parent,a=C().flatten(e.map((e=>e.id===l.id?[l,n]:e)))}else if(null!=t.before){const l=kt(e,t.before);n.parent=l.parent,a=C().flatten(e.map((e=>e.id===l.id?[n,l]:e)))}else if(null!=t.nested){const l=kt(e,t.nested);n.parent=l.id,a=C().flatten(e.map((e=>e.id===l.id?[l,n]:e)))}return{question:n,questions:qt(a)}})(e,n);l(r.id),t(a)}}))))};Xt.propTypes={onChange:O().func,disabled:O().bool,value:O().arrayOf(O().shape({id:O().string.isRequired,level:O().number,tag:O().string,title:O().string.isRequired,type:O().oneOf(["multiple","string","number","image"]).isRequired,data:O().oneOfType([O().arrayOf(O().shape({answer:O().string.isRequired,id:O().string.isRequired,jump:O().string,value:O().string}))])}))};const Yt=Xt,en=[{name:"survey.intro",description:"Text shown at the beginning of the survey if no content is provided"},{name:"survey.end1",description:"End of the survey (version 1)"},{name:"survey.end2",description:"End of the survey (version 2)"},{name:"survey.end3",description:"End of the survey (version 3)"},{name:"survey.wrongAnswer",description:"When the user input a wrong answer, for example an answer which is not listed in the multiple choice,\n      a string where is expected a number, etc  "},{name:"survey.error",description:"Shown when unrecoverable error happened in the survey flow"}];(0,l.plug)("sidebar",null,{id:"surveys",label:"Surveys",icon:"logo-survey",permission:"surveys.view",options:[{id:"answer-surveys",label:"Surveys",url:"/surveys"},{id:"configuration-survey",label:"Configure survey",url:"/configuration-surveys"}]}),(0,l.plug)("pages",(0,w.Z)("survey",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[l,r]=(0,a.useState)(e),[c,h]=(0,a.useState)(null),[f,y]=(0,a.useState)("questions"),b=(0,a.useRef)(null);return a.createElement("div",null,a.createElement(m.Z,{appearance:"tabs",activeKey:f,onSelect:y,style:{marginBottom:"25px"}},a.createElement(m.Z.Item,{eventKey:"surveys"},"Survey"),a.createElement(m.Z.Item,{eventKey:"questions"},"Questions"),a.createElement(m.Z.Item,{eventKey:"translations"},"Translations")),a.createElement(o.Z,{disabled:!0,formValue:l,formError:c,ref:b,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{r(e),h(null)},onCheck:e=>{h(e)}},"translations"===f&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(d.Z,{name:"translations",accepter:k.Z,schema:en,disabled:n}))),"surveys"===f&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(s.Z,null,"Name"),a.createElement(d.Z,{name:"name",autocomplete:"off",accepter:H.Z,disabled:n})),a.createElement(i.Z,null,a.createElement(s.Z,null,"Introduction Message",a.createElement(u.Z,{tooltip:!0},"Select the content to show when the user starts the survey")),a.createElement(d.Z,{name:"introduction",accepter:A.Z,useSlug:!0,disabled:n}))),"questions"===f&&a.createElement(a.Fragment,null,a.createElement(i.Z,null,a.createElement(d.Z,{name:"questions",accepter:Yt,disabled:n}))),a.createElement(i.Z,{style:{marginTop:"40px"}},a.createElement(p.Z,null,a.createElement(g.Z,{disabled:n,appearance:"primary",onClick:()=>{b.current.check()&&t(l)}},"Save configuration"),a.createElement(g.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&r(e)}},"Reset")))))}),{Legend:()=>a.createElement("div",null,"Survues TBD"),title:"Surveys"}),{permission:"configure",url:"/configuration-surveys",title:"Survey",id:"configuration-surveys"}),(0,l.plug)("pages",ht.O,{url:"/surveys",title:"Surveys",id:"surveys",type:"survey",permission:"surveys.view",breadcrumbs:["Surveys"],labels:{}}),(0,l.plug)("permissions",null,{permission:"surveys.view",name:"View surveys",description:"View surveys answered by chatbot users",group:"Surveys"}),(0,l.plug)("user-record-types",null,{type:"survey",name:"Survey",list:"Surveys",description:"Answer to surveys",form:bt,status:[{value:"new",label:"New"},{value:"viewed",label:"Viewed"}]}),(0,l.plug)("user-button",(({user:e})=>a.createElement(fe.rU,{to:`/surveys?userId=${e.userId}`},a.createElement(g.Z,{appearance:"ghost"},"View Surveys"))))},9092:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".secret-viewer .display-secret{padding:4px 10px;font-family:monospace;background-color:#eeeeee;border:1px solid #bbbbbb}.secret-viewer .secret-reveal-at{font-size:40px;font-weight:bolder}\n",""]),e.exports=t},8434:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".widget-send-message .rs-form-group{flex:1 0;display:flex;flex-direction:column;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:stretch}.widget-send-message .rs-form-group .rs-form-control-wrapper{flex:1 0}.widget-send-message .key-hint{color:#999999;display:inline-block}\n",""]),e.exports=t},64055:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".simulator-transport-menu .rs-picker-subtle .rs-btn:focus,.simulator-transport-menu .rs-picker-subtle .rs-picker-toggle:focus,.simulator-transport-menu .rs-picker-subtle .rs-btn.rs-btn-focus,.simulator-transport-menu .rs-picker-subtle .rs-picker-toggle.rs-btn-focus,.simulator-transport-menu .rs-picker-subtle .rs-btn:hover,.simulator-transport-menu .rs-picker-subtle .rs-picker-toggle:hover{background-color:#ffffff}.simulator-transport-menu .rs-picker-toggle{margin-top:-5px}.chat-simulator .meta{display:inline-block;margin-right:5px}.chat-simulator .meta .user{display:inline-block;margin-right:5px;font-size:14px;font-weight:normal}.chat-simulator .ui-grid-panel-content{margin:-5px -10px -10px -10px}.chat-simulator .ui-chat-window{border-bottom-left-radius:4px;border-bottom-right-radius:4px}.picker-item-transport em{font-weight:normal;color:#777777;font-size:12px}.picker-item-transport b{color:#333333;font-size:13px}\n",""]),e.exports=t},32385:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".survey-viewer{padding:20px}.survey-viewer .question{margin-top:15px}.survey-viewer .question:first-child{margin-top:0px}.survey-viewer .answer.multiple .placeholder{font-weight:bold}.survey-viewer .answer.multiple .choice.selected{font-weight:bold;color:#FF3C2B}\n",""]),e.exports=t},31258:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".ui-badge-icon-tooltip{display:inline-block;background-color:#C9C9C9;padding:0px 5px;border-radius:2px;line-height:17px;margin-top:3px;margin-right:3px;height:18px}.ui-badge-icon-tooltip i{font-size:11px}.ui-badge-icon-tooltip .text{display:inline;margin-left:3px;font-size:12px}.ui-badge-icon-tooltip.orange{background-color:#FFB049;color:#000000}.ui-badge-icon-tooltip.red{background-color:#DB2323;color:#ffffff}\n",""]),e.exports=t},43872:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".ui-survey-editor{margin-top:10px;display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:stretch}.ui-survey-editor .questions{order:0;flex:0 0 250px;align-self:auto;border:1px solid #dddddd}.rs-list-item{padding-top:0px;padding-bottom:0px}.ui-survey-question{display:block;height:80px;border-bottom:1px solid #eeeeee;background-color:#ffffff;display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:center}.ui-survey-question .icons{display:inline-block;float:right}.ui-survey-question .grippy{content:'....';width:14px;overflow:hidden;height:80px;display:inline-block;overflow:hidden;line-height:5px;padding:3px 4px;cursor:move;vertical-align:middle;margin-top:-.7em;margin-right:.3em;font-size:12px;font-family:sans-serif;letter-spacing:2px;color:#cccccc;text-shadow:1px 0 1px #cccccc}.ui-survey-question .grippy::after{content:'.. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..'}.ui-survey-question .grippy{flex:0 0 14px;height:75px}.ui-survey-question .indent{flex:0 0 4px;height:80px;background-color:#efefef}.ui-survey-question .content{flex:1 0;height:80px}.ui-survey-question .title{font-size:13px;color:#444444;display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;overflow:hidden;line-height:17px}.ui-survey-question .description{color:#999999;font-size:12px}.ui-survey-question:hover{text-decoration:none;background-color:#eeeeee}.ui-survey-question .selection-bar{width:4px;height:80px}.ui-survey-question.active .selection-bar{background-color:orange}.ui-survey-question.sorting{-webkit-box-shadow:0px 0px 5px 0px rgba(0,0,0,0.75);-moz-box-shadow:0px 0px 5px 0px rgba(0,0,0,0.75);box-shadow:0px 0px 5px 0px rgba(0,0,0,0.75)}\n",""]),e.exports=t},25730:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".ui-survey-editor .question-detail{order:0;flex:1 0 auto;align-self:auto;padding-left:10px}.ui-survey-editor .question-detail .title{margin-top:15px}.ui-survey-editor .question-detail .rs-btn-toolbar{margin-top:15px}.ui-survey-editor .question-detail .buttons{float:right}.ui-survey-editor .question-detail .buttons .rs-btn-toolbar{margin-top:0px}.ui-survey-editor .question-detail .configuration{margin-top:25px}\n",""]),e.exports=t},46202:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".question-tag{display:inline-block;background-color:#333333;color:white;font-size:12px;border-radius:2px;padding:1px 3px;line-height:12px}.question-tag.large{font-weight:bold;border-radius:3px;height:35px;line-height:35px;vertical-align:middle;padding:0px 6px;font-size:22px}\n",""]),e.exports=t},2477:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".ui-survey-editor-multiple-answer{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:flex-start;align-content:center;align-items:center}.ui-survey-editor-multiple-answer .placeholder{flex:0 0 36px;border-radius:6px;display:inline-block;background-color:#F4FDCE;border:1px solid #BCE747;width:36px;height:36px;text-align:center;vertical-align:middle;line-height:36px;font-weight:bold;margin-right:10px}.ui-survey-editor-multiple-answer .answer{flex:1 0}.ui-survey-editor-multiple-answer .controls{flex:0 0 auto;text-align:left;margin-left:5px}\n",""]),e.exports=t},26926:(e,t,n)=>{var a=n(93379),l=n(9092);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},56959:(e,t,n)=>{var a=n(93379),l=n(8434);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},44923:(e,t,n)=>{var a=n(93379),l=n(64055);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},67383:(e,t,n)=>{var a=n(93379),l=n(32385);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},37353:(e,t,n)=>{var a=n(93379),l=n(31258);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},16573:(e,t,n)=>{var a=n(93379),l=n(43872);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},10873:(e,t,n)=>{var a=n(93379),l=n(25730);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},14589:(e,t,n)=>{var a=n(93379),l=n(46202);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}},63934:(e,t,n)=>{var a=n(93379),l=n(2477);"string"==typeof(l=l.__esModule?l.default:l)&&(l=[[e.id,l,""]]);a(l,{insert:"head",singleton:!1}),e.exports=l.locals||{}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,