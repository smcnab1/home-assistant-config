(self.webpackChunknode_red_contrib_chatbot=self.webpackChunknode_red_contrib_chatbot||[]).push([[460],{63460:(e,t,l)=>{"use strict";l.r(t);var r=l(67294),n=l(18985),a=l(78971),i=l(85631),o=l(16790);l(83751);const s=e=>"location"===e?"#5E8263":e?"#D36135":e?"#595D88":"#000000";l(54641);const c=()=>r.createElement(i.Z,{className:"map-marker",icon:"map-marker",size:"2x",style:{color:"red"}});var m=l(95990),u=l(73727),p=l(18499),d=l(87596),h=l(82122),g=l(69873),b=l(40660),y=l(45697),E=l.n(y),v=l(96486),w=l.n(v),f=l(94184),k=l.n(f);function x(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}class _ extends r.Component{render(){const{thumb:e,height:t,width:l,maxWidth:n,maxHeight:a}=this.props,i=t/l;let o=Math.floor(i*n);o>a&&(o=a);const s={backgroundImage:`url(${e})`,backgroundPosition:"center",width:`${n}px`,height:`${o}px`};return r.createElement("div",{style:s})}}x(_,"propTypes",{thumb:E().string,height:E().number,width:E().number,maxWidth:E().number,maxHeight:E().number,onClick:E().func}),x(_,"defaultProps",{thumb:null,height:null,width:null,maxWidth:200,maxHeight:400,onClick:()=>{}});const P=_;function C(){return C=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var l=arguments[t];for(var r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r])}return e},C.apply(this,arguments)}const S=({topic:e,ts:t,content:l,onDelete:n,onZoom:a,thumb:i,image:o,width:s,height:c,maxHeight:m,...u})=>{let p;return w().isEmpty(i)||(p=r.createElement(P,{thumb:i,topic:e,width:s,height:c,maxHeight:m,onClick:()=>{console.log("clicked"),a({})}})),r.createElement(g.Z,C({title:e},u,{onMouseLeave:()=>{}}),r.createElement("div",{className:"popover-map-marker"},"vario"))};function D(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}S.propTypes={topic:E().string,thumb:E().string,image:E().string,content:E().string,ts:E().instanceOf(Date),onDelete:E().func,width:E().number,height:E().number},S.defaultProps={topic:null,thumb:null,image:null,content:null,ts:null,onDelete:()=>{},width:null,height:null};class Z extends r.Component{constructor(e){super(e),this.handleLoaded=this.handleLoaded.bind(this),this.handleClick=this.handleClick.bind(this);const{thumb:t}=e;this.state={needPreload:!w().isEmpty(t),preload:!1,width:null,height:null}}componentDidMount(){const{type:e,color:t}=this.props;null!=this.tooltip&&"tooltip"===e&&(this.tooltip.querySelector(".rs-tooltip-inner").style.backgroundColor=t,this.tooltip.querySelector(".rs-tooltip-arrow").style.backgroundColor=t)}handleLoaded(e){this.setState({preload:!1,width:e.target.width,height:e.target.height},(()=>this.trigger.show()))}handleClick(e){e.preventDefault(),e.stopPropagation();const{thumb:t}=this.props;w().isEmpty(t)?this.trigger.show():this.setState({preload:!0})}render(){const{children:e,point:t,text:l,type:n,popover:a,showPopover:o,thumb:s,image:c,inkColor:m,maxHeight:u,onDeletePoint:p,onShowImage:d}=this.props;let{icon:y,color:E,size:v}=this.props;const{height:f,width:x,preload:_,needPreload:P}=this.state;let C;switch(w().isEmpty(y)&&(y="map-marker"),w().isEmpty(v)&&(v="lg"),w().isEmpty(E)&&(E="#FF3300"),w().isEmpty(m)&&(E="#000000"),new Date(parseInt(t.ts,10)),n){case"icon":C=r.createElement("a",{href:"#",className:k()("wrapper-map-marker",{preload:_}),onClick:this.handleClick},_&&r.createElement("img",{src:s,style:{display:"none"},onLoad:this.handleLoaded,alt:""}),r.createElement(i.Z,{className:k()("map-marker",{pointer:o}),icon:y,size:v,style:{color:E}}));break;case"tooltip":C=r.createElement("div",{ref:e=>this.tooltip=e,style:{height:20,backgroundColor:"#ff0000"}},r.createElement(h.Z,{visible:!0},r.createElement("span",{style:{color:m}},l)));break;default:C=null}if(o){if(P&&_)return C;const t=r.createElement(g.Z,{onMouseLeave:()=>{}},r.createElement("div",{className:"popover-map-marker"},e));return r.createElement(b.Z,{trigger:"click",placement:"top",speaker:t,triggerRef:e=>this.trigger=e},C)}return C}}D(Z,"propTypes",{point:E().shape({topic:E().string,text:E().string,ts:E().string}).isRequired,icon:E().string,size:E().string,color:E().string,text:E().string,popover:E().string,thumb:E().string,image:E().string,showPopover:E().bool,type:E().oneOf(["icon","tooltip"]),inkColor:E().string,maxHeight:E().number}),D(Z,"defaultProps",{icon:"map-marker",color:"#FF3300",text:null,size:"2x",popover:null,thumb:null,image:null,type:"icon",showPopover:!1,inkColor:"#ffffff",maxHeight:480});const N=Z,z=m.default`
query($where: JSON) {
  records(limit: 50, order: "geohash", where: $where) {
    id,
    status,
    title,
    latitude,
    longitude,
    geohash,
    payload
  }
}`;(0,n.plug)("sidebar",null,{id:"wiggle",label:"Panopticon",icon:"logo-survey",permission:"wiggle.view",options:[{id:"wiggle-secrets",label:"Secrets",url:"/secrets"},{id:"wiggle-secrets-map",label:"Secrets Map",url:"/secrets-map"}]}),(0,n.plug)("pages",(()=>{const[e,t]=(0,r.useState)(null),[l,n]=(0,r.useState)(!1),i=(0,p.xJ)();let o=(e||[]).filter((e=>null!=e.latitude&&null!=e.longitude)).map((e=>r.createElement(N,{key:e.id,lat:e.latitude,lng:e.longitude,point:{},popover:e.title,showPopover:!0},r.createElement("div",{style:{minHeight:"120px"}},r.createElement("strong",null,e.title),null!=e.payload.secret_url&&r.createElement("div",{style:{backgroundImage:`url(${e.payload.secret_url})`,backgroundPosition:"center",minWidth:"120px",backgroundRepeat:"no-repeat",backgroundSize:"contain",height:"120px"}}),null!=e.payload.secret&&r.createElement("div",null,e.payload.secret),r.createElement(u.rU,{to:`/record/${e.id}`},"view")))));return r.createElement(a._z,{className:"my-page"},r.createElement(a.Oo,{pages:["Secret locations"]}),r.createElement("div",{style:{width:"100%",height:"450px",position:"relative"}},l&&r.createElement("div",{style:{position:"absolute",top:"20px",left:"20px",zIndex:1e7}},r.createElement(d.Z,{size:"md"})),r.createElement(a.oe,{defaultCenter:{lat:45.4854739,lng:9.2022176},defaultZoom:11,height:450,onChange:async({bounds:e})=>{const{se:l,nw:r}=e;n(!0);const{data:{records:a}}=await i.query({query:z,variables:{where:{latitude:{gte:l.lat,lte:r.lat},longitude:{gte:r.lng,lte:l.lng}}},fetchPolicy:"network-only"});t(a),n(!1)}},o)))}),{url:"/secrets-map",title:"Secrets Map",id:"secrets-maps",permission:"wiggle.view",breadcrumbs:["Secrets Map"]}),(0,n.plug)("pages",a.Op,{url:"/secrets",title:"Secrets",id:"secrets",type:"secret",permission:"wiggle.view",breadcrumbs:["Secrets"],labels:{title:"Name",record:"secret"},columns:[{id:"secret-type",label:"Type",width:120,cell:({payload:e})=>r.createElement(a.vx,{color:s(e.secret_type)},e.secret_type)}]}),(0,n.plug)("permissions",null,{permission:"wiggle.view",name:"View Panopticon secret",description:"View secrets stored in Panopticon Bot",group:"Panopticon"}),(0,n.plug)("user-record-types",null,{type:"secret",name:"Secret",list:"Secrets",description:"List of Panopticon secrets",form:({record:e})=>{const{payload:t}=e,l=new Date(t.secret_duration),n=new Date,i=l.getTime()-n.getTime();return r.createElement("div",{className:"secret-viewer"},r.createElement(o.Z,{justify:"space-between",style:{marginTop:"30px"}},r.createElement(o.Z.Item,{colspan:7},r.createElement("div",null,r.createElement("b",null,"Secret is")," ",r.createElement(a.vx,{color:s(t.secret_type)},t.secret_type)),("time"===t.secret_type||"location+time"===t.secret_type)&&r.createElement("div",null,r.createElement("b",null,"Revealed when"),r.createElement("br",null),r.createElement("em",null,l.toLocaleDateString(),", ",l.toLocaleTimeString()),i>0&&r.createElement("div",{className:"secret-reveal-at"},Math.round(i/1e3/60)," minutes"),i<0&&r.createElement("div",null,"Secret date is due")),null!=t.secret_bounty&&r.createElement(r.Fragment,null,r.createElement("b",null,"ICE price:")," ",t.secret_bounty," EUR",r.createElement("br",null)),null!=t.secret_payment&&r.createElement(r.Fragment,null,r.createElement("br",null),r.createElement("b",null,"User paid to reveal the secret"),r.createElement("br",null),r.createElement("b",null,"Email: ")," ",t.secret_payment.order_info.email,r.createElement("br",null),r.createElement("b",null,"Currency: ")," ",t.secret_payment.currency,r.createElement("br",null),r.createElement("b",null,"Amount: ")," ",(t.secret_payment.total_amount/100).toFixed(2),r.createElement("br",null),r.createElement("b",null,"Payment ID: ")," ",t.secret_payment.provider_payment_charge_id,r.createElement("br",null))),r.createElement(o.Z.Item,{colspan:7},null!=t.secret_url&&r.createElement("div",null,r.createElement("b",null,"Secret image"),r.createElement("img",{src:t.secret_url,width:"100%"})),null!=t.secret&&r.createElement("div",null,r.createElement("b",null,"Secret text"),r.createElement("div",{className:"display-secret"},t.secret))),r.createElement(o.Z.Item,{colspan:7},null!=e.latitude&&r.createElement("div",{className:"ui-devices-map",style:{height:"300px"}},r.createElement(a.oe,{defaultCenter:{lat:e.latitude,lng:e.longitude},defaultZoom:11},r.createElement(c,null))),null==e.latitude&&r.createElement("div",null,r.createElement("em",null,"No location for this secret")))))},status:[{value:"private",label:"Private"},{value:"public",label:"Public"},{value:"crazy",label:"Crazy"},{value:"keyholder-free",label:"Keyholder free"},{value:"keyholder-taken",label:"Keyholder taken"}]})},4021:(e,t,l)=>{(t=l(23645)(!1)).push([e.id,".secret-viewer .display-secret{padding:4px 10px;font-family:monospace;background-color:#eeeeee;border:1px solid #bbbbbb}.secret-viewer .secret-reveal-at{font-size:40px;font-weight:bolder}\n",""]),e.exports=t},54641:(e,t,l)=>{var r=l(93379),n=l(4021);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.id,n,""]]);r(n,{insert:"head",singleton:!1}),e.exports=n.locals||{}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,