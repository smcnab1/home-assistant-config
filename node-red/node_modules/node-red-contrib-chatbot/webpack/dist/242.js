(self.webpackChunknode_red_contrib_chatbot=self.webpackChunknode_red_contrib_chatbot||[]).push([[242],{2242:(e,t,n)=>{"use strict";n.r(t);var l=n(67294),r=n(18985),a=n(15450),i=n(89061),o=n(77188),s=n(18499),c=n(95990),u=n(14469),p=n(96486),m=n.n(p),d=n(78932);const g=c.default`
query {
  contents(namespace: "plugins") {
    id,
    title,
    body,
    payload,
    fields {
      name,
      value
    }
  }
}
`,h=()=>{const e=(0,s.xJ)(),{data:t}=(0,d.Z)({namespace:"market-place"}),[n,r]=(0,l.useState)(null),{put:a}=(0,u.default)("https://api.jsonbin.io",{headers:{"Content-Type":"application/json","secret-key":null!=t?t.jsonbin_key:null,versioning:"false"}}),c=null!=t&&!m().isEmpty(t.jsonbin_key);return l.createElement(i.Z,{disabled:null!=n||!c,appearance:"primary",onClick:async()=>{r("Loading...");const n=(await e.query({query:g,fetchPolicy:"network-only"})).data.contents.map((e=>{const t=e.fields.reduce(((e,t)=>({...e,[t.name]:t.value})),{});let n=null;return m().isEmpty(t.content_title)&&m().isEmpty(t.content_slug)&&m().isEmpty(t.content_body)||(n={title:t.content_title,slug:t.content_slug,body:t.content_body,namespace:t.content_namespace}),{id:t.id,name:e.title,description:e.body,url:t.url,flow:t.flow,version:t.version,github:t.github,keywords:t.tags,author:{name:t.author,url:t.author_url},content:n,initialConfiguration:null==e.payload||m().isEmpty(e.payload.initial_configuration)?null:e.payload.initial_configuration}}));r("Publishing..."),await a(`/b/${t.jsonbin_id}`,n),r(null),o.Z.success({title:"Published",description:"Plugin list published succesfully "})}},null!=n?n:"Publish plugins")};var y=n(46111),b=n(80091),f=n(71777),E=n(63792),v=n(85951),k=n(77560),w=n(66352);(0,r.plug)("sidebar",null,{id:"market-place",label:"Market Place",url:"/market-place",icon:"shopping-basket"}),(0,r.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"configuration-market-place",label:"Market Place",url:"/configuration-market-place"}]}),(0,r.plug)("pages",(0,a.ln)("market-place",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[r,a]=(0,l.useState)(e),[o,s]=(0,l.useState)(null),c=(0,l.useRef)(null);return l.createElement("div",null,l.createElement(y.Z,{formValue:r,formError:o,ref:c,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{a(e),s(null)},onCheck:e=>{s(e)}},l.createElement(b.Z,null,l.createElement(f.Z,null,"JSONbin.io id"),l.createElement(E.Z,{name:"jsonbin_id",accepter:v.Z,disabled:n}),l.createElement(k.Z,null,"The ",l.createElement("em",null,"id")," of the ",l.createElement("strong",null,"jsonbin.io")," snippet of the plugins meta info")),l.createElement(b.Z,null,l.createElement(f.Z,null,"JSONbin.io key"),l.createElement(E.Z,{name:"jsonbin_key",accepter:v.Z,disabled:n}),l.createElement(k.Z,null,"The ",l.createElement("em",null,"secret key")," to write on ",l.createElement("strong",null,"jsonbin.io"))),l.createElement(b.Z,{style:{marginTop:"40px"}},l.createElement(w.Z,null,l.createElement(i.Z,{disabled:n,appearance:"primary",onClick:()=>{c.current.check()&&t(r)}},"Save configuration"),l.createElement(i.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&a(e)}},"Reset")))))}),{Legend:()=>l.createElement("div",null,"Configure the id and the key to access ",l.createElement("strong",null,"jsonbing.io")," for the plugins met information.",l.createElement("br",null),"Docs about the API ",l.createElement("a",{href:"https://jsonbin.io/api-reference/bins/read",target:"blank"},"here"),"."),title:"Market Place"}),{permission:"configure",url:"/configuration-market-place",title:"Market Place",id:"configuration"}),(0,r.plug)("pages",a.VY.Contents,{url:"/market-place",title:"Market Place",id:"market-place",namespace:"plugins",breadcrumbs:["Market Place","Plugins"],labels:{saveContent:"Save plugin",createContent:"Create plugin",emptyContent:"No plugins"},custom:()=>l.createElement(h,null),customFieldsSchema:[{key:"url",type:"string",description:"URL of the compiled plugin",color:"cyan"},{key:"flow",type:"string",description:"URL of the Node-RED flow for this plugin",color:"cyan"},{key:"id",type:"string",description:"Unique id of the plugin",color:"red"},{key:"version",type:"string",description:"The version of the current (latest) plugin",color:"red"},{key:"github",type:"string",description:"The URL of the github page of the plugin",color:"red"},{key:"author",type:"string",description:"The username of the author of the plugin",color:"orange"},{key:"author_url",type:"string",description:"The home page of the username, if any",color:"orange"},{key:"tags",type:"tags",description:"List of keywords, comma separated",color:"red"},{key:"content_title",type:"string",description:"Create a content with this title",color:"violet"},{key:"content_slug",type:"string",description:"Create a content with this slug",color:"violet"},{key:"content_body",type:"string",description:"Create a content with this body",color:"violet"},{key:"content_namespace",type:"string",description:"Create a content with this namespace",color:"violet"}]}),(0,r.plug)("content-tabs",(({formValue:e={},onChange:t=(()=>{})})=>{const{initial_configuration:n}=e||{};return l.createElement("div",{style:{paddingBottom:"15px"}},l.createElement(a.Ad,{value:m().isEmpty(n)?"":n,height:"55vh",onChange:n=>{t({...e,initial_configuration:m().isEmpty(n)?null:n})}}))}),{id:"content-configuration",label:"Configuration",namespace:["plugins"]});var Z=n(91624),C=n(50721);n(83751);const x=e=>"location"===e?"#5E8263":e?"#D36135":e?"#595D88":"#000000";n(54641);const S=()=>l.createElement(Z.Z,{className:"map-marker",icon:"map-marker",size:"2x",style:{color:"red"}});var P=n(73727),I=n(87596),N=n(82122),T=n(69873),M=n(40660),L=n(45697),R=n.n(L),j=n(94184),D=n.n(j);function q(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class z extends l.Component{render(){const{thumb:e,height:t,width:n,maxWidth:r,maxHeight:a}=this.props,i=t/n;let o=Math.floor(i*r);o>a&&(o=a);const s={backgroundImage:`url(${e})`,backgroundPosition:"center",width:`${r}px`,height:`${o}px`};return l.createElement("div",{style:s})}}q(z,"propTypes",{thumb:R().string,height:R().number,width:R().number,maxWidth:R().number,maxHeight:R().number,onClick:R().func}),q(z,"defaultProps",{thumb:null,height:null,width:null,maxWidth:200,maxHeight:400,onClick:()=>{}});const O=z;function F(){return F=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var l in n)Object.prototype.hasOwnProperty.call(n,l)&&(e[l]=n[l])}return e},F.apply(this,arguments)}const H=({topic:e,ts:t,content:n,onDelete:r,onZoom:a,thumb:i,image:o,width:s,height:c,maxHeight:u,...p})=>{let d;return m().isEmpty(i)||(d=l.createElement(O,{thumb:i,topic:e,width:s,height:c,maxHeight:u,onClick:()=>{console.log("clicked"),a({})}})),l.createElement(T.Z,F({title:e},p,{onMouseLeave:()=>{}}),l.createElement("div",{className:"popover-map-marker"},"vario"))};function U(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}H.propTypes={topic:R().string,thumb:R().string,image:R().string,content:R().string,ts:R().instanceOf(Date),onDelete:R().func,width:R().number,height:R().number},H.defaultProps={topic:null,thumb:null,image:null,content:null,ts:null,onDelete:()=>{},width:null,height:null};class $ extends l.Component{constructor(e){super(e),this.handleLoaded=this.handleLoaded.bind(this),this.handleClick=this.handleClick.bind(this);const{thumb:t}=e;this.state={needPreload:!m().isEmpty(t),preload:!1,width:null,height:null}}componentDidMount(){const{type:e,color:t}=this.props;null!=this.tooltip&&"tooltip"===e&&(this.tooltip.querySelector(".rs-tooltip-inner").style.backgroundColor=t,this.tooltip.querySelector(".rs-tooltip-arrow").style.backgroundColor=t)}handleLoaded(e){this.setState({preload:!1,width:e.target.width,height:e.target.height},(()=>this.trigger.show()))}handleClick(e){e.preventDefault(),e.stopPropagation();const{thumb:t}=this.props;m().isEmpty(t)?this.trigger.show():this.setState({preload:!0})}render(){const{children:e,point:t,text:n,type:r,popover:a,showPopover:i,thumb:o,image:s,inkColor:c,maxHeight:u,onDeletePoint:p,onShowImage:d}=this.props;let{icon:g,color:h,size:y}=this.props;const{height:b,width:f,preload:E,needPreload:v}=this.state;let k;switch(m().isEmpty(g)&&(g="map-marker"),m().isEmpty(y)&&(y="lg"),m().isEmpty(h)&&(h="#FF3300"),m().isEmpty(c)&&(h="#000000"),new Date(parseInt(t.ts,10)),r){case"icon":k=l.createElement("a",{href:"#",className:D()("wrapper-map-marker",{preload:E}),onClick:this.handleClick},E&&l.createElement("img",{src:o,style:{display:"none"},onLoad:this.handleLoaded,alt:""}),l.createElement(Z.Z,{className:D()("map-marker",{pointer:i}),icon:g,size:y,style:{color:h}}));break;case"tooltip":k=l.createElement("div",{ref:e=>this.tooltip=e,style:{height:20,backgroundColor:"#ff0000"}},l.createElement(N.Z,{visible:!0},l.createElement("span",{style:{color:c}},n)));break;default:k=null}if(i){if(v&&E)return k;const t=l.createElement(T.Z,{onMouseLeave:()=>{}},l.createElement("div",{className:"popover-map-marker"},e));return l.createElement(M.Z,{trigger:"click",placement:"top",speaker:t,triggerRef:e=>this.trigger=e},k)}return k}}U($,"propTypes",{point:R().shape({topic:R().string,text:R().string,ts:R().string}).isRequired,icon:R().string,size:R().string,color:R().string,text:R().string,popover:R().string,thumb:R().string,image:R().string,showPopover:R().bool,type:R().oneOf(["icon","tooltip"]),inkColor:R().string,maxHeight:R().number}),U($,"defaultProps",{icon:"map-marker",color:"#FF3300",text:null,size:"2x",popover:null,thumb:null,image:null,type:"icon",showPopover:!1,inkColor:"#ffffff",maxHeight:480});const V=$,W=c.default`
query($where: JSON) {
  records(limit: 50, order: "geohash", where: $where) {
    id,
    status,
    title,
    latitude,
    longitude,
    geohash,
    payload
  }
}`,{NodeRedNode:A,SlugHelp:J,TypeCommand:K}=a.AK;(0,r.plug)("sidebar",null,{id:"wiggle",label:"Panopticon",icon:"logo-survey",permission:"wiggle.view",options:[{id:"wiggle-secrets",label:"Secrets",url:"/secrets"},{id:"wiggle-secrets-map",label:"Secrets Map",url:"/secrets-map"}]}),(0,r.plug)("pages",(()=>{const[e,t]=(0,l.useState)(null),[n,r]=(0,l.useState)(!1),i=(0,s.xJ)();let o=(e||[]).filter((e=>null!=e.latitude&&null!=e.longitude)).map((e=>l.createElement(V,{key:e.id,lat:e.latitude,lng:e.longitude,point:{},popover:e.title,showPopover:!0},l.createElement("div",{style:{minHeight:"120px"}},l.createElement("strong",null,e.title),null!=e.payload.secret_url&&l.createElement("div",{style:{backgroundImage:`url(${e.payload.secret_url})`,backgroundPosition:"center",minWidth:"120px",backgroundRepeat:"no-repeat",backgroundSize:"contain",height:"120px"}}),null!=e.payload.secret&&l.createElement("div",null,e.payload.secret),l.createElement(P.rU,{to:`/record/${e.id}`},"view")))));return l.createElement(a._z,{className:"my-page"},l.createElement(a.Oo,{pages:["Secret locations"]}),l.createElement("div",{style:{width:"100%",height:"450px",position:"relative"}},n&&l.createElement("div",{style:{position:"absolute",top:"20px",left:"20px",zIndex:1e7}},l.createElement(I.Z,{size:"md"})),l.createElement(a.oe,{defaultCenter:{lat:45.4854739,lng:9.2022176},defaultZoom:11,height:450,onChange:async({bounds:e})=>{const{se:n,nw:l}=e;r(!0);const{data:{records:a}}=await i.query({query:W,variables:{where:{latitude:{gte:n.lat,lte:l.lat},longitude:{gte:l.lng,lte:n.lng}}},fetchPolicy:"network-only"});t(a),r(!1)}},o)))}),{url:"/secrets-map",title:"Secrets Map",id:"secrets-maps",permission:"wiggle.view",breadcrumbs:["Secrets Map"]}),(0,r.plug)("pages",a.Op,{url:"/secrets",title:"Secrets",id:"secrets",type:"secret",permission:"wiggle.view",breadcrumbs:["Secrets"],labels:{title:"Name",record:"secret"},columns:[{id:"secret-type",label:"Type",width:120,cell:({payload:e})=>l.createElement(a.vx,{color:x(e.secret_type)},e.secret_type)}]}),(0,r.plug)("permissions",null,{permission:"wiggle.view",name:"View Panopticon secret",description:"View secrets stored in Panopticon Bot",group:"Panopticon"}),(0,r.plug)("user-record-types",null,{type:"secret",name:"Secret",list:"Secrets",description:"List of Panopticon secrets",form:({record:e})=>{const{payload:t}=e,n=new Date(t.secret_duration),r=new Date,i=n.getTime()-r.getTime();return l.createElement("div",{className:"secret-viewer"},l.createElement(C.Z,{justify:"space-between",style:{marginTop:"30px"}},l.createElement(C.Z.Item,{colspan:7},l.createElement("div",null,l.createElement("b",null,"Secret is")," ",l.createElement(a.vx,{color:x(t.secret_type)},t.secret_type)),("time"===t.secret_type||"location+time"===t.secret_type)&&l.createElement("div",null,l.createElement("b",null,"Revealed when"),l.createElement("br",null),l.createElement("em",null,n.toLocaleDateString(),", ",n.toLocaleTimeString()),i>0&&l.createElement("div",{className:"secret-reveal-at"},Math.round(i/1e3/60)," minutes"),i<0&&l.createElement("div",null,"Secret date is due")),null!=t.secret_bounty&&l.createElement(l.Fragment,null,l.createElement("b",null,"ICE price:")," ",t.secret_bounty," EUR",l.createElement("br",null)),null!=t.secret_payment&&l.createElement(l.Fragment,null,l.createElement("br",null),l.createElement("b",null,"User paid to reveal the secret"),l.createElement("br",null),l.createElement("b",null,"Email: ")," ",t.secret_payment.order_info.email,l.createElement("br",null),l.createElement("b",null,"Currency: ")," ",t.secret_payment.currency,l.createElement("br",null),l.createElement("b",null,"Amount: ")," ",(t.secret_payment.total_amount/100).toFixed(2),l.createElement("br",null),l.createElement("b",null,"Payment ID: ")," ",t.secret_payment.provider_payment_charge_id,l.createElement("br",null))),l.createElement(C.Z.Item,{colspan:7},null!=t.secret_url&&l.createElement("div",null,l.createElement("b",null,"Secret image"),l.createElement("img",{src:t.secret_url,width:"100%"})),null!=t.secret&&l.createElement("div",null,l.createElement("b",null,"Secret text"),l.createElement("div",{className:"display-secret"},t.secret))),l.createElement(C.Z.Item,{colspan:7},null!=e.latitude&&l.createElement("div",{className:"ui-devices-map",style:{height:"300px"}},l.createElement(a.oe,{defaultCenter:{lat:e.latitude,lng:e.longitude},defaultZoom:11},l.createElement(S,null))),null==e.latitude&&l.createElement("div",null,l.createElement("em",null,"No location for this secret")))))},status:[{value:"private",label:"Private"},{value:"public",label:"Public"},{value:"crazy",label:"Crazy"},{value:"keyholder-free",label:"Keyholder free"},{value:"keyholder-taken",label:"Keyholder taken"}]}),(0,r.plug)("sidebar",null,{id:"configuration",label:"Configuration",permission:"configure",icon:"cog",options:[{id:"panopticon",label:"Panopticon",url:"/configuration-panopticon"}]}),(0,r.plug)("pages",(0,a.ln)("panopticon",(({value:e,onSubmit:t=(()=>{}),disabled:n=!1})=>{const[r,o]=(0,l.useState)(e),[s,c]=(0,l.useState)(null),u=(0,l.useRef)(null);return l.createElement("div",null,l.createElement(y.Z,{disabled:!0,formValue:r,formError:s,ref:u,checkTrigger:"none",layout:"vertical",fluid:!0,onChange:e=>{o(e),c(null)},onCheck:e=>{c(e)}},l.createElement(l.Fragment,null,l.createElement(b.Z,null,l.createElement(f.Z,null,"Content"),l.createElement(E.Z,{useSlug:!0,readOnly:n,name:"content",accepter:a.MN}),l.createElement(k.Z,null,"Select a ",l.createElement("em",null,"slug")," for a multi-language content to show additional information when a user requests information about opening hours")),l.createElement(b.Z,null,l.createElement(f.Z,null,"Sensitivity"),l.createElement(E.Z,{disabled:n,name:"threshold",accepter:a.nH}),l.createElement(k.Z,null,"The minimum score of an intent to be considered relevant. Lower this value if the NLP doesn't catch any intent of the user input, raise this value if the NLP of this block is interfering with the NLP of other blocks."))),l.createElement(b.Z,{style:{marginTop:"40px"}},l.createElement(w.Z,null,l.createElement(i.Z,{disabled:n,appearance:"primary",onClick:()=>{u.current.check()&&t(r)}},"Save configuration"),l.createElement(i.Z,{disabled:n,appearance:"default",onClick:()=>{confirm("Reset configuration?")&&o(e)}},"Reset")))))}),{Legend:()=>l.createElement("div",null,l.createElement("p",null,"Configure some ",l.createElement("i",null,"Panopticon")," parameters")),title:"Panopticon"}),{permission:"configure",url:"/configuration-panopticon",title:"Configure Panopticon",id:"configuration-panopticon"});var B=n(24259),Y=n(88182),G=n(90585);const Q=e=>m().isEmpty(e.first_name)&&m().isEmpty(e.last_name)?m().isEmpty(username)?"Anonymous (id: {id})":e.username:[e.first_name,e.last_name].filter((e=>!m().isEmpty(e))).join(" "),X=({value:e,validation:t,onChange:n=(()=>{}),onSubmit:r=(()=>{})})=>{const{activeChatbots:i}=(0,G.Z)();return l.createElement("div",null,l.createElement(y.Z,{fluid:!0,formValue:e,onChange:n,formError:t},l.createElement(C.Z,{justify:"space-between"},l.createElement(C.Z.Item,{colspan:15},l.createElement(b.Z,null,l.createElement(f.Z,null,"Recipient"),l.createElement(E.Z,{name:"recipient",accepter:a.P2,cleanable:!0,onChange:t=>{if(null!=t&&_.isArray(t.chatIds)&&!_.isEmpty(t.chatIds)){const l=t.chatIds.find((e=>((e,t)=>e.some((e=>e.transport===t)))(i,e.transport)));null!=l&&n({...e,chatId:l.chatId,userId:t.userId,recipient:t,botNode:i.find((e=>e.transport===l.transport)).nodeId})}}}))),l.createElement(C.Z.Item,{colspan:8},l.createElement(b.Z,null,l.createElement(f.Z,null,"Transport",l.createElement(k.Z,{tooltip:!0},"Shows only platforms for which the selected users has a valid ",l.createElement("em",null,"chatId"))),l.createElement(E.Z,{name:"botNode",accepter:a.Tl,transports:null!=e.recipient?e.recipient.chatIds.map((e=>e.transport)):null,disabled:null==e.recipient,onChange:t=>{const l=i.find((e=>e.nodeId===t));if(null!=l&&null!=e.recipient){const r=e.recipient.chatIds.find((e=>e.transport===l.transport));null!=r&&n({...e,chatId:r.chatId,botNode:t})}},block:!0})))),l.createElement(b.Z,{style:{marginTop:"15px"}},l.createElement(f.Z,null,"Message to send"),l.createElement(E.Z,{name:"message",componentClass:"textarea",style:{height:"100%"},onKeyUp:e=>{e.shiftKey&&13===e.keyCode&&r()}}))))},{useModal:ee}=a.u_,te=e=>null!=e.recipient&&null!=e.chatId&&null!=e.botNode&&!m().isEmpty(e.message),{StringType:ne,ObjectType:le}=Y.Z.Types,re=(Y.Z.Model({recipient:le().isRequired("Select recipient"),botNode:ne().isRequired("Select chatbot platoform"),message:ne().isRequired("Enter message for the user")}),({user:e,appearance:t="ghost",transport:n})=>{const{sendToInput:r}=(0,B.ZP)(),{activeChatbots:a}=(0,G.Z)(),{open:s,close:c,validate:u,error:p,disable:d,openWithModel:g,openWith:h}=ee({view:X,title:"Send message",labelSubmit:"Send message",size:"sm"});let y,b;if(!m().isEmpty(n)&&e.chatIds.some((e=>e.transport===n))){const t=a.find((e=>e.transport===n));console.log("chatBot",t,a,n),null!=t&&(y=t.nodeId,b=e.chatIds.find((e=>e.transport===n)).chatId)}return l.createElement(i.Z,{appearance:t,onClick:async()=>{let t={recipient:e,botNode:y,chatId:b,message:""};t=await h(t,te),t&&(r("message.send",t),o.Z.success({title:"Message sent",description:`Message sent successfully to "${Q(t.recipient)}"`}))}},"Contact User")});n(88748);const{WidgetForm:ae,Content:ie,Footer:oe}=a.DD;(0,r.plug)("widgets",(({stats:e})=>{const[t,n]=(0,l.useState)({message:""}),r=!_.isEmpty(t.chatId)&&!_.isEmpty(t.botNode),{sendToInput:o}=(0,B.ZP)();return l.createElement(a.s_,{title:"Send Message",className:"widget-send-message"},l.createElement(ae,{fluid:!0,formValue:t,onChange:e=>n(e)},l.createElement(ie,null,l.createElement(X,{value:t,onChange:e=>n(e),onSubmit:()=>{o("message.send",t),n({...t,message:""})}})),l.createElement(oe,null,l.createElement(b.Z,null,l.createElement(w.Z,null,l.createElement(i.Z,{appearance:"primary",disabled:!r,onClick:()=>{o("message.send",t),n({...t,message:""})}},"Send Message"),l.createElement("div",{className:"key-hint"},"Shift + Enter to Send"),l.createElement(i.Z,{style:{float:"right"},appearance:"default",onClick:()=>n({botNode:null,recipient:null,chatId:null,message:""})},"Cancel"))))))}),{x:0,y:0,w:2,h:6,isResizable:!0,id:1}),(0,r.plug)("user-button",re),(0,r.plug)("user-record-buttons",(({record:e})=>l.createElement(re,{transport:e.transport,appearance:"primary",user:e.user})),{type:"survey"})},4021:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".secret-viewer .display-secret{padding:4px 10px;font-family:monospace;background-color:#eeeeee;border:1px solid #bbbbbb}.secret-viewer .secret-reveal-at{font-size:40px;font-weight:bolder}\n",""]),e.exports=t},47155:(e,t,n)=>{(t=n(23645)(!1)).push([e.id,".widget-send-message .rs-form-group{flex:1 0;display:flex;flex-direction:column;flex-wrap:nowrap;justify-content:flex-start;align-content:stretch;align-items:stretch}.widget-send-message .rs-form-group .rs-form-control-wrapper{flex:1 0}.widget-send-message .key-hint{color:#999999;display:inline-block}\n",""]),e.exports=t},54641:(e,t,n)=>{var l=n(93379),r=n(4021);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.id,r,""]]);l(r,{insert:"head",singleton:!1}),e.exports=r.locals||{}},88748:(e,t,n)=>{var l=n(93379),r=n(47155);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.id,r,""]]);l(r,{insert:"head",singleton:!1}),e.exports=r.locals||{}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TSxFQUFRLE9BQ0Y1UixFQUFVLEVBQVEsTUFJQyxpQkFGdkJBLEVBQVVBLEVBQVE2UixXQUFhN1IsRUFBUThSLFFBQVU5UixLQUcvQ0EsRUFBVSxDQUFDLENBQUMyUixFQUFPblIsR0FBSVIsRUFBUyxNQVFqQzRSLEVBQUk1UixFQUxILENBRWQyQixPQUFpQixPQUNqQkEsV0FBb0IsSUFNcEJnUSxFQUFPSCxRQUFVeFIsRUFBUStSLFFBQVUsSSxnQkNsQm5DLElBQUlILEVBQU0sRUFBUSxPQUNGNVIsRUFBVSxFQUFRLE9BSUMsaUJBRnZCQSxFQUFVQSxFQUFRNlIsV0FBYTdSLEVBQVE4UixRQUFVOVIsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDMlIsRUFBT25SLEdBQUlSLEVBQVMsTUFRakM0UixFQUFJNVIsRUFMSCxDQUVkMkIsT0FBaUIsT0FDakJBLFdBQW9CLElBTXBCZ1EsRUFBT0gsUUFBVXhSLEVBQVErUixRQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vcGx1Z2lucy9tYXJrZXQtcGxhY2Uvdmlld3MvcHVibGlzaC1wbHVnaW5zLmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3BsdWdpbnMvbWFya2V0LXBsYWNlL2luZGV4LmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3BsdWdpbnMvbWFya2V0LXBsYWNlL3ZpZXdzL2NvbmZpZ3VyZS1tYXJrZXQtcGxhY2UuanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vcGx1Z2lucy9tYXJrZXQtcGxhY2Uvdmlld3MvZGVmYXVsdC1jb25maWd1cmF0aW9uLmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3BsdWdpbnMvcGFub3B0aWNvbi9oZWxwZXJzL3NlY3JldC1jb2xvci5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9wbHVnaW5zL3Bhbm9wdGljb24vdmlld3Mvc2VjcmV0LXZpZXdlci5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9wbHVnaW5zL3Bhbm9wdGljb24vdmlld3MvaW1hZ2UuanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vcGx1Z2lucy9wYW5vcHRpY29uL3ZpZXdzL2JhbGxvb24uanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vcGx1Z2lucy9wYW5vcHRpY29uL3ZpZXdzL3Bpbi1wb2ludC5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9wbHVnaW5zL3Bhbm9wdGljb24vcGFnZXMvc2VjcmV0LW1hcC5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9wbHVnaW5zL3Bhbm9wdGljb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vcGx1Z2lucy9wYW5vcHRpY29uL3ZpZXdzL2NvbmZpZ3VyYXRpb24uanMiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vc3JjL2hlbHBlcnMvdXNlci9yZWFkYWJsZS1uYW1lLmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3BsdWdpbnMvc2VuZC1tZXNzYWdlL3ZpZXdzL3NlbmQtZm9ybS5qcyIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9wbHVnaW5zL3NlbmQtbWVzc2FnZS92aWV3cy9zZW5kLW1lc3NhZ2UtYnV0dG9uLmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3BsdWdpbnMvc2VuZC1tZXNzYWdlL2luZGV4LmpzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3BsdWdpbnMvcGFub3B0aWNvbi9zdHlsZXMvc2VjcmV0LXZpZXdlci5zY3NzIiwid2VicGFjazovL25vZGUtcmVkLWNvbnRyaWItY2hhdGJvdC8uL3BsdWdpbnMvc2VuZC1tZXNzYWdlL3dpZGdldC1zZW5kLnNjc3MiLCJ3ZWJwYWNrOi8vbm9kZS1yZWQtY29udHJpYi1jaGF0Ym90Ly4vcGx1Z2lucy9wYW5vcHRpY29uL3N0eWxlcy9zZWNyZXQtdmlld2VyLnNjc3M/YTI0OCIsIndlYnBhY2s6Ly9ub2RlLXJlZC1jb250cmliLWNoYXRib3QvLi9wbHVnaW5zL3NlbmQtbWVzc2FnZS93aWRnZXQtc2VuZC5zY3NzPzA2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnV0dG9uLCBOb3RpZmljYXRpb24gfSBmcm9tICdyc3VpdGUnO1xuaW1wb3J0IHsgdXNlQXBvbGxvQ2xpZW50IH0gZnJvbSAncmVhY3QtYXBvbGxvJztcbmltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnO1xuaW1wb3J0IHVzZUZldGNoIGZyb20gJ3VzZS1odHRwJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB1c2VDb25maWd1cmF0aW9uIGZyb20gJy4uLy4uLy4uL3NyYy9ob29rcy9jb25maWd1cmF0aW9uJztcblxuY29uc3QgQ09OVEVOVF9QTFVHSU5TID0gZ3FsYFxucXVlcnkge1xuICBjb250ZW50cyhuYW1lc3BhY2U6IFwicGx1Z2luc1wiKSB7XG4gICAgaWQsXG4gICAgdGl0bGUsXG4gICAgYm9keSxcbiAgICBwYXlsb2FkLFxuICAgIGZpZWxkcyB7XG4gICAgICBuYW1lLFxuICAgICAgdmFsdWVcbiAgICB9XG4gIH1cbn1cbmA7XG5cbi8vIEFQSSBmb3IganNvbmJpbi5pbzogaHR0cHM6Ly9qc29uYmluLmlvL2FwaS1yZWZlcmVuY2UvYmlucy9yZWFkXG5cbmNvbnN0IFB1Ymxpc2hQbHVnaW5zID0gKCkgPT4ge1xuICBjb25zdCBjbGllbnQgPSB1c2VBcG9sbG9DbGllbnQoKTtcbiAgY29uc3QgeyBkYXRhIH0gPSB1c2VDb25maWd1cmF0aW9uKHsgbmFtZXNwYWNlOiAnbWFya2V0LXBsYWNlJyB9KTtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgeyBwdXQgfSA9IHVzZUZldGNoKCdodHRwczovL2FwaS5qc29uYmluLmlvJywge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAnc2VjcmV0LWtleSc6IGRhdGEgIT0gbnVsbCA/IGRhdGEuanNvbmJpbl9rZXkgOiBudWxsLFxuICAgICAgJ3ZlcnNpb25pbmcnOiAnZmFsc2UnXG4gICAgfVxuICB9KTtcbiAgY29uc3QgaGFzU2VjcmV0S2V5ID0gZGF0YSAhPSBudWxsICYmICFfLmlzRW1wdHkoZGF0YS5qc29uYmluX2tleSk7XG5cbiAgcmV0dXJuIChcbiAgICA8QnV0dG9uXG4gICAgICBkaXNhYmxlZD17c3RhdGUgIT0gbnVsbCB8fCAhaGFzU2VjcmV0S2V5fVxuICAgICAgYXBwZWFyYW5jZT1cInByaW1hcnlcIlxuICAgICAgb25DbGljaz17YXN5bmMgKCkgPT4ge1xuICAgICAgICBzZXRTdGF0ZSgnTG9hZGluZy4uLicpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNsaWVudC5xdWVyeSh7IHF1ZXJ5OiBDT05URU5UX1BMVUdJTlMsIGZldGNoUG9saWN5OiAnbmV0d29yay1vbmx5JyB9KTtcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IHJlc3BvbnNlLmRhdGEuY29udGVudHMubWFwKHBsdWdpbiA9PiB7XG4gICAgICAgICAgY29uc3QgZmllbGRzID0gcGx1Z2luLmZpZWxkcy5yZWR1Y2UoKGFjYywgaXRlbSkgPT4gKHsgLi4uYWNjLCBbaXRlbS5uYW1lXTogaXRlbS52YWx1ZSB9KSwge30pO1xuXG4gICAgICAgICAgbGV0IGNvbnRlbnQgPSBudWxsO1xuICAgICAgICAgIGlmICghXy5pc0VtcHR5KGZpZWxkcy5jb250ZW50X3RpdGxlKSB8fCAhXy5pc0VtcHR5KGZpZWxkcy5jb250ZW50X3NsdWcpIHx8ICFfLmlzRW1wdHkoZmllbGRzLmNvbnRlbnRfYm9keSkpIHtcbiAgICAgICAgICAgIGNvbnRlbnQgPSB7XG4gICAgICAgICAgICAgIHRpdGxlOiBmaWVsZHMuY29udGVudF90aXRsZSxcbiAgICAgICAgICAgICAgc2x1ZzogZmllbGRzLmNvbnRlbnRfc2x1ZyxcbiAgICAgICAgICAgICAgYm9keTogZmllbGRzLmNvbnRlbnRfYm9keSxcbiAgICAgICAgICAgICAgbmFtZXNwYWNlOiBmaWVsZHMuY29udGVudF9uYW1lc3BhY2VcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBmaWVsZHMuaWQsXG4gICAgICAgICAgICBuYW1lOiBwbHVnaW4udGl0bGUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogcGx1Z2luLmJvZHksXG4gICAgICAgICAgICB1cmw6IGZpZWxkcy51cmwsXG4gICAgICAgICAgICBmbG93OiBmaWVsZHMuZmxvdyxcbiAgICAgICAgICAgIHZlcnNpb246IGZpZWxkcy52ZXJzaW9uLFxuICAgICAgICAgICAgZ2l0aHViOiBmaWVsZHMuZ2l0aHViLFxuICAgICAgICAgICAga2V5d29yZHM6IGZpZWxkcy50YWdzLFxuICAgICAgICAgICAgYXV0aG9yOiB7XG4gICAgICAgICAgICAgIG5hbWU6IGZpZWxkcy5hdXRob3IsXG4gICAgICAgICAgICAgIHVybDogZmllbGRzLmF1dGhvcl91cmxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgaW5pdGlhbENvbmZpZ3VyYXRpb246IHBsdWdpbi5wYXlsb2FkICE9IG51bGwgJiYgIV8uaXNFbXB0eShwbHVnaW4ucGF5bG9hZC5pbml0aWFsX2NvbmZpZ3VyYXRpb24pID9cbiAgICAgICAgICAgICAgcGx1Z2luLnBheWxvYWQuaW5pdGlhbF9jb25maWd1cmF0aW9uIDogbnVsbFxuICAgICAgICAgIH07XG4gICAgICAgIH0pXG4gICAgICAgIHNldFN0YXRlKCdQdWJsaXNoaW5nLi4uJyk7XG4gICAgICAgIGF3YWl0IHB1dChgL2IvJHtkYXRhLmpzb25iaW5faWR9YCwgcGx1Z2lucyk7XG5cbiAgICAgICAgc2V0U3RhdGUobnVsbCk7XG4gICAgICAgIE5vdGlmaWNhdGlvbi5zdWNjZXNzKHsgdGl0bGU6ICdQdWJsaXNoZWQnLCBkZXNjcmlwdGlvbjogJ1BsdWdpbiBsaXN0IHB1Ymxpc2hlZCBzdWNjZXNmdWxseSAnfSk7XG4gICAgICB9fVxuICAgID5cbiAgICAgIHtzdGF0ZSAhPSBudWxsID8gc3RhdGUgOiAnUHVibGlzaCBwbHVnaW5zJ31cbiAgICA8L0J1dHRvbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFB1Ymxpc2hQbHVnaW5zOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwbHVnIH0gZnJvbSAnY29kZS1wbHVnJztcblxuaW1wb3J0IHsgd2l0aENvbmZpZ3VyYXRpb25QYWdlLCBDb250ZW50IH0gZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMnO1xuXG5pbXBvcnQgUHVibGlzaFBsdWdpbnMgZnJvbSAnLi92aWV3cy9wdWJsaXNoLXBsdWdpbnMnO1xuaW1wb3J0IENvbmZpZ3VyZU1hcmtldFBsYWNlIGZyb20gJy4vdmlld3MvY29uZmlndXJlLW1hcmtldC1wbGFjZSc7XG5pbXBvcnQgRGVmYXVsdENvbmZpZ3VyYXRpb24gZnJvbSAnLi92aWV3cy9kZWZhdWx0LWNvbmZpZ3VyYXRpb24nO1xuXG5jb25zdCBMZWdlbmQgPSAoKSA9PiAoXG4gIDxkaXY+XG4gICAgQ29uZmlndXJlIHRoZSBpZCBhbmQgdGhlIGtleSB0byBhY2Nlc3MgPHN0cm9uZz5qc29uYmluZy5pbzwvc3Ryb25nPiBmb3IgdGhlIHBsdWdpbnMgbWV0IGluZm9ybWF0aW9uLlxuICAgIDxiciAvPlxuICAgIERvY3MgYWJvdXQgdGhlIEFQSSA8YSBocmVmPVwiaHR0cHM6Ly9qc29uYmluLmlvL2FwaS1yZWZlcmVuY2UvYmlucy9yZWFkXCIgdGFyZ2V0PVwiYmxhbmtcIj5oZXJlPC9hPi5cbiAgPC9kaXY+XG4pO1xuXG5wbHVnKFxuICAnc2lkZWJhcicsXG4gIG51bGwsXG4gIHtcbiAgICBpZDogJ21hcmtldC1wbGFjZScsXG4gICAgbGFiZWw6ICdNYXJrZXQgUGxhY2UnLFxuICAgIHVybDogJy9tYXJrZXQtcGxhY2UnLFxuICAgIGljb246ICdzaG9wcGluZy1iYXNrZXQnXG4gIH1cbik7XG5cbnBsdWcoJ3NpZGViYXInLCBudWxsLCB7XG4gIGlkOiAnY29uZmlndXJhdGlvbicsXG4gIGxhYmVsOiAnQ29uZmlndXJhdGlvbicsXG4gIHBlcm1pc3Npb246ICdjb25maWd1cmUnLFxuICBpY29uOiAnY29nJyxcbiAgb3B0aW9uczogW1xuICAgIHtcbiAgICAgIGlkOiAnY29uZmlndXJhdGlvbi1tYXJrZXQtcGxhY2UnLFxuICAgICAgbGFiZWw6ICdNYXJrZXQgUGxhY2UnLFxuICAgICAgdXJsOiAnL2NvbmZpZ3VyYXRpb24tbWFya2V0LXBsYWNlJyxcbiAgICB9XG4gIF1cbn0pO1xuXG5wbHVnKFxuICAncGFnZXMnLFxuICB3aXRoQ29uZmlndXJhdGlvblBhZ2UoXG4gICAgJ21hcmtldC1wbGFjZScsXG4gICAgQ29uZmlndXJlTWFya2V0UGxhY2UsXG4gICAgeyBMZWdlbmQsIHRpdGxlOiAnTWFya2V0IFBsYWNlJyB9XG4gICksXG4gIHtcbiAgICBwZXJtaXNzaW9uOiAnY29uZmlndXJlJyxcbiAgICB1cmw6ICcvY29uZmlndXJhdGlvbi1tYXJrZXQtcGxhY2UnLFxuICAgIHRpdGxlOiAnTWFya2V0IFBsYWNlJyxcbiAgICBpZDogJ2NvbmZpZ3VyYXRpb24nXG4gIH1cbik7XG5cblxucGx1ZygncGFnZXMnLCBDb250ZW50LkNvbnRlbnRzLCB7XG4gIHVybDogJy9tYXJrZXQtcGxhY2UnLFxuICB0aXRsZTogJ01hcmtldCBQbGFjZScsXG4gIGlkOiAnbWFya2V0LXBsYWNlJyxcbiAgbmFtZXNwYWNlOiAncGx1Z2lucycsXG4gIGJyZWFkY3J1bWJzOiBbJ01hcmtldCBQbGFjZScsICdQbHVnaW5zJ10sXG4gIGxhYmVsczoge1xuICAgIHNhdmVDb250ZW50OiAnU2F2ZSBwbHVnaW4nLFxuICAgIGNyZWF0ZUNvbnRlbnQ6ICdDcmVhdGUgcGx1Z2luJyxcbiAgICBlbXB0eUNvbnRlbnQ6ICdObyBwbHVnaW5zJyxcbiAgfSxcbiAgY3VzdG9tOiAoKSA9PiA8UHVibGlzaFBsdWdpbnMgLz4sXG4gIGN1c3RvbUZpZWxkc1NjaGVtYTogW1xuICAgIHtcbiAgICAgIGtleTogJ3VybCcsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGRlc2NyaXB0aW9uOiBgVVJMIG9mIHRoZSBjb21waWxlZCBwbHVnaW5gLFxuICAgICAgY29sb3I6ICdjeWFuJ1xuICAgIH0sXG4gICAge1xuICAgICAga2V5OiAnZmxvdycsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGRlc2NyaXB0aW9uOiBgVVJMIG9mIHRoZSBOb2RlLVJFRCBmbG93IGZvciB0aGlzIHBsdWdpbmAsXG4gICAgICBjb2xvcjogJ2N5YW4nXG4gICAgfSxcbiAgICB7XG4gICAgICBrZXk6ICdpZCcsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGRlc2NyaXB0aW9uOiBgVW5pcXVlIGlkIG9mIHRoZSBwbHVnaW5gLFxuICAgICAgY29sb3I6ICdyZWQnXG4gICAgfSxcbiAgICB7XG4gICAgICBrZXk6ICd2ZXJzaW9uJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVzY3JpcHRpb246IGBUaGUgdmVyc2lvbiBvZiB0aGUgY3VycmVudCAobGF0ZXN0KSBwbHVnaW5gLFxuICAgICAgY29sb3I6ICdyZWQnXG4gICAgfSxcbiAgICB7XG4gICAgICBrZXk6ICdnaXRodWInLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICBkZXNjcmlwdGlvbjogYFRoZSBVUkwgb2YgdGhlIGdpdGh1YiBwYWdlIG9mIHRoZSBwbHVnaW5gLFxuICAgICAgY29sb3I6ICdyZWQnXG4gICAgfSxcbiAgICB7XG4gICAgICBrZXk6ICdhdXRob3InLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICBkZXNjcmlwdGlvbjogYFRoZSB1c2VybmFtZSBvZiB0aGUgYXV0aG9yIG9mIHRoZSBwbHVnaW5gLFxuICAgICAgY29sb3I6ICdvcmFuZ2UnXG4gICAgfSxcbiAgICB7XG4gICAgICBrZXk6ICdhdXRob3JfdXJsJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVzY3JpcHRpb246IGBUaGUgaG9tZSBwYWdlIG9mIHRoZSB1c2VybmFtZSwgaWYgYW55YCxcbiAgICAgIGNvbG9yOiAnb3JhbmdlJ1xuICAgIH0sXG4gICAge1xuICAgICAga2V5OiAndGFncycsXG4gICAgICB0eXBlOiAndGFncycsXG4gICAgICBkZXNjcmlwdGlvbjogYExpc3Qgb2Yga2V5d29yZHMsIGNvbW1hIHNlcGFyYXRlZGAsXG4gICAgICBjb2xvcjogJ3JlZCdcbiAgICB9LFxuICAgIHtcbiAgICAgIGtleTogJ2NvbnRlbnRfdGl0bGUnLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICBkZXNjcmlwdGlvbjogYENyZWF0ZSBhIGNvbnRlbnQgd2l0aCB0aGlzIHRpdGxlYCxcbiAgICAgIGNvbG9yOiAndmlvbGV0J1xuICAgIH0sXG4gICAge1xuICAgICAga2V5OiAnY29udGVudF9zbHVnJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVzY3JpcHRpb246IGBDcmVhdGUgYSBjb250ZW50IHdpdGggdGhpcyBzbHVnYCxcbiAgICAgIGNvbG9yOiAndmlvbGV0J1xuICAgIH0sXG4gICAge1xuICAgICAga2V5OiAnY29udGVudF9ib2R5JyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgZGVzY3JpcHRpb246IGBDcmVhdGUgYSBjb250ZW50IHdpdGggdGhpcyBib2R5YCxcbiAgICAgIGNvbG9yOiAndmlvbGV0J1xuICAgIH0sXG4gICAge1xuICAgICAga2V5OiAnY29udGVudF9uYW1lc3BhY2UnLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICBkZXNjcmlwdGlvbjogYENyZWF0ZSBhIGNvbnRlbnQgd2l0aCB0aGlzIG5hbWVzcGFjZWAsXG4gICAgICBjb2xvcjogJ3Zpb2xldCdcbiAgICB9XG4gIF1cbn0pO1xuXG5wbHVnKCdjb250ZW50LXRhYnMnLCBEZWZhdWx0Q29uZmlndXJhdGlvbiwge1xuICBpZDogJ2NvbnRlbnQtY29uZmlndXJhdGlvbicsXG4gIGxhYmVsOiAnQ29uZmlndXJhdGlvbicsXG4gIG5hbWVzcGFjZTogWydwbHVnaW5zJ11cbn0pOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSW5wdXQsIEZvcm0sIENvbnRyb2xMYWJlbCwgRm9ybUNvbnRyb2wsIEhlbHBCbG9jaywgQnV0dG9uLCBCdXR0b25Ub29sYmFyLCBGb3JtR3JvdXAgfSBmcm9tICdyc3VpdGUnO1xuXG5leHBvcnQgZGVmYXVsdCAoe1xuICB2YWx1ZSxcbiAgb25TdWJtaXQgPSAoKSA9PiB7IH0sXG4gIGRpc2FibGVkID0gZmFsc2Vcbn0pID0+IHtcbiAgY29uc3QgW2Zvcm1WYWx1ZSwgc2V0Rm9ybVZhbHVlXSA9IHVzZVN0YXRlKHZhbHVlKTtcbiAgY29uc3QgW2Zvcm1FcnJvciwgc2V0Rm9ybUVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBmb3JtID0gdXNlUmVmKG51bGwpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxGb3JtXG4gICAgICAgIGZvcm1WYWx1ZT17Zm9ybVZhbHVlfVxuICAgICAgICBmb3JtRXJyb3I9e2Zvcm1FcnJvcn1cbiAgICAgICAgcmVmPXtmb3JtfVxuICAgICAgICBjaGVja1RyaWdnZXI9XCJub25lXCJcbiAgICAgICAgbGF5b3V0PVwidmVydGljYWxcIlxuICAgICAgICBmbHVpZFxuICAgICAgICBvbkNoYW5nZT17Zm9ybVZhbHVlID0+IHtcbiAgICAgICAgICBzZXRGb3JtVmFsdWUoZm9ybVZhbHVlKTtcbiAgICAgICAgICBzZXRGb3JtRXJyb3IobnVsbCk7XG4gICAgICAgIH19XG4gICAgICAgIG9uQ2hlY2s9e2Vycm9ycyA9PiB7XG4gICAgICAgICAgc2V0Rm9ybUVycm9yKGVycm9ycyk7XG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgPENvbnRyb2xMYWJlbD5KU09OYmluLmlvIGlkPC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICBuYW1lPVwianNvbmJpbl9pZFwiXG4gICAgICAgICAgICBhY2NlcHRlcj17SW5wdXR9XG4gICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8SGVscEJsb2NrPlxuICAgICAgICAgICAgVGhlIDxlbT5pZDwvZW0+IG9mIHRoZSA8c3Ryb25nPmpzb25iaW4uaW88L3N0cm9uZz4gc25pcHBldCBvZiB0aGUgcGx1Z2lucyBtZXRhIGluZm9cbiAgICAgICAgICA8L0hlbHBCbG9jaz5cbiAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgPENvbnRyb2xMYWJlbD5KU09OYmluLmlvIGtleTwvQ29udHJvbExhYmVsPlxuICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgbmFtZT1cImpzb25iaW5fa2V5XCJcbiAgICAgICAgICAgIGFjY2VwdGVyPXtJbnB1dH1cbiAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgICBUaGUgPGVtPnNlY3JldCBrZXk8L2VtPiB0byB3cml0ZSBvbiA8c3Ryb25nPmpzb25iaW4uaW88L3N0cm9uZz5cbiAgICAgICAgICA8L0hlbHBCbG9jaz5cbiAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgIDxGb3JtR3JvdXAgc3R5bGU9e3sgbWFyZ2luVG9wOiAnNDBweCcgfX0+XG4gICAgICAgICAgPEJ1dHRvblRvb2xiYXI+XG4gICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFmb3JtLmN1cnJlbnQuY2hlY2soKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvblN1Ym1pdChmb3JtVmFsdWUpO1xuICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgU2F2ZSBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb25maXJtKCdSZXNldCBjb25maWd1cmF0aW9uPycpKSB7XG4gICAgICAgICAgICAgICAgICBzZXRGb3JtVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgUmVzZXRcbiAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDwvQnV0dG9uVG9vbGJhcj5cbiAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICA8L0Zvcm0+XG4gICAgPC9kaXY+XG4gICk7XG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBKc29uRWRpdG9yIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMnO1xuXG5jb25zdCBEZWZhdWx0Q29uZmlndXJhdGlvbiA9ICh7IGZvcm1WYWx1ZSA9IHt9LCBvbkNoYW5nZSA9ICgpID0+IHt9IH0pID0+IHtcblxuICBjb25zdCB7IGluaXRpYWxfY29uZmlndXJhdGlvbiB9ID0gZm9ybVZhbHVlIHx8IHt9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBzdHlsZT17eyBwYWRkaW5nQm90dG9tOiAnMTVweCcgfX0+XG4gICAgICA8SnNvbkVkaXRvclxuICAgICAgICB2YWx1ZT17IV8uaXNFbXB0eShpbml0aWFsX2NvbmZpZ3VyYXRpb24pID8gaW5pdGlhbF9jb25maWd1cmF0aW9uIDogJyd9XG4gICAgICAgIGhlaWdodD1cIjU1dmhcIlxuICAgICAgICBvbkNoYW5nZT17dmFsdWUgPT4ge1xuICAgICAgICAgIG9uQ2hhbmdlKHtcbiAgICAgICAgICAgIC4uLmZvcm1WYWx1ZSxcbiAgICAgICAgICAgIGluaXRpYWxfY29uZmlndXJhdGlvbjogIV8uaXNFbXB0eSh2YWx1ZSkgPyB2YWx1ZSA6IG51bGxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEZWZhdWx0Q29uZmlndXJhdGlvbjsiLCJleHBvcnQgY29uc3Qgc2VjcmV0Q29sb3IgPSAodHlwZSkgPT4ge1xuICBpZiAodHlwZSA9PT0gJ2xvY2F0aW9uJykge1xuICAgIHJldHVybiAnIzVFODI2Myc7XG4gIH0gZWxzZSBpZiAodHlwZSkge1xuICAgIHJldHVybicjRDM2MTM1JztcbiAgfSBlbHNlIGlmICh0eXBlKSB7XG4gICAgcmV0dXJuICcjNTk1RDg4JztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJyMwMDAwMDAnO1xuICB9XG59OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uLCBGbGV4Ym94R3JpZCB9IGZyb20gJ3JzdWl0ZSc7XG5cbmltcG9ydCB7IFNtYWxsVGFnLCBNYXBzIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMnO1xuaW1wb3J0IHVzZVNldHRpbmdzIGZyb20gJy4uLy4uLy4uL3NyYy9ob29rcy9zZXR0aW5ncyc7XG5cbmltcG9ydCB7IHNlY3JldENvbG9yIH0gZnJvbSAnLi4vaGVscGVycy9zZWNyZXQtY29sb3InO1xuaW1wb3J0ICcuLi9zdHlsZXMvc2VjcmV0LXZpZXdlci5zY3NzJztcblxuY29uc3QgUGluUG9pbnQgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEljb25cbiAgICAgIGNsYXNzTmFtZT1cIm1hcC1tYXJrZXJcIlxuICAgICAgaWNvbj1cIm1hcC1tYXJrZXJcIlxuICAgICAgc2l6ZT1cIjJ4XCJcbiAgICAgIHN0eWxlPXt7IGNvbG9yOiAncmVkJyB9fVxuICAgIC8+XG4gICk7XG59XG5cbmNvbnN0IFNlY3JldFZpZXdlciA9ICh7IHJlY29yZCB9KSA9PiB7XG4gIGNvbnN0IHsgcGF5bG9hZCB9ID0gcmVjb3JkO1xuXG4gIGNvbnN0IGV4cGlyZURhdGUgPSBuZXcgRGF0ZShwYXlsb2FkLnNlY3JldF9kdXJhdGlvbik7XG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IGR1cmF0aW9uID0gZXhwaXJlRGF0ZS5nZXRUaW1lKCkgLSBub3cuZ2V0VGltZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJzZWNyZXQtdmlld2VyXCI+XG4gICAgICA8RmxleGJveEdyaWQganVzdGlmeT1cInNwYWNlLWJldHdlZW5cIiBzdHlsZT17eyBtYXJnaW5Ub3A6ICczMHB4JyB9fT5cbiAgICAgICAgPEZsZXhib3hHcmlkLkl0ZW0gY29sc3Bhbj17N30+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxiPlNlY3JldCBpczwvYj4gPFNtYWxsVGFnIGNvbG9yPXtzZWNyZXRDb2xvcihwYXlsb2FkLnNlY3JldF90eXBlKX0+e3BheWxvYWQuc2VjcmV0X3R5cGV9PC9TbWFsbFRhZz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7KHBheWxvYWQuc2VjcmV0X3R5cGUgPT09ICd0aW1lJyB8fCBwYXlsb2FkLnNlY3JldF90eXBlID09PSAnbG9jYXRpb24rdGltZScpICYmIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxiPlJldmVhbGVkIHdoZW48L2I+XG4gICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgIDxlbT57ZXhwaXJlRGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoKX0sIHtleHBpcmVEYXRlLnRvTG9jYWxlVGltZVN0cmluZygpfTwvZW0+XG4gICAgICAgICAgICAgIHsoZHVyYXRpb24gPiAwKSAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWNyZXQtcmV2ZWFsLWF0XCI+e01hdGgucm91bmQoZHVyYXRpb24vMTAwMC82MCl9IG1pbnV0ZXM8L2Rpdj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgeyhkdXJhdGlvbiA8IDApICYmIChcbiAgICAgICAgICAgICAgICA8ZGl2PlNlY3JldCBkYXRlIGlzIGR1ZTwvZGl2PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7cGF5bG9hZC5zZWNyZXRfYm91bnR5ICE9IG51bGwgJiYgKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPGI+SUNFIHByaWNlOjwvYj4ge3BheWxvYWQuc2VjcmV0X2JvdW50eX0gRVVSPGJyLz5cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICl9XG4gICAgICAgICAge3BheWxvYWQuc2VjcmV0X3BheW1lbnQgIT0gbnVsbCAmJiAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgICA8Yj5Vc2VyIHBhaWQgdG8gcmV2ZWFsIHRoZSBzZWNyZXQ8L2I+PGJyLz5cbiAgICAgICAgICAgICAgPGI+RW1haWw6IDwvYj4ge3BheWxvYWQuc2VjcmV0X3BheW1lbnQub3JkZXJfaW5mby5lbWFpbH08YnIgLz5cbiAgICAgICAgICAgICAgPGI+Q3VycmVuY3k6IDwvYj4ge3BheWxvYWQuc2VjcmV0X3BheW1lbnQuY3VycmVuY3l9PGJyIC8+XG4gICAgICAgICAgICAgIDxiPkFtb3VudDogPC9iPiB7KHBheWxvYWQuc2VjcmV0X3BheW1lbnQudG90YWxfYW1vdW50IC8gMTAwKS50b0ZpeGVkKDIpfTxiciAvPlxuICAgICAgICAgICAgICA8Yj5QYXltZW50IElEOiA8L2I+IHtwYXlsb2FkLnNlY3JldF9wYXltZW50LnByb3ZpZGVyX3BheW1lbnRfY2hhcmdlX2lkfTxiciAvPlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9GbGV4Ym94R3JpZC5JdGVtPlxuICAgICAgICA8RmxleGJveEdyaWQuSXRlbSBjb2xzcGFuPXs3fT5cbiAgICAgICAgICB7cGF5bG9hZC5zZWNyZXRfdXJsICE9IG51bGwgJiYgKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGI+U2VjcmV0IGltYWdlPC9iPlxuICAgICAgICAgICAgICA8aW1nIHNyYz17cGF5bG9hZC5zZWNyZXRfdXJsfSB3aWR0aD1cIjEwMCVcIi8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApfVxuICAgICAgICAgIHtwYXlsb2FkLnNlY3JldCAhPSBudWxsICYmIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxiPlNlY3JldCB0ZXh0PC9iPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRpc3BsYXktc2VjcmV0XCI+XG4gICAgICAgICAgICAgICAge3BheWxvYWQuc2VjcmV0fVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvRmxleGJveEdyaWQuSXRlbT5cbiAgICAgICAgPEZsZXhib3hHcmlkLkl0ZW0gY29sc3Bhbj17N30+XG4gICAgICAgICAge3JlY29yZC5sYXRpdHVkZSAhPSBudWxsICYmIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidWktZGV2aWNlcy1tYXBcIiBzdHlsZT17eyBoZWlnaHQ6IGAzMDBweGAgfX0+XG4gICAgICAgICAgICAgIDxNYXBzXG4gICAgICAgICAgICAgICAgZGVmYXVsdENlbnRlcj17eyBsYXQ6IHJlY29yZC5sYXRpdHVkZSwgbG5nOiByZWNvcmQubG9uZ2l0dWRlIH19XG4gICAgICAgICAgICAgICAgZGVmYXVsdFpvb209ezExfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPFBpblBvaW50IC8+XG4gICAgICAgICAgICAgIDwvTWFwcz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICl9XG4gICAgICAgICAge3JlY29yZC5sYXRpdHVkZSA9PSBudWxsICYmIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxlbT5ObyBsb2NhdGlvbiBmb3IgdGhpcyBzZWNyZXQ8L2VtPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9GbGV4Ym94R3JpZC5JdGVtPlxuICAgICAgPC9GbGV4Ym94R3JpZD5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4vKlN1cnZlcnlWaWV3ZXIucHJvcFR5cGVzID0ge1xuICByZWNvcmQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgcXVlc3Rpb246IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICB0eXBlOiBQcm9wVHlwZXMub25lT2YoWyd0ZXh0JywgJ251bWJlcicsICdtdWx0aXBsZScsICdpbWFnZSddKSxcbiAgICAgIGFuc3dlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIGRhdGE6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICAgIGFuc3dlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZ1xuICAgICAgICB9KVxuICAgICAgXSlcbiAgICB9KVxuICB9KVxufTsqL1xuXG5leHBvcnQgZGVmYXVsdCBTZWNyZXRWaWV3ZXI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNsYXNzIEltYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHRodW1iOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhlaWdodDogUHJvcFR5cGVzLm51bWJlcixcbiAgICB3aWR0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBtYXhXaWR0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBtYXhIZWlnaHQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmNcbiAgfTtcblxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHRodW1iOiBudWxsLFxuICAgIGhlaWdodDogbnVsbCxcbiAgICB3aWR0aDogbnVsbCxcbiAgICBtYXhXaWR0aDogMjAwLFxuICAgIG1heEhlaWdodDogNDAwLFxuICAgIG9uQ2xpY2s6ICgpID0+IHt9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdGh1bWIsIGhlaWdodCwgd2lkdGgsIG1heFdpZHRoLCBtYXhIZWlnaHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCByYXRpbyA9IGhlaWdodCAvIHdpZHRoO1xuICAgIGxldCBpbWFnZUhlaWdodCA9IE1hdGguZmxvb3IocmF0aW8gKiBtYXhXaWR0aCk7XG4gICAgaWYgKGltYWdlSGVpZ2h0ID4gbWF4SGVpZ2h0KSB7XG4gICAgICBpbWFnZUhlaWdodCA9IG1heEhlaWdodDtcbiAgICB9XG5cbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgIGJhY2tncm91bmRJbWFnZTogYHVybCgke3RodW1ifSlgLFxuICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICAgIHdpZHRoOiBgJHttYXhXaWR0aH1weGAsXG4gICAgICBoZWlnaHQ6IGAke2ltYWdlSGVpZ2h0fXB4YFxuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBzdHlsZT17c3R5bGV9IC8+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbWFnZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uLCBQb3BvdmVyIH0gZnJvbSAncnN1aXRlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi9pbWFnZSc7XG5cbmNvbnN0IEJhbGxvb24gPSAoeyB0b3BpYywgdHMsIGNvbnRlbnQsIG9uRGVsZXRlLCBvblpvb20sIHRodW1iLCBpbWFnZSwgd2lkdGgsIGhlaWdodCwgbWF4SGVpZ2h0LCAuLi5wcm9wcyB9KSA9PiB7XG4gIGxldCB0aHVtYkltYWdlO1xuICBpZiAoIV8uaXNFbXB0eSh0aHVtYikpIHtcbiAgICB0aHVtYkltYWdlID0gKFxuICAgICAgPEltYWdlXG4gICAgICAgIHRodW1iPXt0aHVtYn1cbiAgICAgICAgdG9waWM9e3RvcGljfVxuICAgICAgICB3aWR0aD17d2lkdGh9XG4gICAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgICBtYXhIZWlnaHQ9e21heEhlaWdodH1cbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdjbGlja2VkJyk7XG4gICAgICAgICAgb25ab29tKHsgfSlcbiAgICAgICAgfX1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFBvcG92ZXIgdGl0bGU9e3RvcGljfSB7Li4ucHJvcHN9IG9uTW91c2VMZWF2ZT17KCkgPT4ge319PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3BvdmVyLW1hcC1tYXJrZXJcIj5cbiAgICAgICAgdmFyaW9cbiAgICAgIDwvZGl2PlxuICAgIDwvUG9wb3Zlcj5cbiAgKTtcbn07XG5cbkJhbGxvb24ucHJvcFR5cGVzID0ge1xuICB0b3BpYzogUHJvcFR5cGVzLnN0cmluZyxcbiAgdGh1bWI6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGltYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjb250ZW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuICB0czogUHJvcFR5cGVzLmluc3RhbmNlT2YoRGF0ZSksXG4gIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgd2lkdGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGhlaWdodDogUHJvcFR5cGVzLm51bWJlcixcbn07XG5cbkJhbGxvb24uZGVmYXVsdFByb3BzID0ge1xuICB0b3BpYzogbnVsbCxcbiAgdGh1bWI6IG51bGwsXG4gIGltYWdlOiBudWxsLFxuICBjb250ZW50OiBudWxsLFxuICB0czogbnVsbCxcbiAgb25EZWxldGU6ICgpID0+IHt9LFxuICB3aWR0aDogbnVsbCxcbiAgaGVpZ2h0OiBudWxsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCYWxsb29uO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24sIFRvb2x0aXAsIFdoaXNwZXIsIFBvcG92ZXIgfSBmcm9tICdyc3VpdGUnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW1wb3J0IEJhbGxvb24gZnJvbSAnLi9iYWxsb29uJztcblxuY2xhc3MgUGluUG9pbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuXG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgcG9pbnQ6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICB0b3BpYzogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICB0czogUHJvcFR5cGVzLnN0cmluZ1xuICAgIH0pLmlzUmVxdWlyZWQsXG4gICAgaWNvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzaXplOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgcG9wb3ZlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0aHVtYjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpbWFnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzaG93UG9wb3ZlcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgdHlwZTogUHJvcFR5cGVzLm9uZU9mKFsnaWNvbicsICd0b29sdGlwJ10pLFxuICAgIGlua0NvbG9yOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIG1heEhlaWdodDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgaWNvbjogJ21hcC1tYXJrZXInLFxuICAgIGNvbG9yOiAnI0ZGMzMwMCcsXG4gICAgdGV4dDogbnVsbCxcbiAgICBzaXplOiAnMngnLFxuICAgIHBvcG92ZXI6IG51bGwsXG4gICAgdGh1bWI6IG51bGwsXG4gICAgaW1hZ2U6IG51bGwsXG4gICAgdHlwZTogJ2ljb24nLFxuICAgIHNob3dQb3BvdmVyOiBmYWxzZSxcbiAgICBpbmtDb2xvcjogJyNmZmZmZmYnLFxuICAgIG1heEhlaWdodDogNDgwXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLmhhbmRsZUxvYWRlZCA9IHRoaXMuaGFuZGxlTG9hZGVkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVDbGljayA9IHRoaXMuaGFuZGxlQ2xpY2suYmluZCh0aGlzKTtcblxuICAgIGNvbnN0IHsgdGh1bWIgfSA9IHByb3BzO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5lZWRQcmVsb2FkOiAhXy5pc0VtcHR5KHRodW1iKSxcbiAgICAgIHByZWxvYWQ6IGZhbHNlLFxuICAgICAgd2lkdGg6IG51bGwsXG4gICAgICBoZWlnaHQ6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgY29uc3QgeyB0eXBlLCBjb2xvcn0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKHRoaXMudG9vbHRpcCAhPSBudWxsICYmIHR5cGUgPT09ICd0b29sdGlwJykge1xuICAgICAgdGhpcy50b29sdGlwLnF1ZXJ5U2VsZWN0b3IoJy5ycy10b29sdGlwLWlubmVyJykuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3I7XG4gICAgICB0aGlzLnRvb2x0aXAucXVlcnlTZWxlY3RvcignLnJzLXRvb2x0aXAtYXJyb3cnKS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVMb2FkZWQoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgcHJlbG9hZDogZmFsc2UsXG4gICAgICB3aWR0aDogZS50YXJnZXQud2lkdGgsXG4gICAgICBoZWlnaHQ6IGUudGFyZ2V0LmhlaWdodFxuICAgIH0sICgpID0+IHRoaXMudHJpZ2dlci5zaG93KCkpO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgY29uc3QgeyB0aHVtYiB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghXy5pc0VtcHR5KHRodW1iKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IHByZWxvYWQ6IHRydWUgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50cmlnZ2VyLnNob3coKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjaGlsZHJlbiwgcG9pbnQsIHRleHQsIHR5cGUsIHBvcG92ZXIsIHNob3dQb3BvdmVyLCB0aHVtYiwgaW1hZ2UsIGlua0NvbG9yLCBtYXhIZWlnaHQsIG9uRGVsZXRlUG9pbnQsIG9uU2hvd0ltYWdlIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCB7IGljb24sIGNvbG9yLCBzaXplIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgeyBoZWlnaHQsIHdpZHRoLCBwcmVsb2FkLCBuZWVkUHJlbG9hZCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGlmIChfLmlzRW1wdHkoaWNvbikpIHtcbiAgICAgIGljb24gPSAnbWFwLW1hcmtlcic7XG4gICAgfVxuICAgIGlmIChfLmlzRW1wdHkoc2l6ZSkpIHtcbiAgICAgIHNpemUgPSAnbGcnO1xuICAgIH1cbiAgICBpZiAoXy5pc0VtcHR5KGNvbG9yKSkge1xuICAgICAgY29sb3IgPSAnI0ZGMzMwMCc7XG4gICAgfVxuICAgIGlmIChfLmlzRW1wdHkoaW5rQ29sb3IpKSB7XG4gICAgICBjb2xvciA9ICcjMDAwMDAwJztcbiAgICB9XG4gICAgY29uc3QgdHMgPSBuZXcgRGF0ZShwYXJzZUludChwb2ludC50cywgMTApKTtcblxuICAgIGxldCBjb250ZW50O1xuICAgIHN3aXRjaCh0eXBlKSB7XG4gICAgICBjYXNlICdpY29uJzpcbiAgICAgICAgY29udGVudCA9IChcbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj1cIiNcIlxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCd3cmFwcGVyLW1hcC1tYXJrZXInLCB7IHByZWxvYWQgfSl9XG4gICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5cbiAgICAgICAgICAgIHtwcmVsb2FkICYmIDxpbWcgc3JjPXt0aHVtYn0gc3R5bGU9e3tkaXNwbGF5OiAnbm9uZSd9fSBvbkxvYWQ9e3RoaXMuaGFuZGxlTG9hZGVkfSBhbHQ9XCJcIi8+fVxuICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCdtYXAtbWFya2VyJywgeyAncG9pbnRlcic6IHNob3dQb3BvdmVyIH0pfVxuICAgICAgICAgICAgICBpY29uPXtpY29ufVxuICAgICAgICAgICAgICBzaXplPXtzaXplfVxuICAgICAgICAgICAgICBzdHlsZT17eyBjb2xvciB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2E+XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9vbHRpcCc6XG4gICAgICAgIGNvbnRlbnQgPSAoXG4gICAgICAgICAgPGRpdiByZWY9e3JlZiA9PiB0aGlzLnRvb2x0aXAgPSByZWZ9IHN0eWxlPXt7IGhlaWdodDogMjAsIGJhY2tncm91bmRDb2xvcjogJyNmZjAwMDAnIH19PlxuICAgICAgICAgICAgPFRvb2x0aXAgdmlzaWJsZT48c3BhbiBzdHlsZT17eyBjb2xvcjogaW5rQ29sb3IgfX0+e3RleHR9PC9zcGFuPjwvVG9vbHRpcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBjb250ZW50ID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gaWYgc2hvdyBwb3BvdmVyLCB0aGVuIGFkZCB3aGlzcGVyIHdyYXBwZXJcbiAgICBpZiAoc2hvd1BvcG92ZXIpIHtcbiAgICAgIC8vIGlmIG5lZWQgcHJlbG9hZCBhbmQgaXMgcHJlbG9hZGluZywgdGhlbiBqdXN0IHNob3cgdGhlIG1hcmtlciBhbmQgbm90IHRoZSB3aGlzcGVyZXJcbiAgICAgIGlmIChuZWVkUHJlbG9hZCAmJiBwcmVsb2FkKSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgICAgY29uc3Qgc3BlYWtlciA9IChcbiAgICAgICAgPFBvcG92ZXIgb25Nb3VzZUxlYXZlPXsoKSA9PiB7fX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3BvdmVyLW1hcC1tYXJrZXJcIj5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Qb3BvdmVyPlxuICAgICAgKTtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxXaGlzcGVyIHRyaWdnZXI9XCJjbGlja1wiIHBsYWNlbWVudD1cInRvcFwiIHNwZWFrZXI9e3NwZWFrZXJ9IHRyaWdnZXJSZWY9e3JlZiA9PiB0aGlzLnRyaWdnZXIgPSByZWZ9PlxuICAgICAgICAgIHtjb250ZW50fVxuICAgICAgICA8L1doaXNwZXI+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQaW5Qb2ludDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgdXNlQXBvbGxvQ2xpZW50IH0gZnJvbSAncmVhY3QtYXBvbGxvJztcbmltcG9ydCB7IExvYWRlciB9IGZyb20gJ3JzdWl0ZSc7XG5cbmltcG9ydCB7IFBhZ2VDb250YWluZXIsIEJyZWFkY3J1bWJzLCBNYXBzIH0gZnJvbSAnLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMnO1xuXG5pbXBvcnQgUGluUG9pbnQgZnJvbSAnLi4vdmlld3MvcGluLXBvaW50JztcblxuY29uc3QgR0VUX0xPQ0FUSU9OX1NFQ1JFVFMgPSBncWxgXG5xdWVyeSgkd2hlcmU6IEpTT04pIHtcbiAgcmVjb3JkcyhsaW1pdDogNTAsIG9yZGVyOiBcImdlb2hhc2hcIiwgd2hlcmU6ICR3aGVyZSkge1xuICAgIGlkLFxuICAgIHN0YXR1cyxcbiAgICB0aXRsZSxcbiAgICBsYXRpdHVkZSxcbiAgICBsb25naXR1ZGUsXG4gICAgZ2VvaGFzaCxcbiAgICBwYXlsb2FkXG4gIH1cbn1gO1xuXG5jb25zdCBTZWNyZXRzTWFwID0gKCkgPT4ge1xuICBjb25zdCBbc2VjcmV0cywgc2V0U2VjcmV0c10gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBjbGllbnQgPSB1c2VBcG9sbG9DbGllbnQoKTtcblxuICBsZXQgbWFya2VycyA9IChzZWNyZXRzIHx8IFtdKVxuICAgIC5maWx0ZXIoc2VjcmV0ID0+IHNlY3JldC5sYXRpdHVkZSAhPSBudWxsICYmIHNlY3JldC5sb25naXR1ZGUgIT0gbnVsbClcbiAgICAubWFwKHNlY3JldCA9PiAoXG4gICAgICA8UGluUG9pbnRcbiAgICAgICAga2V5PXtzZWNyZXQuaWR9XG4gICAgICAgIGxhdD17c2VjcmV0LmxhdGl0dWRlfVxuICAgICAgICBsbmc9e3NlY3JldC5sb25naXR1ZGV9XG4gICAgICAgIHBvaW50PXt7fX1cbiAgICAgICAgcG9wb3Zlcj17c2VjcmV0LnRpdGxlfVxuICAgICAgICBzaG93UG9wb3Zlcj17dHJ1ZX1cbiAgICAgID5cbiAgICAgICAgPGRpdiBzdHlsZT17e21pbkhlaWdodDogJzEyMHB4J319PjxzdHJvbmc+e3NlY3JldC50aXRsZX08L3N0cm9uZz5cbiAgICAgICAge3NlY3JldC5wYXlsb2FkLnNlY3JldF91cmwgIT0gbnVsbCAmJiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgYmFja2dyb3VuZEltYWdlOiBgdXJsKCR7c2VjcmV0LnBheWxvYWQuc2VjcmV0X3VybH0pYCxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgbWluV2lkdGg6ICcxMjBweCcsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRSZXBlYXQ6ICduby1yZXBlYXQnLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogJ2NvbnRhaW4nLFxuICAgICAgICAgICAgICBoZWlnaHQ6IGAxMjBweGBcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgICAge3NlY3JldC5wYXlsb2FkLnNlY3JldCAhPSBudWxsICYmIChcbiAgICAgICAgICA8ZGl2PntzZWNyZXQucGF5bG9hZC5zZWNyZXR9PC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIDxMaW5rIHRvPXtgL3JlY29yZC8ke3NlY3JldC5pZH1gfT52aWV3PC9MaW5rPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvUGluUG9pbnQ+XG4gICAgKSk7XG5cbiAgcmV0dXJuIChcbiAgICA8UGFnZUNvbnRhaW5lciBjbGFzc05hbWU9XCJteS1wYWdlXCI+XG4gICAgICA8QnJlYWRjcnVtYnMgcGFnZXM9e1snU2VjcmV0IGxvY2F0aW9ucyddfS8+XG4gICAgICA8ZGl2IHN0eWxlPXt7IHdpZHRoOiAnMTAwJScsIGhlaWdodDogJzQ1MHB4JywgcG9zaXRpb246ICdyZWxhdGl2ZScgfX0+XG4gICAgICAgIHtsb2FkaW5nICYmIChcbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7IHBvc2l0aW9uOiAnYWJzb2x1dGUnLCB0b3A6ICcyMHB4JywgbGVmdDogJzIwcHgnLCB6SW5kZXg6IDEwMDAwMDAwIH19PlxuICAgICAgICAgICAgPExvYWRlciBzaXplPVwibWRcIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICA8TWFwc1xuICAgICAgICAgIGRlZmF1bHRDZW50ZXI9e3sgbGF0OiA0NS40ODU0NzM5LCBsbmc6IDkuMjAyMjE3NiB9fVxuICAgICAgICAgIGRlZmF1bHRab29tPXsxMX1cbiAgICAgICAgICBoZWlnaHQ9ezQ1MH1cbiAgICAgICAgICBvbkNoYW5nZT17YXN5bmMgKHsgYm91bmRzIH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgc2UsIG53IH0gPSBib3VuZHM7XG4gICAgICAgICAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgICAgICAgICAgY29uc3QgeyBkYXRhOiB7IHJlY29yZHMgfX0gPSBhd2FpdCBjbGllbnQucXVlcnkoe1xuICAgICAgICAgICAgICBxdWVyeTogR0VUX0xPQ0FUSU9OX1NFQ1JFVFMsXG4gICAgICAgICAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICAgICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgICAgICAgICBsYXRpdHVkZTogeyAnZ3RlJzogc2UubGF0LCAnbHRlJzogbncubGF0IH0sXG4gICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IHsgJ2d0ZSc6IG53LmxuZywgJ2x0ZSc6IHNlLmxuZyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBmZXRjaFBvbGljeTogJ25ldHdvcmstb25seSdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2V0U2VjcmV0cyhyZWNvcmRzKTtcbiAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7bWFya2Vyc31cbiAgICAgICAgPC9NYXBzPlxuICAgICAgPC9kaXY+XG4gICAgPC9QYWdlQ29udGFpbmVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VjcmV0c01hcDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBwbHVnIH0gZnJvbSAnY29kZS1wbHVnJztcblxuaW1wb3J0IHsgVXNlclJlY29yZHMsIFNtYWxsVGFnLCB3aXRoQ29uZmlndXJhdGlvblBhZ2UsIEhlbHBFbGVtZW50cyB9IGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzJztcbmltcG9ydCBTZWNyZXRWaWV3ZXIgZnJvbSAnLi92aWV3cy9zZWNyZXQtdmlld2VyJztcbmltcG9ydCB7IHNlY3JldENvbG9yIH0gZnJvbSAnLi9oZWxwZXJzL3NlY3JldC1jb2xvcic7XG5pbXBvcnQgU2VjcmV0c01hcCBmcm9tICcuL3BhZ2VzL3NlY3JldC1tYXAnO1xuaW1wb3J0IENvbmZpZ3VyYXRpb25Gb3JtIGZyb20gJy4vdmlld3MvY29uZmlndXJhdGlvbic7XG5cbmNvbnN0IHsgTm9kZVJlZE5vZGUsIFNsdWdIZWxwLCBUeXBlQ29tbWFuZCB9ID0gSGVscEVsZW1lbnRzO1xuXG5wbHVnKCdzaWRlYmFyJywgbnVsbCwge1xuICBpZDogJ3dpZ2dsZScsXG4gIGxhYmVsOiAnUGFub3B0aWNvbicsXG4gIGljb246ICdsb2dvLXN1cnZleScsXG4gIHBlcm1pc3Npb246ICd3aWdnbGUudmlldycsXG4gIG9wdGlvbnM6IFtcbiAgICB7XG4gICAgICBpZDogJ3dpZ2dsZS1zZWNyZXRzJyxcbiAgICAgIGxhYmVsOiAnU2VjcmV0cycsXG4gICAgICB1cmw6ICcvc2VjcmV0cycsXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ3dpZ2dsZS1zZWNyZXRzLW1hcCcsXG4gICAgICBsYWJlbDogJ1NlY3JldHMgTWFwJyxcbiAgICAgIHVybDogJy9zZWNyZXRzLW1hcCcsXG4gICAgfVxuICBdXG59KTtcbi8vIHJlZ2lzdGVyIGEgcGFnZSBtYXAgZm9yIGFsbCBzZWNyZXRzXG5wbHVnKCdwYWdlcycsIFNlY3JldHNNYXAsIHtcbiAgdXJsOiAnL3NlY3JldHMtbWFwJyxcbiAgdGl0bGU6ICdTZWNyZXRzIE1hcCcsXG4gIGlkOiAnc2VjcmV0cy1tYXBzJyxcblxuICBwZXJtaXNzaW9uOiAnd2lnZ2xlLnZpZXcnLFxuICBicmVhZGNydW1iczogWydTZWNyZXRzIE1hcCddXG59KTtcblxuLy8gcmVnaXN0ZXIgYSBwYWdlIGZvciB1c2VyIHJlY29yZHMgb2YgdHlwZSBzdXJ2ZXlcbnBsdWcoJ3BhZ2VzJywgVXNlclJlY29yZHMsIHtcbiAgdXJsOiAnL3NlY3JldHMnLFxuICB0aXRsZTogJ1NlY3JldHMnLFxuICBpZDogJ3NlY3JldHMnLFxuICB0eXBlOiAnc2VjcmV0JyxcbiAgcGVybWlzc2lvbjogJ3dpZ2dsZS52aWV3JyxcbiAgYnJlYWRjcnVtYnM6IFsnU2VjcmV0cyddLFxuICBsYWJlbHM6IHtcbiAgICB0aXRsZTogJ05hbWUnLFxuICAgIHJlY29yZDogJ3NlY3JldCdcbiAgfSxcbiAgY29sdW1uczogW1xuICAgIHtcbiAgICAgIGlkOiAnc2VjcmV0LXR5cGUnLFxuICAgICAgbGFiZWw6ICdUeXBlJyxcbiAgICAgIHdpZHRoOiAxMjAsXG4gICAgICBjZWxsOiAoeyBwYXlsb2FkIH0pID0+IChcbiAgICAgICAgPFNtYWxsVGFnIGNvbG9yPXtzZWNyZXRDb2xvcihwYXlsb2FkLnNlY3JldF90eXBlKX0+e3BheWxvYWQuc2VjcmV0X3R5cGV9PC9TbWFsbFRhZz5cbiAgICAgIClcbiAgICB9XG4gIF1cbn0pO1xuLy8gcmVnaXN0ZXIgcGVybWlzc2lvbnNcbnBsdWcoXG4gICdwZXJtaXNzaW9ucycsXG4gIG51bGwsXG4gIHtcbiAgICBwZXJtaXNzaW9uOiAnd2lnZ2xlLnZpZXcnLFxuICAgIG5hbWU6ICdWaWV3IFBhbm9wdGljb24gc2VjcmV0JyxcbiAgICBkZXNjcmlwdGlvbjogYFZpZXcgc2VjcmV0cyBzdG9yZWQgaW4gUGFub3B0aWNvbiBCb3RgLFxuICAgIGdyb3VwOiAnUGFub3B0aWNvbidcbiAgfVxuKTtcbi8vIHJlZ2lzdGVyIHVzZXIgcmVjb3JkIHR5cGVcbnBsdWcoXG4gICd1c2VyLXJlY29yZC10eXBlcycsXG4gIG51bGwsXG4gIHtcbiAgICB0eXBlOiAnc2VjcmV0JyxcbiAgICBuYW1lOiAnU2VjcmV0JyxcbiAgICBsaXN0OiBgU2VjcmV0c2AsXG4gICAgZGVzY3JpcHRpb246ICdMaXN0IG9mIFBhbm9wdGljb24gc2VjcmV0cycsXG4gICAgZm9ybTogU2VjcmV0Vmlld2VyLFxuICAgIHN0YXR1czogW1xuICAgICAgeyB2YWx1ZTogJ3ByaXZhdGUnLCBsYWJlbDogJ1ByaXZhdGUnIH0sXG4gICAgICB7IHZhbHVlOiAncHVibGljJywgbGFiZWw6ICdQdWJsaWMnIH0sXG4gICAgICB7IHZhbHVlOiAnY3JhenknLCBsYWJlbDogJ0NyYXp5JyB9LFxuICAgICAgeyB2YWx1ZTogJ2tleWhvbGRlci1mcmVlJywgbGFiZWw6ICdLZXlob2xkZXIgZnJlZScgfSxcbiAgICAgIHsgdmFsdWU6ICdrZXlob2xkZXItdGFrZW4nLCBsYWJlbDogJ0tleWhvbGRlciB0YWtlbicgfVxuICAgIF1cbiAgfVxuKTtcblxuY29uc3QgTGVnZW5kID0gKCkgPT4gKFxuICA8ZGl2PlxuICAgIDxwPkNvbmZpZ3VyZSBzb21lIDxpPlBhbm9wdGljb248L2k+IHBhcmFtZXRlcnM8L3A+XG5cbiAgPC9kaXY+XG4pO1xuXG5cblxucGx1Zygnc2lkZWJhcicsIG51bGwsIHtcbiAgaWQ6ICdjb25maWd1cmF0aW9uJyxcbiAgbGFiZWw6ICdDb25maWd1cmF0aW9uJyxcbiAgcGVybWlzc2lvbjogJ2NvbmZpZ3VyZScsXG4gIGljb246ICdjb2cnLFxuICBvcHRpb25zOiBbXG4gICAge1xuICAgICAgaWQ6ICdwYW5vcHRpY29uJyxcbiAgICAgIGxhYmVsOiAnUGFub3B0aWNvbicsXG4gICAgICB1cmw6ICcvY29uZmlndXJhdGlvbi1wYW5vcHRpY29uJyxcbiAgICB9XG4gIF1cbn0pO1xucGx1ZyhcbiAgJ3BhZ2VzJyxcbiAgd2l0aENvbmZpZ3VyYXRpb25QYWdlKFxuICAgICdwYW5vcHRpY29uJyxcbiAgICBDb25maWd1cmF0aW9uRm9ybSxcbiAgICB7IExlZ2VuZCwgdGl0bGU6ICdQYW5vcHRpY29uJyB9XG4gICksXG4gIHtcbiAgICBwZXJtaXNzaW9uOiAnY29uZmlndXJlJyxcbiAgICB1cmw6ICcvY29uZmlndXJhdGlvbi1wYW5vcHRpY29uJyxcbiAgICB0aXRsZTogJ0NvbmZpZ3VyZSBQYW5vcHRpY29uJyxcbiAgICBpZDogJ2NvbmZpZ3VyYXRpb24tcGFub3B0aWNvbidcbiAgfVxuKTtcblxuXG5cbi8vIHJlZ2lzdGVyIGJ1dHRvbiBpbiB0aGUgdXNlciBtb2RhbCB0byByZWRpcmVjdCB0byBzdXJ2ZXkgbGlzdHNcbi8qcGx1ZyhcbiAgJ3VzZXItYnV0dG9uJyxcbiAgR29Ub1N1cnZleUJ1dHRvblxuKTsqL1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnV0dG9uLCBGb3JtLCBGb3JtQ29udHJvbCwgQnV0dG9uVG9vbGJhciwgRm9ybUdyb3VwLCBDb250cm9sTGFiZWwsIEhlbHBCbG9jaywgTmF2IH0gZnJvbSAncnN1aXRlJztcblxuaW1wb3J0IHsgQ29udGVudEF1dG9jb21wbGV0ZSwgQ29sbGVjdGlvbkVkaXRvciwgRGljdGlvbmFyeSwgQ29uZmlkZW5jZSB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzJztcblxuXG5cblxuXG5cblxuXG5leHBvcnQgZGVmYXVsdCAoe1xuICB2YWx1ZSxcbiAgb25TdWJtaXQgPSAoKSA9PiB7IH0sXG4gIGRpc2FibGVkID0gZmFsc2Vcbn0pID0+IHtcbiAgY29uc3QgW2Zvcm1WYWx1ZSwgc2V0Rm9ybVZhbHVlXSA9IHVzZVN0YXRlKHZhbHVlKTtcbiAgY29uc3QgW2Zvcm1FcnJvciwgc2V0Rm9ybUVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIGNvbnN0IGZvcm0gPSB1c2VSZWYobnVsbCk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2PlxuICAgICAgPEZvcm1cbiAgICAgICAgZGlzYWJsZWQ9e3RydWV9XG4gICAgICAgIGZvcm1WYWx1ZT17Zm9ybVZhbHVlfVxuICAgICAgICBmb3JtRXJyb3I9e2Zvcm1FcnJvcn1cbiAgICAgICAgcmVmPXtmb3JtfVxuICAgICAgICBjaGVja1RyaWdnZXI9XCJub25lXCJcbiAgICAgICAgbGF5b3V0PVwidmVydGljYWxcIlxuICAgICAgICBmbHVpZFxuICAgICAgICBvbkNoYW5nZT17Zm9ybVZhbHVlID0+IHtcbiAgICAgICAgICBzZXRGb3JtVmFsdWUoZm9ybVZhbHVlKTtcbiAgICAgICAgICBzZXRGb3JtRXJyb3IobnVsbCk7XG4gICAgICAgIH19XG4gICAgICAgIG9uQ2hlY2s9e2Vycm9ycyA9PiB7XG4gICAgICAgICAgc2V0Rm9ybUVycm9yKGVycm9ycyk7XG4gICAgICAgIH19XG4gICAgICA+XG5cblxuICAgICAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxDb250cm9sTGFiZWw+Q29udGVudDwvQ29udHJvbExhYmVsPlxuICAgICAgICAgICAgICA8Rm9ybUNvbnRyb2xcbiAgICAgICAgICAgICAgICB1c2VTbHVnPXt0cnVlfVxuICAgICAgICAgICAgICAgIHJlYWRPbmx5PXtkaXNhYmxlZH1cbiAgICAgICAgICAgICAgICBuYW1lPVwiY29udGVudFwiXG4gICAgICAgICAgICAgICAgYWNjZXB0ZXI9e0NvbnRlbnRBdXRvY29tcGxldGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDxIZWxwQmxvY2s+XG4gICAgICAgICAgICAgICAgU2VsZWN0IGEgPGVtPnNsdWc8L2VtPiBmb3IgYSBtdWx0aS1sYW5ndWFnZSBjb250ZW50IHRvIHNob3cgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB3aGVuIGEgdXNlciByZXF1ZXN0c1xuICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uIGFib3V0IG9wZW5pbmcgaG91cnNcbiAgICAgICAgICAgICAgPC9IZWxwQmxvY2s+XG4gICAgICAgICAgICA8L0Zvcm1Hcm91cD5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxDb250cm9sTGFiZWw+U2Vuc2l0aXZpdHk8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICAgIG5hbWU9XCJ0aHJlc2hvbGRcIlxuICAgICAgICAgICAgICAgIGFjY2VwdGVyPXtDb25maWRlbmNlfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8SGVscEJsb2NrPlxuICAgICAgICAgICAgICAgIFRoZSBtaW5pbXVtIHNjb3JlIG9mIGFuIGludGVudCB0byBiZSBjb25zaWRlcmVkIHJlbGV2YW50LiBMb3dlciB0aGlzIHZhbHVlIGlmIHRoZSBOTFAgZG9lc24ndCBjYXRjaCBhbnkgaW50ZW50IG9mIHRoZSB1c2VyIGlucHV0LFxuICAgICAgICAgICAgICAgIHJhaXNlIHRoaXMgdmFsdWUgaWYgdGhlIE5MUCBvZiB0aGlzIGJsb2NrIGlzIGludGVyZmVyaW5nIHdpdGggdGhlIE5MUCBvZiBvdGhlciBibG9ja3MuXG4gICAgICAgICAgICAgIDwvSGVscEJsb2NrPlxuICAgICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgICAgPC9GcmFnbWVudD5cblxuICAgICAgICA8Rm9ybUdyb3VwIHN0eWxlPXt7IG1hcmdpblRvcDogJzQwcHgnIH19PlxuICAgICAgICAgIDxCdXR0b25Ub29sYmFyPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZm9ybS5jdXJyZW50LmNoZWNrKCkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25TdWJtaXQoZm9ybVZhbHVlKTtcbiAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgIFNhdmUgY29uZmlndXJhdGlvblxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkfVxuICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwiZGVmYXVsdFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlybSgnUmVzZXQgY29uZmlndXJhdGlvbj8nKSkge1xuICAgICAgICAgICAgICAgICAgc2V0Rm9ybVZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFJlc2V0XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L0J1dHRvblRvb2xiYXI+XG4gICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgPC9Gb3JtPlxuICAgIDwvZGl2PlxuICApO1xufTsiLCJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5leHBvcnQgZGVmYXVsdCB1c2VyID0+IHtcbiAgaWYgKCFfLmlzRW1wdHkodXNlci5maXJzdF9uYW1lKSB8fCAhXy5pc0VtcHR5KHVzZXIubGFzdF9uYW1lKSkge1xuICAgIHJldHVybiBbdXNlci5maXJzdF9uYW1lLCB1c2VyLmxhc3RfbmFtZV0uZmlsdGVyKHMgPT4gIV8uaXNFbXB0eShzKSkuam9pbignICcpO1xuICB9IGVsc2UgaWYgKCFfLmlzRW1wdHkodXNlcm5hbWUpKSB7XG4gICAgcmV0dXJuIHVzZXIudXNlcm5hbWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGBBbm9ueW1vdXMgKGlkOiB7aWR9KWA7XG4gIH1cbn07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZvcm1Db250cm9sLCBGb3JtLCBGb3JtR3JvdXAsIENvbnRyb2xMYWJlbCwgRmxleGJveEdyaWQsIEhlbHBCbG9jayB9IGZyb20gJ3JzdWl0ZSc7XG5cbmltcG9ydCB1c2VHbG9iYWxzIGZyb20gJy4uLy4uLy4uL3NyYy9ob29rcy9nbG9iYWxzJztcbmltcG9ydCB7IFVzZXJBdXRvY29tcGxldGUsIFNlbGVjdFRyYW5zcG9ydCB9IGZyb20gJy4uLy4uLy4uL3NyYy9jb21wb25lbnRzJztcblxuY29uc3QgaGFzQ2hhdGJvdCA9IChhY3RpdmVDaGF0Ym90cywgdHJhbnNwb3J0KSA9PiBhY3RpdmVDaGF0Ym90cy5zb21lKGNoYXRib3QgPT4gY2hhdGJvdC50cmFuc3BvcnQgPT09IHRyYW5zcG9ydCk7XG5cbmNvbnN0IFNlbmRNZXNzYWdlRm9ybSA9ICh7XG4gIHZhbHVlOiBmb3JtVmFsdWUsXG4gIHZhbGlkYXRpb24sXG4gIG9uQ2hhbmdlID0gKCkgPT4ge30sXG4gIG9uU3VibWl0ID0gKCkgPT4ge31cbn0pID0+IHtcbiAgY29uc3QgeyBhY3RpdmVDaGF0Ym90cyB9ID0gdXNlR2xvYmFscygpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxGb3JtIGZsdWlkIGZvcm1WYWx1ZT17Zm9ybVZhbHVlfSBvbkNoYW5nZT17b25DaGFuZ2V9IGZvcm1FcnJvcj17dmFsaWRhdGlvbn0+XG4gICAgICAgIDxGbGV4Ym94R3JpZCBqdXN0aWZ5PVwic3BhY2UtYmV0d2VlblwiPlxuICAgICAgICAgIDxGbGV4Ym94R3JpZC5JdGVtIGNvbHNwYW49ezE1fT5cbiAgICAgICAgICAgIDxGb3JtR3JvdXA+XG4gICAgICAgICAgICAgIDxDb250cm9sTGFiZWw+UmVjaXBpZW50PC9Db250cm9sTGFiZWw+XG4gICAgICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgICAgIG5hbWU9XCJyZWNpcGllbnRcIlxuICAgICAgICAgICAgICAgIGFjY2VwdGVyPXtVc2VyQXV0b2NvbXBsZXRlfVxuICAgICAgICAgICAgICAgIGNsZWFuYWJsZT17dHJ1ZX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dXNlciA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAodXNlciAhPSBudWxsICYmIF8uaXNBcnJheSh1c2VyLmNoYXRJZHMpICYmICFfLmlzRW1wdHkodXNlci5jaGF0SWRzKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzZWxlY3QgdGhlIGZpcnN0IGNoYXRJZCB3aXRoIGFuIGF2YWlsYWJsZSBhY3RpdmUgY2hhdGJvdFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gdXNlci5jaGF0SWRzLmZpbmQoY2hhdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhc0NoYXRib3QoYWN0aXZlQ2hhdGJvdHMsIGNoYXQudHJhbnNwb3J0KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5mb3JtVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGF0SWQ6IGl0ZW0uY2hhdElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcklkOiB1c2VyLnVzZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2lwaWVudDogdXNlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdE5vZGU6IGFjdGl2ZUNoYXRib3RzLmZpbmQoY2hhdGJvdCA9PiBjaGF0Ym90LnRyYW5zcG9ydCA9PT0gaXRlbS50cmFuc3BvcnQpLm5vZGVJZFxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgIDwvRmxleGJveEdyaWQuSXRlbT5cbiAgICAgICAgICA8RmxleGJveEdyaWQuSXRlbSBjb2xzcGFuPXs4fT5cbiAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgICA8Q29udHJvbExhYmVsPlxuICAgICAgICAgICAgICAgIFRyYW5zcG9ydFxuICAgICAgICAgICAgICAgIDxIZWxwQmxvY2sgdG9vbHRpcD5TaG93cyBvbmx5IHBsYXRmb3JtcyBmb3Igd2hpY2ggdGhlIHNlbGVjdGVkIHVzZXJzIGhhcyBhIHZhbGlkIDxlbT5jaGF0SWQ8L2VtPjwvSGVscEJsb2NrPlxuICAgICAgICAgICAgICA8L0NvbnRyb2xMYWJlbD5cbiAgICAgICAgICAgICAgPEZvcm1Db250cm9sXG4gICAgICAgICAgICAgICAgbmFtZT1cImJvdE5vZGVcIlxuICAgICAgICAgICAgICAgIGFjY2VwdGVyPXtTZWxlY3RUcmFuc3BvcnR9XG4gICAgICAgICAgICAgICAgdHJhbnNwb3J0cz17Zm9ybVZhbHVlLnJlY2lwaWVudCAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgIGZvcm1WYWx1ZS5yZWNpcGllbnQuY2hhdElkcy5tYXAoaXRlbSA9PiBpdGVtLnRyYW5zcG9ydClcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17Zm9ybVZhbHVlLnJlY2lwaWVudCA9PSBudWxsfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtub2RlSWQgPT4ge1xuICAgICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgcmlnaHRcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZUNoYXRCb3QgPSBhY3RpdmVDaGF0Ym90cy5maW5kKGl0ZW0gPT4gaXRlbS5ub2RlSWQgPT09IG5vZGVJZCk7XG4gICAgICAgICAgICAgICAgICBpZiAoYWN0aXZlQ2hhdEJvdCAhPSBudWxsICYmIGZvcm1WYWx1ZS5yZWNpcGllbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByb3cgPSBmb3JtVmFsdWUucmVjaXBpZW50LmNoYXRJZHMuZmluZChpdGVtID0+IGl0ZW0udHJhbnNwb3J0ID09PSBhY3RpdmVDaGF0Qm90LnRyYW5zcG9ydCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3cgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlKHsgLi4uZm9ybVZhbHVlLCBjaGF0SWQ6IHJvdy5jaGF0SWQsIGJvdE5vZGU6IG5vZGVJZCB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgYmxvY2tcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgICAgIDwvRmxleGJveEdyaWQuSXRlbT5cbiAgICAgICAgPC9GbGV4Ym94R3JpZD5cbiAgICAgICAgPEZvcm1Hcm91cCBzdHlsZT17eyBtYXJnaW5Ub3A6ICcxNXB4JyB9fT5cbiAgICAgICAgICA8Q29udHJvbExhYmVsPk1lc3NhZ2UgdG8gc2VuZDwvQ29udHJvbExhYmVsPlxuICAgICAgICAgIDxGb3JtQ29udHJvbFxuICAgICAgICAgICAgbmFtZT1cIm1lc3NhZ2VcIlxuICAgICAgICAgICAgY29tcG9uZW50Q2xhc3M9XCJ0ZXh0YXJlYVwiXG4gICAgICAgICAgICBzdHlsZT17eyBoZWlnaHQ6ICcxMDAlJyB9fVxuICAgICAgICAgICAgb25LZXlVcD17ZXZlbnQgPT4ge1xuICAgICAgICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkgJiYgZXZlbnQua2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgICAgICAgICAgICBvblN1Ym1pdCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvRm9ybUdyb3VwPlxuICAgICAgPC9Gb3JtPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VuZE1lc3NhZ2VGb3JtO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJ1dHRvbiwgTm90aWZpY2F0aW9uLCBTY2hlbWEgfSBmcm9tICdyc3VpdGUnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgTW9kYWwgfSBmcm9tICcuLi8uLi8uLi9zcmMvY29tcG9uZW50cyc7XG5pbXBvcnQgdXNlU29ja2V0IGZyb20gJy4uLy4uLy4uL3NyYy9ob29rcy9zb2NrZXQnO1xuaW1wb3J0IHVzZUdsb2JhbHMgZnJvbSAnLi4vLi4vLi4vc3JjL2hvb2tzL2dsb2JhbHMnO1xuaW1wb3J0IG5hbWUgZnJvbSAnLi4vLi4vLi4vc3JjL2hlbHBlcnMvdXNlci9yZWFkYWJsZS1uYW1lJztcblxuY29uc3QgeyB1c2VNb2RhbCB9ID0gTW9kYWw7XG5pbXBvcnQgU2VuZE1lc3NhZ2VGb3JtIGZyb20gJy4vc2VuZC1mb3JtJztcblxuY29uc3QgaXNWYWxpZE1lc3NhZ2UgPSB2YWx1ZSA9PiB2YWx1ZS5yZWNpcGllbnQgIT0gbnVsbCAmJiB2YWx1ZS5jaGF0SWQgICE9IG51bGwgJiYgdmFsdWUuYm90Tm9kZSAhPSBudWxsICYmICFfLmlzRW1wdHkodmFsdWUubWVzc2FnZSk7XG5cbmNvbnN0IHsgU3RyaW5nVHlwZSwgT2JqZWN0VHlwZSB9ID0gU2NoZW1hLlR5cGVzO1xuY29uc3QgbWVzc2FnZU1vZGVsID0gU2NoZW1hLk1vZGVsKHtcbiAgcmVjaXBpZW50OiBPYmplY3RUeXBlKClcbiAgICAuaXNSZXF1aXJlZCgnU2VsZWN0IHJlY2lwaWVudCcpLFxuICBib3ROb2RlOiBTdHJpbmdUeXBlKClcbiAgICAuaXNSZXF1aXJlZCgnU2VsZWN0IGNoYXRib3QgcGxhdG9mb3JtJyksXG4gIG1lc3NhZ2U6IFN0cmluZ1R5cGUoKVxuICAgIC5pc1JlcXVpcmVkKCdFbnRlciBtZXNzYWdlIGZvciB0aGUgdXNlcicpXG59KTtcblxuXG5jb25zdCBTZW5kTWVzc2FnZUJ1dHRvbiA9ICh7IHVzZXIsIGFwcGVhcmFuY2UgPSAnZ2hvc3QnLCB0cmFuc3BvcnQgfSkgPT4ge1xuICBjb25zdCB7IHNlbmRUb0lucHV0IH0gPSB1c2VTb2NrZXQoKTtcbiAgY29uc3QgeyBhY3RpdmVDaGF0Ym90cyB9ID0gdXNlR2xvYmFscygpO1xuICBjb25zdCB7IG9wZW4sIGNsb3NlLCB2YWxpZGF0ZSwgZXJyb3IsIGRpc2FibGUsIG9wZW5XaXRoTW9kZWwsIG9wZW5XaXRoIH0gPSB1c2VNb2RhbCh7XG4gICAgdmlldzogU2VuZE1lc3NhZ2VGb3JtLFxuICAgIHRpdGxlOiAnU2VuZCBtZXNzYWdlJyxcbiAgICBsYWJlbFN1Ym1pdDogJ1NlbmQgbWVzc2FnZScsXG4gICAgc2l6ZTogJ3NtJyxcbiAgICAvL2VuYWJsZVN1bW1pdDogaXNWYWxpZE1lc3NhZ2VcbiAgfSk7XG5cbiAgbGV0IGJvdE5vZGU7XG4gIGxldCBjaGF0SWQ7XG4gIGlmICghXy5pc0VtcHR5KHRyYW5zcG9ydCkpIHtcbiAgICAvLyBUT0RPIHByZWRlZmluZSB0cmFuc3BvcnQgaWYgbmVlZGVkXG4gICAgY29uc3QgaGFzQ2hhdElkID0gdXNlci5jaGF0SWRzLnNvbWUoaXRlbSA9PiBpdGVtLnRyYW5zcG9ydCA9PT0gdHJhbnNwb3J0KTtcblxuICAgIGlmIChoYXNDaGF0SWQpIHtcbiAgICAgIGNvbnN0IGNoYXRCb3QgPSBhY3RpdmVDaGF0Ym90cy5maW5kKGNoYXRCb3QgPT4gY2hhdEJvdC50cmFuc3BvcnQgPT09IHRyYW5zcG9ydCk7XG4gICAgICBjb25zb2xlLmxvZygnY2hhdEJvdCcsIGNoYXRCb3QsIGFjdGl2ZUNoYXRib3RzLCB0cmFuc3BvcnQpXG4gICAgICBpZiAoY2hhdEJvdCAhPSBudWxsKSB7XG4gICAgICAgIGJvdE5vZGUgPSBjaGF0Qm90Lm5vZGVJZDtcbiAgICAgICAgY2hhdElkID0gdXNlci5jaGF0SWRzLmZpbmQoaXRlbSA9PiBpdGVtLnRyYW5zcG9ydCA9PT0gdHJhbnNwb3J0KS5jaGF0SWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuICByZXR1cm4gKFxuICAgIDxCdXR0b25cbiAgICAgIGFwcGVhcmFuY2U9e2FwcGVhcmFuY2V9XG4gICAgICBvbkNsaWNrPXthc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCBtc2cgPSB7IHJlY2lwaWVudDogdXNlciwgYm90Tm9kZSwgY2hhdElkLCBtZXNzYWdlOiAnJyB9O1xuXG4gICAgICAgIC8vbXNnID0gYXdhaXQgb3BlbldpdGhNb2RlbChtc2csIG1lc3NhZ2VNb2RlbCk7XG4gICAgICAgIG1zZyA9IGF3YWl0IG9wZW5XaXRoKG1zZywgaXNWYWxpZE1lc3NhZ2UpO1xuICAgICAgICBpZiAobXNnKSB7XG4gICAgICAgICAgc2VuZFRvSW5wdXQoJ21lc3NhZ2Uuc2VuZCcsIG1zZyk7XG4gICAgICAgICAgTm90aWZpY2F0aW9uLnN1Y2Nlc3Moe1xuICAgICAgICAgICAgdGl0bGU6ICdNZXNzYWdlIHNlbnQnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGBNZXNzYWdlIHNlbnQgc3VjY2Vzc2Z1bGx5IHRvIFwiJHtuYW1lKG1zZy5yZWNpcGllbnQpfVwiYFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9fVxuICAgID5Db250YWN0IFVzZXI8L0J1dHRvbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNlbmRNZXNzYWdlQnV0dG9uOyIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJ1dHRvbiwgQnV0dG9uVG9vbGJhciwgRm9ybUdyb3VwIH0gZnJvbSAncnN1aXRlJztcbmltcG9ydCB7IHBsdWcgfSBmcm9tICdjb2RlLXBsdWcnO1xuXG5pbXBvcnQgeyBQYW5lbCB9IGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzJztcbmltcG9ydCB7IFdpZGdldEZvcm0gYXMgV2lkZ2V0cyB9IGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzJztcbmltcG9ydCB1c2VTb2NrZXQgZnJvbSAnLi4vLi4vc3JjL2hvb2tzL3NvY2tldCc7XG5cbmltcG9ydCBTZW5kTWVzc2FnZUJ1dHRvbiBmcm9tICcuL3ZpZXdzL3NlbmQtbWVzc2FnZS1idXR0b24nO1xuaW1wb3J0ICcuL3dpZGdldC1zZW5kLnNjc3MnO1xuaW1wb3J0IFNlbmRGb3JtIGZyb20gJy4vdmlld3Mvc2VuZC1mb3JtJztcblxuY29uc3QgeyBXaWRnZXRGb3JtLCBDb250ZW50LCBGb290ZXIgfSA9IFdpZGdldHM7XG5cblxuY29uc3QgU2VuZE1lc3NhZ2VXaWRnZXQgPSAoeyBzdGF0cyB9KSA9PiB7XG4gIGNvbnN0IFtmb3JtVmFsdWUsIHNldEZvcm1WYWx1ZV0gPSB1c2VTdGF0ZSh7IG1lc3NhZ2U6ICcnIH0pO1xuICBjb25zdCBjYW5TZW5kID0gIV8uaXNFbXB0eShmb3JtVmFsdWUuY2hhdElkKSAmJiAhXy5pc0VtcHR5KGZvcm1WYWx1ZS5ib3ROb2RlKTtcbiAgY29uc3QgeyBzZW5kVG9JbnB1dCB9ID0gdXNlU29ja2V0KCk7XG5cbiAgcmV0dXJuIChcbiAgICA8UGFuZWwgdGl0bGU9XCJTZW5kIE1lc3NhZ2VcIiBjbGFzc05hbWU9XCJ3aWRnZXQtc2VuZC1tZXNzYWdlXCI+XG4gICAgICA8V2lkZ2V0Rm9ybSBmbHVpZCBmb3JtVmFsdWU9e2Zvcm1WYWx1ZX0gb25DaGFuZ2U9e2Zvcm1WYWx1ZSA9PiBzZXRGb3JtVmFsdWUoZm9ybVZhbHVlKX0+XG4gICAgICAgIDxDb250ZW50PlxuICAgICAgICAgIDxTZW5kRm9ybVxuICAgICAgICAgICAgdmFsdWU9e2Zvcm1WYWx1ZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt2YWx1ZSA9PiBzZXRGb3JtVmFsdWUodmFsdWUpfVxuICAgICAgICAgICAgb25TdWJtaXQ9eygpID0+IHtcbiAgICAgICAgICAgICAgc2VuZFRvSW5wdXQoJ21lc3NhZ2Uuc2VuZCcsIGZvcm1WYWx1ZSk7XG4gICAgICAgICAgICAgIHNldEZvcm1WYWx1ZSh7IC4uLmZvcm1WYWx1ZSwgbWVzc2FnZTogJycgfSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvQ29udGVudD5cbiAgICAgICAgPEZvb3Rlcj5cbiAgICAgICAgICA8Rm9ybUdyb3VwPlxuICAgICAgICAgICAgPEJ1dHRvblRvb2xiYXI+XG4gICAgICAgICAgICAgIDxCdXR0b24gYXBwZWFyYW5jZT1cInByaW1hcnlcIiBkaXNhYmxlZD17IWNhblNlbmR9IG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBzZW5kVG9JbnB1dCgnbWVzc2FnZS5zZW5kJywgZm9ybVZhbHVlKTtcbiAgICAgICAgICAgICAgICBzZXRGb3JtVmFsdWUoeyAuLi5mb3JtVmFsdWUsIG1lc3NhZ2U6ICcnIH0pO1xuICAgICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAgICBTZW5kIE1lc3NhZ2VcbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwia2V5LWhpbnRcIj5cbiAgICAgICAgICAgICAgICBTaGlmdCArIEVudGVyIHRvIFNlbmRcbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICBzdHlsZT17eyBmbG9hdDogJ3JpZ2h0JyB9fVxuICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJkZWZhdWx0XCIgb25DbGljaz17KCkgPT4gc2V0Rm9ybVZhbHVlKHsgYm90Tm9kZTogbnVsbCwgcmVjaXBpZW50OiBudWxsLCBjaGF0SWQ6IG51bGwsIG1lc3NhZ2U6ICcnIH0pfT5cbiAgICAgICAgICAgICAgICBDYW5jZWxcbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L0J1dHRvblRvb2xiYXI+XG4gICAgICAgICAgPC9Gb3JtR3JvdXA+XG4gICAgICAgIDwvRm9vdGVyPlxuICAgICAgPC9XaWRnZXRGb3JtPlxuICAgIDwvUGFuZWw+XG4gICk7XG59XG5cbnBsdWcoJ3dpZGdldHMnLCBTZW5kTWVzc2FnZVdpZGdldCwgeyB4OiAwLCB5OiAwLCB3OiAyLCBoOiA2LCBpc1Jlc2l6YWJsZTogdHJ1ZSwgaWQ6IDEgfSk7XG5cbi8vIHJlZ2lzdGVyIGJ1dHRvbiBpbiB0aGUgdXNlciBtb2RhbCB0byByZWRpcmVjdCB0byBzdXJ2ZXkgbGlzdHNcbnBsdWcoXG4gICd1c2VyLWJ1dHRvbicsXG4gIFNlbmRNZXNzYWdlQnV0dG9uXG4pO1xucGx1ZyhcbiAgJ3VzZXItcmVjb3JkLWJ1dHRvbnMnLFxuICAoeyByZWNvcmQgfSkgPT4gPFNlbmRNZXNzYWdlQnV0dG9uIHRyYW5zcG9ydD17cmVjb3JkLnRyYW5zcG9ydH0gYXBwZWFyYW5jZT1cInByaW1hcnlcIiB1c2VyPXtyZWNvcmQudXNlcn0vPixcbiAge1xuICAgIHR5cGU6ICdzdXJ2ZXknXG4gIH1cbik7XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnNlY3JldC12aWV3ZXIgLmRpc3BsYXktc2VjcmV0e3BhZGRpbmc6NHB4IDEwcHg7Zm9udC1mYW1pbHk6bW9ub3NwYWNlO2JhY2tncm91bmQtY29sb3I6I2VlZWVlZTtib3JkZXI6MXB4IHNvbGlkICNiYmJiYmJ9LnNlY3JldC12aWV3ZXIgLnNlY3JldC1yZXZlYWwtYXR7Zm9udC1zaXplOjQwcHg7Zm9udC13ZWlnaHQ6Ym9sZGVyfVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLndpZGdldC1zZW5kLW1lc3NhZ2UgLnJzLWZvcm0tZ3JvdXB7ZmxleDoxIDA7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LXdyYXA6bm93cmFwO2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O2FsaWduLWNvbnRlbnQ6c3RyZXRjaDthbGlnbi1pdGVtczpzdHJldGNofS53aWRnZXQtc2VuZC1tZXNzYWdlIC5ycy1mb3JtLWdyb3VwIC5ycy1mb3JtLWNvbnRyb2wtd3JhcHBlcntmbGV4OjEgMH0ud2lkZ2V0LXNlbmQtbWVzc2FnZSAua2V5LWhpbnR7Y29sb3I6Izk5OTk5OTtkaXNwbGF5OmlubGluZS1ibG9ja31cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zZWNyZXQtdmlld2VyLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vd2lkZ2V0LXNlbmQuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307Il0sIm5hbWVzIjpbIkNPTlRFTlRfUExVR0lOUyIsImdxbCIsImNsaWVudCIsInVzZUFwb2xsb0NsaWVudCIsImRhdGEiLCJ1c2VDb25maWd1cmF0aW9uIiwibmFtZXNwYWNlIiwic3RhdGUiLCJzZXRTdGF0ZSIsInVzZVN0YXRlIiwicHV0IiwidXNlRmV0Y2giLCJoZWFkZXJzIiwianNvbmJpbl9rZXkiLCJoYXNTZWNyZXRLZXkiLCJfIiwiQnV0dG9uIiwiZGlzYWJsZWQiLCJhcHBlYXJhbmNlIiwib25DbGljayIsImFzeW5jIiwicGx1Z2lucyIsInF1ZXJ5IiwiZmV0Y2hQb2xpY3kiLCJjb250ZW50cyIsIm1hcCIsInBsdWdpbiIsImZpZWxkcyIsInJlZHVjZSIsImFjYyIsIml0ZW0iLCJuYW1lIiwidmFsdWUiLCJjb250ZW50IiwiY29udGVudF90aXRsZSIsImNvbnRlbnRfc2x1ZyIsImNvbnRlbnRfYm9keSIsInRpdGxlIiwic2x1ZyIsImJvZHkiLCJjb250ZW50X25hbWVzcGFjZSIsImlkIiwiZGVzY3JpcHRpb24iLCJ1cmwiLCJmbG93IiwidmVyc2lvbiIsImdpdGh1YiIsImtleXdvcmRzIiwidGFncyIsImF1dGhvciIsImF1dGhvcl91cmwiLCJpbml0aWFsQ29uZmlndXJhdGlvbiIsInBheWxvYWQiLCJpbml0aWFsX2NvbmZpZ3VyYXRpb24iLCJqc29uYmluX2lkIiwiTm90aWZpY2F0aW9uIiwicGx1ZyIsImxhYmVsIiwiaWNvbiIsInBlcm1pc3Npb24iLCJvcHRpb25zIiwid2l0aENvbmZpZ3VyYXRpb25QYWdlIiwib25TdWJtaXQiLCJmb3JtVmFsdWUiLCJzZXRGb3JtVmFsdWUiLCJmb3JtRXJyb3IiLCJzZXRGb3JtRXJyb3IiLCJmb3JtIiwidXNlUmVmIiwiRm9ybSIsInJlZiIsImNoZWNrVHJpZ2dlciIsImxheW91dCIsImZsdWlkIiwib25DaGFuZ2UiLCJvbkNoZWNrIiwiZXJyb3JzIiwiRm9ybUdyb3VwIiwiQ29udHJvbExhYmVsIiwiRm9ybUNvbnRyb2wiLCJhY2NlcHRlciIsIklucHV0IiwiSGVscEJsb2NrIiwic3R5bGUiLCJtYXJnaW5Ub3AiLCJCdXR0b25Ub29sYmFyIiwiY3VycmVudCIsImNoZWNrIiwiY29uZmlybSIsIkxlZ2VuZCIsImhyZWYiLCJ0YXJnZXQiLCJDb250ZW50IiwiYnJlYWRjcnVtYnMiLCJsYWJlbHMiLCJzYXZlQ29udGVudCIsImNyZWF0ZUNvbnRlbnQiLCJlbXB0eUNvbnRlbnQiLCJjdXN0b20iLCJjdXN0b21GaWVsZHNTY2hlbWEiLCJrZXkiLCJ0eXBlIiwiY29sb3IiLCJwYWRkaW5nQm90dG9tIiwiaGVpZ2h0Iiwic2VjcmV0Q29sb3IiLCJQaW5Qb2ludCIsIkljb24iLCJjbGFzc05hbWUiLCJzaXplIiwiSW1hZ2UiLCJSZWFjdCIsInJlbmRlciIsInRodW1iIiwid2lkdGgiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsInRoaXMiLCJwcm9wcyIsInJhdGlvIiwiaW1hZ2VIZWlnaHQiLCJNYXRoIiwiZmxvb3IiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJQcm9wVHlwZXMiLCJCYWxsb29uIiwidG9waWMiLCJ0cyIsIm9uRGVsZXRlIiwib25ab29tIiwiaW1hZ2UiLCJ0aHVtYkltYWdlIiwiY29uc29sZSIsImxvZyIsIlBvcG92ZXIiLCJvbk1vdXNlTGVhdmUiLCJwcm9wVHlwZXMiLCJEYXRlIiwiZGVmYXVsdFByb3BzIiwiY29uc3RydWN0b3IiLCJzdXBlciIsImhhbmRsZUxvYWRlZCIsImJpbmQiLCJoYW5kbGVDbGljayIsIm5lZWRQcmVsb2FkIiwicHJlbG9hZCIsImNvbXBvbmVudERpZE1vdW50IiwidG9vbHRpcCIsInF1ZXJ5U2VsZWN0b3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJlIiwidHJpZ2dlciIsInNob3ciLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNoaWxkcmVuIiwicG9pbnQiLCJ0ZXh0IiwicG9wb3ZlciIsInNob3dQb3BvdmVyIiwiaW5rQ29sb3IiLCJvbkRlbGV0ZVBvaW50Iiwib25TaG93SW1hZ2UiLCJwYXJzZUludCIsImNsYXNzTmFtZXMiLCJzcmMiLCJkaXNwbGF5Iiwib25Mb2FkIiwiYWx0IiwiVG9vbHRpcCIsInZpc2libGUiLCJzcGVha2VyIiwiV2hpc3BlciIsInBsYWNlbWVudCIsInRyaWdnZXJSZWYiLCJpc1JlcXVpcmVkIiwiR0VUX0xPQ0FUSU9OX1NFQ1JFVFMiLCJOb2RlUmVkTm9kZSIsIlNsdWdIZWxwIiwiVHlwZUNvbW1hbmQiLCJIZWxwRWxlbWVudHMiLCJzZWNyZXRzIiwic2V0U2VjcmV0cyIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwibWFya2VycyIsImZpbHRlciIsInNlY3JldCIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwibGF0IiwibG5nIiwibWluSGVpZ2h0Iiwic2VjcmV0X3VybCIsIm1pbldpZHRoIiwiYmFja2dyb3VuZFJlcGVhdCIsImJhY2tncm91bmRTaXplIiwidG8iLCJwYWdlcyIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInpJbmRleCIsIkxvYWRlciIsImRlZmF1bHRDZW50ZXIiLCJkZWZhdWx0Wm9vbSIsImJvdW5kcyIsInNlIiwibnciLCJyZWNvcmRzIiwidmFyaWFibGVzIiwid2hlcmUiLCJVc2VyUmVjb3JkcyIsInJlY29yZCIsImNvbHVtbnMiLCJjZWxsIiwic2VjcmV0X3R5cGUiLCJncm91cCIsImxpc3QiLCJleHBpcmVEYXRlIiwic2VjcmV0X2R1cmF0aW9uIiwibm93IiwiZHVyYXRpb24iLCJnZXRUaW1lIiwiRmxleGJveEdyaWQiLCJqdXN0aWZ5IiwiY29sc3BhbiIsInRvTG9jYWxlRGF0ZVN0cmluZyIsInRvTG9jYWxlVGltZVN0cmluZyIsInJvdW5kIiwic2VjcmV0X2JvdW50eSIsInNlY3JldF9wYXltZW50Iiwib3JkZXJfaW5mbyIsImVtYWlsIiwiY3VycmVuY3kiLCJ0b3RhbF9hbW91bnQiLCJ0b0ZpeGVkIiwicHJvdmlkZXJfcGF5bWVudF9jaGFyZ2VfaWQiLCJzdGF0dXMiLCJGcmFnbWVudCIsInVzZVNsdWciLCJyZWFkT25seSIsIkNvbnRlbnRBdXRvY29tcGxldGUiLCJDb25maWRlbmNlIiwidXNlciIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJ1c2VybmFtZSIsInMiLCJqb2luIiwidmFsaWRhdGlvbiIsImFjdGl2ZUNoYXRib3RzIiwidXNlR2xvYmFscyIsIlVzZXJBdXRvY29tcGxldGUiLCJjbGVhbmFibGUiLCJpc0FycmF5IiwiY2hhdElkcyIsImlzRW1wdHkiLCJmaW5kIiwiY2hhdCIsInRyYW5zcG9ydCIsInNvbWUiLCJjaGF0Ym90IiwiaGFzQ2hhdGJvdCIsImNoYXRJZCIsInVzZXJJZCIsInJlY2lwaWVudCIsImJvdE5vZGUiLCJub2RlSWQiLCJTZWxlY3RUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwiYWN0aXZlQ2hhdEJvdCIsInJvdyIsImJsb2NrIiwiY29tcG9uZW50Q2xhc3MiLCJvbktleVVwIiwiZXZlbnQiLCJzaGlmdEtleSIsImtleUNvZGUiLCJ1c2VNb2RhbCIsIk1vZGFsIiwiaXNWYWxpZE1lc3NhZ2UiLCJtZXNzYWdlIiwiU3RyaW5nVHlwZSIsIk9iamVjdFR5cGUiLCJTY2hlbWEiLCJzZW5kVG9JbnB1dCIsInVzZVNvY2tldCIsIm9wZW4iLCJjbG9zZSIsInZhbGlkYXRlIiwiZXJyb3IiLCJkaXNhYmxlIiwib3BlbldpdGhNb2RlbCIsIm9wZW5XaXRoIiwidmlldyIsIlNlbmRNZXNzYWdlRm9ybSIsImxhYmVsU3VibWl0IiwiY2hhdEJvdCIsIm1zZyIsIldpZGdldEZvcm0iLCJGb290ZXIiLCJXaWRnZXRzIiwic3RhdHMiLCJjYW5TZW5kIiwiZmxvYXQiLCJ4IiwieSIsInciLCJoIiwiaXNSZXNpemFibGUiLCJTZW5kTWVzc2FnZUJ1dHRvbiIsImV4cG9ydHMiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJwdXNoIiwibW9kdWxlIiwiYXBpIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJsb2NhbHMiXSwic291cmNlUm9vdCI6IiJ9