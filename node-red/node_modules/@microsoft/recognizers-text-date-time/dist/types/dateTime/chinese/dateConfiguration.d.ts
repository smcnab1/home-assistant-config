import { ExtractResult, Match } from "@microsoft/recognizers-text";
import { BaseDateExtractor, BaseDateParser } from "../baseDate";
import { Token, DateTimeResolutionResult } from "../utilities";
import { DateTimeParseResult } from "../parsers";
export declare class ChineseDateExtractor extends BaseDateExtractor {
    static beforeRegex: RegExp;
    static afterRegex: RegExp;
    static dateTimePeriodUnitRegex: RegExp;
    private readonly durationExtractor;
    constructor(dmyDateFormat: boolean);
    extract(source: string, refDate: Date): ExtractResult[];
    protected durationWithAgoAndLater(source: string, refDate: Date): Token[];
}
export declare class ChineseDateParser extends BaseDateParser {
    private readonly lunarRegex;
    private readonly specialDateRegex;
    private readonly tokenNextRegex;
    private readonly tokenLastRegex;
    private readonly monthMaxDays;
    private readonly durationExtractor;
    constructor(dmyDateFormat: boolean);
    parse(extractorResult: ExtractResult, referenceDate?: Date): DateTimeParseResult | null;
    private parseLunarCalendar;
    protected parseBasicRegexMatch(source: string, referenceDate: Date): DateTimeResolutionResult;
    protected parseImplicitDate(source: string, referenceDate: Date): DateTimeResolutionResult;
    protected matchToDate(match: Match, referenceDate: Date): DateTimeResolutionResult;
    private parseChineseWrittenNumberToValue;
    private convertChineseYearToNumber;
    private getMonthOfYear;
    private getDayOfMonth;
    private getMonthMaxDay;
    private isValidDate;
    private isNonleapYearFeb29th;
    protected parserDurationWithAgoAndLater(source: string, referenceDate: Date): DateTimeResolutionResult;
}
