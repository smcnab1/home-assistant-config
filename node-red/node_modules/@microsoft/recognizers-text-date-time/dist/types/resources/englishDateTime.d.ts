export declare namespace EnglishDateTime {
    const LangMarker = "Eng";
    const CheckBothBeforeAfter = false;
    const TillRegex: string;
    const RangeConnectorRegex: string;
    const RelativeRegex = "\\b(?<order>following|next|(up)?coming|this|last|past|previous|current|the)\\b";
    const StrictRelativeRegex = "\\b(?<order>following|next|(up)?coming|this|last|past|previous|current)\\b";
    const UpcomingPrefixRegex = "((this\\s+)?((up)?coming))";
    const NextPrefixRegex: string;
    const AfterNextSuffixRegex = "\\b(after\\s+(the\\s+)?next)\\b";
    const PastPrefixRegex = "((this\\s+)?past)\\b";
    const PreviousPrefixRegex: string;
    const ThisPrefixRegex = "(this|current)\\b";
    const RangePrefixRegex = "(from|between)";
    const CenturySuffixRegex = "(^century)\\b";
    const ReferencePrefixRegex = "(that|same)\\b";
    const FutureSuffixRegex = "\\b(in\\s+the\\s+)?(future|hence)\\b";
    const DayRegex = "(the\\s*)?(?<!(\\d+:?|\\$)\\s*)(?<day>(?:3[0-1]|[1-2]\\d|0?[1-9])(?:th|nd|rd|st)?)(?=\\b|t)";
    const ImplicitDayRegex = "(the\\s*)?(?<day>(?:3[0-1]|[0-2]?\\d)(?:th|nd|rd|st))\\b";
    const MonthNumRegex = "(?<month>1[0-2]|(0)?[1-9])\\b";
    const WrittenOneToNineRegex = "(?:one|two|three|four|five|six|seven|eight|nine)";
    const WrittenElevenToNineteenRegex = "(?:eleven|twelve|(?:thir|four|fif|six|seven|eigh|nine)teen)";
    const WrittenTensRegex = "(?:ten|twenty|thirty|fou?rty|fifty|sixty|seventy|eighty|ninety)";
    const WrittenNumRegex: string;
    const WrittenCenturyFullYearRegex: string;
    const WrittenCenturyOrdinalYearRegex = "(?:twenty(\\s+(one|two))?|ten|eleven|twelve|thirteen|fifteen|eigthteen|(?:four|six|seven|nine)(teen)?|one|two|three|five|eight)";
    const CenturyRegex: string;
    const LastTwoYearNumRegex: string;
    const FullTextYearRegex: string;
    const OclockRegex = "(?<oclock>o\\s*((\u2019|\u2018|')\\s*)?clock|sharp)";
    const SpecialDescRegex = "((?<ipm>)p\\b)";
    const AmDescRegex: string;
    const PmDescRegex: string;
    const AmPmDescRegex: string;
    const DescRegex: string;
    const TwoDigitYearRegex: string;
    const YearRegex: string;
    const WeekDayRegex = "\\b(?<weekday>(?:sun|mon|tues?|thurs?|fri)(day)?|thu|wedn(esday)?|weds?|sat(urday)?)s?\\b";
    const SingleWeekDayRegex = "\\b(?<weekday>sunday|saturday|(?:mon|tues?|thurs?|fri)(day)?|thu|wedn(esday)?|weds?|((?<=on\\s+)(sat|sun)))\\b";
    const RelativeMonthRegex: string;
    const WrittenMonthRegex = "(((the\\s+)?month of\\s+)?(?<month>apr(il)?|aug(ust)?|dec(ember)?|feb(ruary)?|jan(uary)?|july?|june?|mar(ch)?|may|nov(ember)?|oct(ober)?|sept(ember)?|sept?))";
    const MonthSuffixRegex: string;
    const DateUnitRegex = "(?<unit>decades?|years?|months?|weeks?|(?<business>business\\s+)?days?|fortnights?)\\b";
    const DateTokenPrefix = "on ";
    const TimeTokenPrefix = "at ";
    const TokenBeforeDate = "on ";
    const TokenBeforeTime = "at ";
    const SimpleCasesRegex: string;
    const MonthFrontSimpleCasesRegex: string;
    const MonthFrontBetweenRegex: string;
    const BetweenRegex: string;
    const MonthWithYear: string;
    const SpecialYearPrefixes = "(calendar|(?<special>fiscal|school))";
    const OneWordPeriodRegex: string;
    const MonthNumWithYear: string;
    const WeekOfMonthRegex: string;
    const WeekOfYearRegex: string;
    const FollowedDateUnit: string;
    const NumberCombinedWithDateUnit: string;
    const QuarterTermRegex = "\\b(((?<cardinal>first|1st|second|2nd|third|3rd|fourth|4th)[ -]+quarter)|(q(?<number>[1-4])))\\b";
    const RelativeQuarterTermRegex: string;
    const QuarterRegex: string;
    const QuarterRegexYearFront: string;
    const HalfYearTermRegex = "(?<cardinal>first|1st|second|2nd)\\s+half";
    const HalfYearFrontRegex = "(?<year>((1[5-9]|20)\\d{2})|2100)(\\s*-\\s*|\\s+(the\\s+)?)?h(?<number>[1-2])";
    const HalfYearBackRegex: string;
    const HalfYearRelativeRegex: string;
    const AllHalfYearRegex: string;
    const EarlyPrefixRegex = "\\b(?<EarlyPrefix>early|beginning of|start of|(?<RelEarly>earlier(\\s+in)?))\\b";
    const MidPrefixRegex = "\\b(?<MidPrefix>mid-?|middle of)\\b";
    const LaterPrefixRegex = "\\b(?<LatePrefix>late|end of|(?<RelLate>later(\\s+in)?))\\b";
    const PrefixPeriodRegex: string;
    const PrefixDayRegex = "\\b((?<EarlyPrefix>early)|(?<MidPrefix>mid(dle)?)|(?<LatePrefix>later?))(\\s+in)?(\\s+the\\s+day)?$";
    const SeasonDescRegex = "(?<seas>spring|summer|fall|autumn|winter)";
    const SeasonRegex: string;
    const WhichWeekRegex = "\\b(week)(\\s*)(?<number>5[0-3]|[1-4]\\d|0?[1-9])\\b";
    const WeekOfRegex = "(the\\s+)?((week)(\\s+(of|(commencing|starting|beginning)(\\s+on)?))|w/c)(\\s+the)?";
    const MonthOfRegex = "(month)(\\s*)(of)";
    const MonthRegex = "(?<month>apr(il)?|aug(ust)?|dec(ember)?|feb(ruary)?|jan(uary)?|july?|june?|mar(ch)?|may|nov(ember)?|oct(ober)?|sept(ember)?|sept?)";
    const DateYearRegex: string;
    const YearSuffix: string;
    const OnRegex: string;
    const RelaxedOnRegex = "(?<=\\b(on|at|in)\\s+)((?<day>(3[0-1]|[0-2]?\\d)(?:th|nd|rd|st))s?)\\b";
    const PrefixWeekDayRegex = "(\\s*((,?\\s*on)|[-\u2014\u2013]))";
    const ThisRegex: string;
    const LastDateRegex: string;
    const NextDateRegex: string;
    const SpecialDayRegex: string;
    const SpecialDayWithNumRegex: string;
    const RelativeDayRegex: string;
    const SetWeekDayRegex = "\\b(?<prefix>on\\s+)?(?<weekday>morning|afternoon|evening|night|(sun|mon|tues|wednes|thurs|fri|satur)day)s\\b";
    const WeekDayOfMonthRegex: string;
    const RelativeWeekDayRegex: string;
    const SpecialDate: string;
    const DatePreposition = "\\b(on|in)";
    const DateExtractorYearTermRegex: string;
    const DateExtractor1: string;
    const DateExtractor3: string;
    const DateExtractor4: string;
    const DateExtractor5: string;
    const DateExtractor6: string;
    const DateExtractor7L: string;
    const DateExtractor7S: string;
    const DateExtractor8: string;
    const DateExtractor9L: string;
    const DateExtractor9S: string;
    const DateExtractorA: string;
    const OfMonth: string;
    const MonthEnd: string;
    const WeekDayEnd: string;
    const WeekDayStart = "^[\\.]";
    const RangeUnitRegex = "\\b(?<unit>years?|months?|weeks?)\\b";
    const HourNumRegex = "\\b(?<hournum>zero|one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve)\\b";
    const MinuteNumRegex = "(?<minnum>ten|eleven|twelve|thirteen|fifteen|eighteen|(four|six|seven|nine)(teen)?|twenty|thirty|forty|fifty|one|two|three|five|eight)";
    const DeltaMinuteNumRegex = "(?<deltaminnum>ten|eleven|twelve|thirteen|fifteen|eighteen|(four|six|seven|nine)(teen)?|twenty|thirty|forty|fifty|one|two|three|five|eight)";
    const PmRegex = "(?<pm>(((?:at|in|around|on|for)\\s+(the\\s+)?)?(afternoon|evening|midnight|lunchtime))|((at|in|around|on|for)\\s+(the\\s+)?night))";
    const PmRegexFull = "(?<pm>((?:at|in|around|on|for)\\s+(the\\s+)?)?(afternoon|evening|(mid)?night|lunchtime))";
    const AmRegex = "(?<am>((?:at|in|around|on|for)\\s+(the\\s+)?)?(morning))";
    const LunchRegex = "\\blunchtime\\b";
    const NightRegex = "\\b(mid)?night\\b";
    const CommonDatePrefixRegex = "^[\\.]";
    const LessThanOneHour: string;
    const WrittenTimeRegex: string;
    const TimePrefix: string;
    const TimeSuffix: string;
    const TimeSuffixFull: string;
    const BasicTime: string;
    const MidnightRegex = "(?<midnight>mid\\s*(-\\s*)?night)";
    const MidmorningRegex = "(?<midmorning>mid\\s*(-\\s*)?morning)";
    const MidafternoonRegex = "(?<midafternoon>mid\\s*(-\\s*)?afternoon)";
    const MiddayRegex = "(?<midday>mid\\s*(-\\s*)?day|((12\\s)?noon))";
    const MidTimeRegex: string;
    const AtRegex: string;
    const IshRegex: string;
    const TimeUnitRegex = "([^A-Za-z]{1,}|\\b)(?<unit>h(ou)?rs?|h|min(ute)?s?|sec(ond)?s?)\\b";
    const RestrictedTimeUnitRegex = "(?<unit>hour|minute)\\b";
    const FivesRegex = "(?<tens>(?:fifteen|(?:twen|thir|fou?r|fif)ty(\\s*five)?|ten|five))\\b";
    const HourRegex: string;
    const PeriodHourNumRegex = "\\b(?<hour>twenty(\\s+(one|two|three|four))?|eleven|twelve|thirteen|fifteen|eighteen|(four|six|seven|nine)(teen)?|zero|one|two|three|five|eight|ten)\\b";
    const ConnectNumRegex: string;
    const TimeRegexWithDotConnector: string;
    const TimeRegex1: string;
    const TimeRegex2: string;
    const TimeRegex3: string;
    const TimeRegex4: string;
    const TimeRegex5: string;
    const TimeRegex6: string;
    const TimeRegex7: string;
    const TimeRegex8 = ".^";
    const TimeRegex9: string;
    const TimeRegex10: string;
    const TimeRegex11: string;
    const FirstTimeRegexInTimeRange: string;
    const PureNumFromTo: string;
    const PureNumBetweenAnd: string;
    const SpecificTimeFromTo: string;
    const SpecificTimeBetweenAnd: string;
    const SuffixAfterRegex = "\\b(((at)\\s)?(or|and)\\s+(above|after|later|greater)(?!\\s+than))\\b";
    const PrepositionRegex = "(?<prep>^(at|on|of)(\\s+the)?$)";
    const LaterEarlyRegex = "((?<early>early(\\s+|-))|(?<late>late(r?\\s+|-)))";
    const MealTimeRegex = "\\b(at\\s+)?(?<mealTime>breakfast|brunch|lunch(\\s*time)?|dinner(\\s*time)?|supper)\\b";
    const UnspecificTimePeriodRegex: string;
    const TimeOfDayRegex: string;
    const SpecificTimeOfDayRegex: string;
    const TimeFollowedUnit: string;
    const TimeNumberCombinedWithUnit: string;
    const BusinessHourSplitStrings: string[];
    const NowRegex = "\\b(?<now>(right\\s+)?now|as soon as possible|asap|recently|previously)\\b";
    const SuffixRegex = "^\\s*(in the\\s+)?(morning|afternoon|evening|night)\\b";
    const NonTimeContextTokens = "(building)";
    const DateTimeTimeOfDayRegex = "\\b(?<timeOfDay>morning|afternoon|night|evening)\\b";
    const DateTimeSpecificTimeOfDayRegex: string;
    const TimeOfTodayAfterRegex: string;
    const TimeOfTodayBeforeRegex: string;
    const SimpleTimeOfTodayAfterRegex: string;
    const SimpleTimeOfTodayBeforeRegex: string;
    const SpecificEndOfRegex = "(the\\s+)?end of(\\s+the)?\\s*$";
    const UnspecificEndOfRegex = "\\b(the\\s+)?(eod|(end\\s+of\\s+day))\\b";
    const UnspecificEndOfRangeRegex = "\\b(eoy)\\b";
    const PeriodTimeOfDayRegex: string;
    const PeriodSpecificTimeOfDayRegex: string;
    const PeriodTimeOfDayWithDateRegex: string;
    const LessThanRegex = "\\b(less\\s+than)\\b";
    const MoreThanRegex = "\\b(more\\s+than)\\b";
    const DurationUnitRegex: string;
    const SuffixAndRegex = "(?<suffix>\\s*(and)\\s+(an?\\s+)?(?<suffix_num>half|quarter))";
    const PeriodicRegex = "\\b(?<periodic>daily|monthly|weekly|biweekly|quarterly|yearly|annual(ly)?)\\b";
    const EachUnitRegex: string;
    const EachPrefixRegex = "\\b(?<each>(each|(every)|once an?)\\s*$)";
    const SetEachRegex = "\\b(?<each>(each|(every))(?<other>\\s+other)?\\s*)";
    const SetLastRegex = "(?<last>following|next|upcoming|this|last|past|previous|current)";
    const EachDayRegex = "^\\s*(each|every)\\s*day\\b";
    const DurationFollowedUnit: string;
    const NumberCombinedWithDurationUnit: string;
    const AnUnitRegex: string;
    const DuringRegex = "\\b(for|during)\\s+the\\s+(?<unit>year|month|week|day)\\b";
    const AllRegex = "\\b(?<all>(all|full|whole)(\\s+|-)(?<unit>year|month|week|day))\\b";
    const HalfRegex = "((an?\\s*)|\\b)(?<half>half\\s+(?<unit>year|month|week|day|hour))\\b";
    const ConjunctionRegex = "\\b((and(\\s+for)?)|with)\\b";
    const HolidayRegex1: string;
    const HolidayRegex2: string;
    const HolidayRegex3: string;
    const AMTimeRegex = "(?<am>morning)";
    const PMTimeRegex = "\\b(?<pm>afternoon|evening|night)\\b";
    const InclusiveModPrepositions = "(?<include>((on|in|at)\\s+or\\s+)|(\\s+or\\s+(on|in|at)))";
    const BeforeRegex: string;
    const AfterRegex: string;
    const SinceRegex = "(?:(?:\\b(?:since|after\\s+or\\s+equal\\s+to|starting\\s+(?:from|on|with)|as\\s+early\\s+as|(any\\s+time\\s+)?from)\\b\\s*)|(?<!\\w|<)(>=))";
    const AroundRegex = "(?:\\b(?:around|circa)\\s*\\b)";
    const AgoRegex = "\\b(ago|before\\s+(?<day>yesterday|today))\\b";
    const LaterRegex: string;
    const InConnectorRegex = "\\b(in)\\b";
    const SinceYearSuffixRegex: string;
    const WithinNextPrefixRegex: string;
    const MorningStartEndRegex: string;
    const AfternoonStartEndRegex: string;
    const EveningStartEndRegex = "(^(evening))|((evening)$)";
    const NightStartEndRegex = "(^(over|to)?night)|((over|to)?night$)";
    const InexactNumberRegex = "\\b((a\\s+)?few|some|several|(?<NumTwoTerm>(a\\s+)?couple(\\s+of)?))\\b";
    const InexactNumberUnitRegex: string;
    const RelativeTimeUnitRegex: string;
    const RelativeDurationUnitRegex: string;
    const ReferenceDatePeriodRegex: string;
    const ConnectorRegex = "^(-|,|for|t|around|@)$";
    const FromToRegex = "\\b(from).+(to)\\b.+";
    const SingleAmbiguousMonthRegex = "^(the\\s+)?(may|march)$";
    const SingleAmbiguousTermsRegex = "^(the\\s+)?(day|week|month|year)$";
    const UnspecificDatePeriodRegex = "^(week(end)?|month|year)$";
    const PrepositionSuffixRegex = "\\b(on|in|at|around|from|to)$";
    const FlexibleDayRegex = "(?<DayOfMonth>([A-Za-z]+\\s)?[A-Za-z\\d]+)";
    const ForTheRegex: string;
    const WeekDayAndDayOfMonthRegex: string;
    const WeekDayAndDayRegex: string;
    const RestOfDateRegex = "\\brest\\s+(of\\s+)?((the|my|this|current)\\s+)?(?<duration>week|month|year|decade)\\b";
    const RestOfDateTimeRegex = "\\brest\\s+(of\\s+)?((the|my|this|current)\\s+)?(?<unit>day)\\b";
    const AmbiguousRangeModifierPrefix = "(from)";
    const NumberEndingPattern: string;
    const OneOnOneRegex = "\\b(1\\s*:\\s*1(?!\\d))|(one (on )?one|one\\s*-\\s*one|one\\s*:\\s*one)\\b";
    const LaterEarlyPeriodRegex: string;
    const WeekWithWeekDayRangeRegex: string;
    const GeneralEndingRegex = "^\\s*((\\.,)|\\.|,|!|\\?)?\\s*$";
    const MiddlePauseRegex = "\\s*(,)\\s*";
    const DurationConnectorRegex = "^\\s*(?<connector>\\s+|and|,)\\s*$";
    const PrefixArticleRegex = "\\bthe\\s+";
    const OrRegex = "\\s*((\\b|,\\s*)(or|and)\\b|,)\\s*";
    const SpecialYearTermsRegex: string;
    const YearPlusNumberRegex: string;
    const NumberAsTimeRegex: string;
    const TimeBeforeAfterRegex: string;
    const DateNumberConnectorRegex = "^\\s*(?<connector>\\s+at)\\s*$";
    const DecadeRegex = "(?<decade>(?:nough|twen|thir|fou?r|fif|six|seven|eight|nine)ties|two\\s+thousands)";
    const DecadeWithCenturyRegex: string;
    const RelativeDecadeRegex: string;
    const YearPeriodRegex: string;
    const StrictTillRegex: string;
    const StrictRangeConnectorRegex: string;
    const ComplexDatePeriodRegex: string;
    const FailFastRegex: string;
    const UnitMap: ReadonlyMap<string, string>;
    const UnitValueMap: ReadonlyMap<string, number>;
    const SpecialYearPrefixesMap: ReadonlyMap<string, string>;
    const SeasonMap: ReadonlyMap<string, string>;
    const SeasonValueMap: ReadonlyMap<string, number>;
    const CardinalMap: ReadonlyMap<string, number>;
    const DayOfWeek: ReadonlyMap<string, number>;
    const MonthOfYear: ReadonlyMap<string, number>;
    const Numbers: ReadonlyMap<string, number>;
    const DayOfMonth: ReadonlyMap<string, number>;
    const DoubleNumbers: ReadonlyMap<string, number>;
    const HolidayNames: ReadonlyMap<string, string[]>;
    const WrittenDecades: ReadonlyMap<string, number>;
    const SpecialDecadeCases: ReadonlyMap<string, number>;
    const DefaultLanguageFallback = "MDY";
    const SuperfluousWordList: string[];
    const DurationDateRestrictions: string[];
    const AmbiguityFiltersDict: ReadonlyMap<string, string>;
    const MorningTermList: string[];
    const AfternoonTermList: string[];
    const EveningTermList: string[];
    const MealtimeBreakfastTermList: string[];
    const MealtimeBrunchTermList: string[];
    const MealtimeLunchTermList: string[];
    const MealtimeDinnerTermList: string[];
    const DaytimeTermList: string[];
    const NightTermList: string[];
    const SameDayTerms: string[];
    const PlusOneDayTerms: string[];
    const MinusOneDayTerms: string[];
    const PlusTwoDayTerms: string[];
    const MinusTwoDayTerms: string[];
    const FutureTerms: string[];
    const LastCardinalTerms: string[];
    const MonthTerms: string[];
    const MonthToDateTerms: string[];
    const WeekendTerms: string[];
    const WeekTerms: string[];
    const YearTerms: string[];
    const GenericYearTerms: string[];
    const YearToDateTerms: string[];
}
