export declare namespace PortugueseDateTime {
    const LangMarker = "Por";
    const CheckBothBeforeAfter = false;
    const TillRegex = "(?<till>ate|as|\u00E0s|at\u00E9|ateh|a|ao|--|-|\u2014|\u2014\u2014)(\\s+(o|[a\u00E0](s)?))?";
    const RangeConnectorRegex: string;
    const DayRegex = "(?<day>01|02|03|04|05|06|07|08|09|1|10|11|12|13|14|15|16|17|18|19|2|20|21|22|23|24|25|26|27|28|29|3|30|31|4|5|6|7|8|9)(?=\\b|t)";
    const MonthNumRegex = "(?<month>01|02|03|04|05|06|07|08|09|10|11|12|1|2|3|4|5|6|7|8|9)\\b";
    const AmDescRegex: string;
    const PmDescRegex: string;
    const AmPmDescRegex: string;
    const DescRegex: string;
    const RangePrefixRegex = "((desde|de|da|das|entre)\\s+(a(s)?\\s+)?)";
    const TwoDigitYearRegex: string;
    const FullTextYearRegex = "^[\\*]";
    const YearRegex: string;
    const RelativeMonthRegex = "(?<relmonth>([nd]?es[st]e|pr[\u00F3o]ximo|passsado|[u\u00FA]ltimo)\\s+m[e\u00EA]s)\\b";
    const MonthRegex = "(?<month>abr(il)?|ago(sto)?|dez(embro)?|fev(ereiro)?|jan(eiro)?|ju[ln](ho)?|mar([\u00E7c]o)?|maio?|nov(embro)?|out(ubro)?|sep?t(embro)?)";
    const MonthSuffixRegex: string;
    const DateUnitRegex = "(?<unit>anos?|meses|m[\u00EAe]s|semanas?|dias?)\\b";
    const PastRegex = "(?<past>\\b(passad[ao](s)?|[u\u00FA]ltim[oa](s)?|anterior(es)?|h[a\u00E1]|pr[\u00E9e]vi[oa](s)?)\\b)";
    const FutureRegex = "(?<past>\\b(seguinte(s)?|pr[o\u00F3]xim[oa](s)?|dentro\\s+de|em|daqui\\s+a)\\b)";
    const SimpleCasesRegex: string;
    const MonthFrontSimpleCasesRegex: string;
    const MonthFrontBetweenRegex: string;
    const DayBetweenRegex: string;
    const OneWordPeriodRegex = "\\b(((pr[o\u00F3]xim[oa]?|[nd]?es[st]e|aquel[ea]|[u\u00FA]ltim[oa]?|em)\\s+)?(?<month>abr(il)?|ago(sto)?|dez(embro)?|fev(ereiro)?|jan(eiro)?|ju[ln](ho)?|mar([\u00E7c]o)?|maio?|nov(embro)?|out(ubro)?|sep?t(embro)?)|(?<=\\b(de|do|da|o|a)\\s+)?(pr[o\u00F3]xim[oa](s)?|[u\u00FA]ltim[oa]s?|est(e|a))\\s+(fim de semana|fins de semana|semana|m[\u00EAe]s|ano)|fim de semana|fins de semana|(m[\u00EAe]s|anos)? [\u00E0a] data)\\b";
    const MonthWithYearRegex: string;
    const MonthNumWithYearRegex: string;
    const WeekOfMonthRegex: string;
    const WeekOfYearRegex: string;
    const FollowedDateUnit: string;
    const NumberCombinedWithDateUnit: string;
    const QuarterRegex: string;
    const QuarterRegexYearFront: string;
    const AllHalfYearRegex = "^[.]";
    const PrefixDayRegex = "^[.]";
    const SeasonRegex: string;
    const WhichWeekRegex = "\\b(semana)(\\s*)(?<number>5[0-3]|[1-4]\\d|0?[1-9])\\b";
    const WeekOfRegex = "(semana)(\\s*)((do|da|de))";
    const MonthOfRegex = "(mes)(\\s*)((do|da|de))";
    const RangeUnitRegex = "\\b(?<unit>anos?|meses|m[\u00EAe]s|semanas?)\\b";
    const InConnectorRegex = "\\b(em)\\b";
    const SinceYearSuffixRegex = "^[.]";
    const WithinNextPrefixRegex = "^[.]";
    const CenturySuffixRegex = "^[.]";
    const RelativeRegex = "^[.]";
    const StrictRelativeRegex = "^[.]";
    const FromRegex = "((desde|de)(\\s*a(s)?)?)$";
    const BetweenRegex = "(entre\\s*([oa](s)?)?)";
    const WeekDayRegex = "\\b(?<weekday>(domingos?|(segunda|ter[\u00E7c]a|quarta|quinta|sexta)s?([-\\s+]feiras?)?|s[a\u00E1]bados?|(2|3|4|5|6)[a\u00AA])\\b|(dom|seg|ter[c\u00E7]|qua|qui|sex|sab)\\b(\\.?(?=\\s|,|;|$)))";
    const OnRegex: string;
    const RelaxedOnRegex = "(?<=\\b(em|n[oa]|d[oa])\\s+)(dia\\s+)?((?<day>10|11|12|13|14|15|16|17|18|19|1|20|21|22|23|24|25|26|27|28|29|2|30|31|3|4|5|6|7|8|9)s?)\\b";
    const ThisRegex: string;
    const LastDateRegex: string;
    const NextDateRegex: string;
    const SpecialDayRegex = "\\b((d?o\\s+)?(dia\\s+antes\\s+de\\s+ontem|antes\\s+de\\s+ontem|anteontem)|((d?o\\s+)?(dia\\s+|depois\\s+|dia\\s+depois\\s+)?de\\s+amanh[a\u00E3])|(o\\s)?dia\\s+seguinte|(o\\s)?pr[o\u00F3]ximo\\s+dia|(o\\s+)?[u\u00FA]ltimo\\s+dia|ontem|amanh[\u00E3a]|hoje)|(do\\s+dia$)\\b";
    const SpecialDayWithNumRegex = "^[.]";
    const ForTheRegex = ".^";
    const WeekDayAndDayOfMonthRegex = ".^";
    const WeekDayAndDayRegex = ".^";
    const WeekDayOfMonthRegex: string;
    const RelativeWeekDayRegex = "^[.]";
    const AmbiguousRangeModifierPrefix = "^[.]";
    const NumberEndingPattern = "^[.]";
    const SpecialDateRegex: string;
    const OfMonthRegex: string;
    const MonthEndRegex: string;
    const WeekDayEnd: string;
    const WeekDayStart = "^[\\.]";
    const DateYearRegex: string;
    const DateExtractor1: string;
    const DateExtractor2: string;
    const DateExtractor3: string;
    const DateExtractor4: string;
    const DateExtractor5: string;
    const DateExtractor6: string;
    const DateExtractor7: string;
    const DateExtractor8: string;
    const DateExtractor9: string;
    const DateExtractor10: string;
    const DateExtractor11: string;
    const HourNumRegex = "\\b(?<hournum>zero|uma|duas|tr[\u00EAe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze)\\b";
    const MinuteNumRegex = "(?<minnum>um|dois|tr[\u00EAe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|catorze|quatorze|quinze|dez[ea]sseis|dez[ea]sete|dezoito|dez[ea]nove|vinte|trinta|[qc]uarenta|cin[qc]uenta)";
    const DeltaMinuteNumRegex = "(?<deltaminnum>um|dois|tr[\u00EAe]s|[qc]uatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|catorze|quatorze|quinze|dez[ea]sseis|dez[ea]sete|dezoito|dez[ea]nove|vinte|trinta|[qc]uarenta|cin[qc]uenta)";
    const OclockRegex = "(?<oclock>em\\s+ponto)";
    const PmRegex = "(?<pm>((pela|de|da|\\b[\u00E0a]\\b|na)\\s+(tarde|noite)))|((depois\\s+do|ap[\u00F3o]s\\s+o)\\s+(almo[\u00E7c]o|meio dia|meio-dia))";
    const AmRegex = "(?<am>(pela|de|da|na)\\s+(manh[\u00E3a]|madrugada))";
    const AmTimeRegex = "(?<am>([dn]?es[st]a|(pela|de|da|na))\\s+(manh[\u00E3a]|madrugada))";
    const PmTimeRegex = "(?<pm>(([dn]?es[st]a|\\b[\u00E0a]\\b|(pela|de|da|na))\\s+(tarde|noite)))|((depois\\s+do|ap[\u00F3o]s\\s+o)\\s+(almo[\u00E7c]o|meio dia|meio-dia))";
    const LessThanOneHour: string;
    const TensTimeRegex = "(?<tens>dez|vinte|trinta|[qc]uarenta|cin[qc]uenta)";
    const WrittenTimeRegex: string;
    const TimePrefix: string;
    const TimeSuffix: string;
    const BasicTime: string;
    const AtRegex: string;
    const ConnectNumRegex: string;
    const TimeRegex1: string;
    const TimeRegex2: string;
    const TimeRegex3: string;
    const TimeRegex4: string;
    const TimeRegex5: string;
    const TimeRegex6: string;
    const TimeRegex7: string;
    const TimeRegex8: string;
    const TimeRegex9: string;
    const TimeRegex10 = "(\\b([\u00E0a]|ao?)|na|de|da|pela)\\s+(madrugada|manh[\u00E3a]|meio\\s*dia|meia\\s*noite|tarde|noite)";
    const TimeRegex11: string;
    const TimeRegex12: string;
    const PrepositionRegex = "(?<prep>([\u00E0a]s?|em|por|pelo|pela|no|na|de|d[oa]?)?$)";
    const NowRegex = "\\b(?<now>((logo|exatamente)\\s+)?agora(\\s+mesmo)?|neste\\s+momento|(assim\\s+que|t[\u00E3a]o\\s+cedo\\s+quanto)\\s+(poss[i\u00ED]vel|possas?|possamos)|o\\s+mais\\s+(cedo|r[a\u00E1]pido)\\s+poss[\u00EDi]vel|recentemente|previamente)\\b";
    const SuffixRegex = "^\\s*((e|a|em|por|pelo|pela|no|na|de)\\s+)?(manh[\u00E3a]|madrugada|meio\\s*dia|tarde|noite)\\b";
    const TimeOfDayRegex = "\\b(?<timeOfDay>manh[\u00E3a]|madrugada|tarde|noite|((depois\\s+do|ap[\u00F3o]s\\s+o)\\s+(almo[\u00E7c]o|meio dia|meio-dia)))\\b";
    const SpecificTimeOfDayRegex: string;
    const TimeOfTodayAfterRegex: string;
    const TimeOfTodayBeforeRegex: string;
    const SimpleTimeOfTodayAfterRegex: string;
    const SimpleTimeOfTodayBeforeRegex: string;
    const SpecificEndOfRegex = "((no|ao)\\s+)?(fi(m|nal)|t[\u00E9e]rmin(o|ar))(\\s+d?o(\\s+dia)?(\\s+de)?)?\\s*$";
    const UnspecificEndOfRegex = "^[.]";
    const UnspecificEndOfRangeRegex = "^[.]";
    const UnitRegex = "(?<unit>anos|ano|meses|m[\u00EAe]s|semanas|semana|dias|dia|horas|hora|h|hr|hrs|hs|minutos|minuto|mins|min|segundos|segundo|segs|seg)\\b";
    const ConnectorRegex = "^(,|t|para [ao]|para as|pras|cerca de|cerca das|perto de|perto das|quase)$";
    const TimeHourNumRegex = "(?<hour>vinte e um|vinte e dois|vinte e tr[\u00EAe]s|vinte e quatro|zero|um|uma|dois|duas|tr[\u00EAe]s|quatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|quatorze|catorze|quinze|dez[ea]sseis|dez[ea]ssete|dezoito|dez[ea]nove|vinte)";
    const PureNumFromTo: string;
    const PureNumBetweenAnd: string;
    const SpecificTimeFromTo = "^[.]";
    const SpecificTimeBetweenAnd = "^[.]";
    const TimeUnitRegex = "(?<unit>horas|hora|h|minutos|minuto|mins|min|segundos|segundo|secs|sec)\\b";
    const TimeFollowedUnit: string;
    const TimeNumberCombinedWithUnit: string;
    const DateTimePeriodNumberCombinedWithUnit: string;
    const PeriodTimeOfDayWithDateRegex = "\\b((e|[\u00E0a]|em|na|no|ao|pel[ao]|de)\\s+)?(?<timeOfDay>manh[\u00E3a]|madrugada|(passado\\s+(o\\s+)?)?meio\\s+dia|tarde|noite)\\b";
    const RelativeTimeUnitRegex: string;
    const SuffixAndRegex = "(?<suffix>\\s*(e)\\s+(?<suffix_num>meia|(um\\s+)?quarto))";
    const FollowedUnit: string;
    const LessThanRegex = "^[.]";
    const MoreThanRegex = "^[.]";
    const DurationNumberCombinedWithUnit: string;
    const AnUnitRegex: string;
    const DuringRegex = "^[.]";
    const AllRegex = "\\b(?<all>tod[oa]?\\s+(o|a)\\s+(?<unit>ano|m[\u00EAe]s|semana|dia))\\b";
    const HalfRegex = "\\b(?<half>mei[oa]\\s+(?<unit>ano|m[\u00EAe]s|semana|dia|hora))\\b";
    const ConjunctionRegex = "^[.]";
    const InexactNumberRegex = "\\b(poucos|pouco|algum|alguns|v[\u00E1a]rios)\\b";
    const InexactNumberUnitRegex: string;
    const HolidayRegex1: string;
    const HolidayRegex2: string;
    const HolidayRegex3: string;
    const BeforeRegex = "(antes(\\s+(de|dos?|das?)?)?)";
    const AfterRegex = "((depois|ap[\u00F3o]s)(\\s*(de|d?os?|d?as?)?)?)";
    const SinceRegex = "(desde(\\s+(as?|o))?)";
    const AroundRegex = "^[.]";
    const PeriodicRegex = "\\b(?<periodic>di[\u00E1a]ri[ao]|diariamente|mensalmente|semanalmente|quinzenalmente|anualmente)\\b";
    const EachExpression = "cada|tod[oa]s?\\s*([oa]s)?";
    const EachUnitRegex: string;
    const EachPrefixRegex: string;
    const EachDayRegex: string;
    const BeforeEachDayRegex: string;
    const SetEachRegex: string;
    const LaterEarlyPeriodRegex = "^[.]";
    const WeekWithWeekDayRangeRegex = "^[.]";
    const GeneralEndingRegex = "^[.]";
    const MiddlePauseRegex = "^[.]";
    const PrefixArticleRegex = "^[\\.]";
    const OrRegex = "^[.]";
    const YearPlusNumberRegex = "^[.]";
    const NumberAsTimeRegex = "^[.]";
    const TimeBeforeAfterRegex = "^[.]";
    const DateNumberConnectorRegex = "^[.]";
    const ComplexDatePeriodRegex = "^[.]";
    const AgoRegex = "\\b(antes|atr[\u00E1a]s|no passado)\\b";
    const LaterRegex = "\\b(depois d[eoa]s?|ap[\u00F3o]s (as)?|desde (as|o)|desde|no futuro|mais tarde)\\b";
    const Tomorrow = "amanh[\u00E3a]";
    const UnitMap: ReadonlyMap<string, string>;
    const UnitValueMap: ReadonlyMap<string, number>;
    const SpecialYearPrefixesMap: ReadonlyMap<string, string>;
    const SeasonMap: ReadonlyMap<string, string>;
    const SeasonValueMap: ReadonlyMap<string, number>;
    const CardinalMap: ReadonlyMap<string, number>;
    const DayOfWeek: ReadonlyMap<string, number>;
    const MonthOfYear: ReadonlyMap<string, number>;
    const Numbers: ReadonlyMap<string, number>;
    const HolidayNames: ReadonlyMap<string, string[]>;
    const VariableHolidaysTimexDictionary: ReadonlyMap<string, string>;
    const DoubleNumbers: ReadonlyMap<string, number>;
    const DateTokenPrefix = "em ";
    const TimeTokenPrefix = "as ";
    const TokenBeforeDate = "o ";
    const TokenBeforeTime = "as ";
    const UpcomingPrefixRegex = ".^";
    const NextPrefixRegex: string;
    const PastPrefixRegex = ".^";
    const PreviousPrefixRegex: string;
    const ThisPrefixRegex = "([nd]?es[st][ea])\\b";
    const RelativeDayRegex = "^[\\.]";
    const RestOfDateRegex = "^[\\.]";
    const RelativeDurationUnitRegex = "^[\\.]";
    const ReferenceDatePeriodRegex = "^[.]";
    const FromToRegex = "\\b(from).+(to)\\b.+";
    const SingleAmbiguousMonthRegex = "^(the\\s+)?(may|march)$";
    const UnspecificDatePeriodRegex = "^[.]";
    const PrepositionSuffixRegex = "\\b(on|in|at|around|from|to)$";
    const RestOfDateTimeRegex = "^[\\.]";
    const SetWeekDayRegex = "^[\\.]";
    const NightRegex = "\\b(meia noite|noite|de noite)\\b";
    const CommonDatePrefixRegex = "\\b(dia)\\s+$";
    const DurationUnitRegex = "^[\\.]";
    const DurationConnectorRegex = "^[.]";
    const CenturyRegex = "^[.]";
    const DecadeRegex = "^[.]";
    const DecadeWithCenturyRegex = "^[.]";
    const RelativeDecadeRegex = "^[.]";
    const YearSuffix: string;
    const SuffixAfterRegex = "^[.]";
    const YearPeriodRegex = "^[.]";
    const FutureSuffixRegex = "^[.]";
    const WrittenDecades: ReadonlyMap<string, number>;
    const SpecialDecadeCases: ReadonlyMap<string, number>;
    const DefaultLanguageFallback = "DMY";
    const DurationDateRestrictions: any[];
    const AmbiguityFiltersDict: ReadonlyMap<string, string>;
    const EarlyMorningTermList: string[];
    const MorningTermList: string[];
    const AfternoonTermList: string[];
    const EveningTermList: string[];
    const NightTermList: string[];
    const SameDayTerms: string[];
    const PlusOneDayTerms: string[];
    const MinusOneDayTerms: string[];
    const PlusTwoDayTerms: string[];
    const MinusTwoDayTerms: string[];
    const MonthTerms: string[];
    const MonthToDateTerms: string[];
    const WeekendTerms: string[];
    const WeekTerms: string[];
    const YearTerms: string[];
    const YearToDateTerms: string[];
    const SpecialCharactersEquivalent: ReadonlyMap<string, string>;
}
