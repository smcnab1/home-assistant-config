import { IExtractor, ExtractResult, Match } from "@microsoft/recognizers-text";
export declare abstract class BaseSequenceExtractor implements IExtractor {
    abstract regexes: Map<RegExp, string>;
    protected extractType: string;
    extract(source: string): ExtractResult[];
    isValidMatch(match: Match): boolean;
}
export interface IPhoneNumberExtractorConfiguration {
    WordBoundariesRegex: string;
    NonWordBoundariesRegex: string;
    EndWordBoundariesRegex: string;
    ColonPrefixCheckRegex: string;
    FalsePositivePrefixRegex: string;
    ForbiddenPrefixMarkers: string[];
}
export declare class BasePhoneNumberExtractorConfiguration implements IPhoneNumberExtractorConfiguration {
    readonly WordBoundariesRegex: string;
    readonly NonWordBoundariesRegex: string;
    readonly EndWordBoundariesRegex: string;
    readonly ColonPrefixCheckRegex: string;
    readonly ForbiddenPrefixMarkers: string[];
    readonly FalsePositivePrefixRegex: string;
    constructor();
}
export declare class BasePhoneNumberExtractor extends BaseSequenceExtractor {
    regexes: Map<RegExp, string>;
    config: IPhoneNumberExtractorConfiguration;
    constructor(config: IPhoneNumberExtractorConfiguration);
    extract(source: string): ExtractResult[];
}
export interface IIpExtractorConfiguration {
    Ipv4Regex: RegExp;
    Ipv6Regex: RegExp;
}
export declare class BaseIpExtractor extends BaseSequenceExtractor {
    regexes: Map<RegExp, string>;
    constructor(config: IIpExtractorConfiguration);
    extract(source: string): ExtractResult[];
    isLetterOrDigit(c: string): boolean;
}
export declare class BaseMentionExtractor extends BaseSequenceExtractor {
    regexes: Map<RegExp, string>;
    constructor();
}
export declare class BaseHashtagExtractor extends BaseSequenceExtractor {
    regexes: Map<RegExp, string>;
    constructor();
}
export declare class BaseEmailExtractor extends BaseSequenceExtractor {
    regexes: Map<RegExp, string>;
    constructor();
}
export interface IURLExtractorConfiguration {
    UrlRegex: RegExp;
    IpUrlRegex: RegExp;
}
export declare class BaseURLExtractor extends BaseSequenceExtractor {
    regexes: Map<RegExp, string>;
    ambiguousTimeTerm: RegExp;
    constructor(config: IURLExtractorConfiguration);
    isValidMatch(match: Match): boolean;
}
export declare class BaseGUIDExtractor extends BaseSequenceExtractor {
    regexes: Map<RegExp, string>;
    constructor();
}
