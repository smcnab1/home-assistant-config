export declare namespace PortugueseNumeric {
    const LangMarker = "Por";
    const CompoundNumberLanguage = false;
    const MultiDecimalSeparatorCulture = false;
    const HundredsNumberIntegerRegex = "(quatrocent[ao]s|trezent[ao]s|seiscent[ao]s|setecent[ao]s|oitocent[ao]s|novecent[ao]s|duzent[ao]s|quinhent[ao]s|cem|(?<!por\\s+)(cento))";
    const RoundNumberIntegerRegex = "(mil|milh[\u00E3a]o|milh[\u00F5o]es|bilh[\u00E3a]o|bilh[\u00F5o]es|trilh[\u00E3a]o|trilh[\u00F5o]es|qua[td]rilh[\u00E3a]o|qua[td]rilh[\u00F5o]es|quintilh[\u00E3a]o|quintilh[\u00F5o]es)";
    const ZeroToNineIntegerRegex = "(quatro|cinco|sete|nove|zero|tr[\u00EAe]s|seis|oito|dois|duas|um|uma)";
    const TenToNineteenIntegerRegex = "(dez[ea]sseis|dez[ea]ssete|dez[ea]nove|dezoito|quatorze|catorze|quinze|treze|d[\u00E9e]z|onze|doze)";
    const TensNumberIntegerRegex = "(cinquenta|quarenta|trinta|sessenta|setenta|oitenta|noventa|vinte)";
    const DigitsNumberRegex = "\\d|\\d{1,3}(\\.\\d{3})";
    const BelowHundredsRegex: string;
    const BelowThousandsRegex: string;
    const SupportThousandsRegex: string;
    const NegativeNumberTermsRegex = "^[.]";
    const NegativeNumberSignRegex: string;
    const SeparaIntRegex: string;
    const AllIntRegex: string;
    const AllPointRegex: string;
    const SpecialFractionInteger: string;
    const PlaceHolderDefault = "\\D|\\b";
    const PlaceHolderPureNumber = "\\b";
    const AllIntRegexWithLocks: string;
    const AllIntRegexWithDozenSuffixLocks: string;
    const NumbersWithPlaceHolder: (placeholder: string) => string;
    const NumbersWithSuffix: string;
    const RoundNumberIntegerRegexWithLocks: string;
    const NumbersWithDozenSuffix = "(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+dezena(s)?(?=\\b)";
    const NumbersWithDozen2Suffix = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+d[\u00FAu]zia(s)(?=\\b)";
    const SimpleRoundOrdinalRegex = "(mil[e\u00E9]sim[oa]|milion[e\u00E9]sim[oa]|bilion[e\u00E9]sim[oa]|trilion[e\u00E9]sim[oa]|quatrilion[e\u00E9]sim[oa]|quintilion[e\u00E9]sim[oa])";
    const OneToNineOrdinalRegex = "(primeir[oa]|segund[oa]|terceir[oa]|quart[oa]|quint[oa]|sext[oa]|s[e\u00E9]tim[oa]|oitav[oa]|non[oa])";
    const TensOrdinalRegex = "(nonag[e\u00E9]sim[oa]|octog[e\u00E9]sim[oa]|setuag[e\u00E9]sim[oa]|septuag[e\u00E9]sim[oa]|sexag[e\u00E9]sim[oa]|quinquag[e\u00E9]sim[oa]|quadrag[e\u00E9]sim[oa]|trig[e\u00E9]sim[oa]|vig[e\u00E9]sim[oa]|d[e\u00E9]cim[oa])";
    const HundredOrdinalRegex = "(cent[e\u00E9]sim[oa]|ducent[e\u00E9]sim[oa]|tricent[e\u00E9]sim[oa]|cuadringent[e\u00E9]sim[oa]|quingent[e\u00E9]sim[oa]|sexcent[e\u00E9]sim[oa]|septingent[e\u00E9]sim[oa]|octingent[e\u00E9]sim[oa]|noningent[e\u00E9]sim[oa])";
    const SpecialUnderHundredOrdinalRegex = "(und[e\u00E9]cim[oa]|duod[e\u00E9]cimo)";
    const UnderHundredOrdinalRegex: string;
    const UnderThousandOrdinalRegex: string;
    const OverThousandOrdinalRegex: string;
    const ComplexOrdinalRegex: string;
    const SuffixRoundOrdinalRegex: string;
    const ComplexRoundOrdinalRegex: string;
    const AllOrdinalRegex: string;
    const OrdinalSuffixRegex = "(?<=\\b)(\\d*(1[oa\u00BA]|2[oa\u00BA]|3[oa\u00BA]|4[oa\u00BA]|5[oa\u00BA]|6[oa\u00BA]|7[oa\u00BA]|8[oa\u00BA]|9[oa\u00BA]|0[oa\u00BA]|1.\u00BA|2.\u00BA|3.\u00BA|4.\u00BA|5.\u00BA|6.\u00BA|7.\u00BA|8.\u00BA|9.\u00BA))(?=\\b)";
    const OrdinalEnglishRegex: string;
    const FractionNotationRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))";
    const FractionNotationWithSpacesRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))";
    const FractionNounRegex: string;
    const FractionNounWithArticleRegex: string;
    const FractionPrepositionRegex: string;
    const AllFloatRegex: string;
    const DoubleWithMultiplierRegex: string;
    const DoubleExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+,)))(\\d+(,\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)";
    const DoubleCaretExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+,)))(\\d+(,\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)";
    const DoubleDecimalPointRegex: (placeholder: string) => string;
    const DoubleWithoutIntegralRegex: (placeholder: string) => string;
    const DoubleWithRoundNumber: string;
    const DoubleAllFloatRegex: string;
    const NumberWithSuffixPercentage: string;
    const AmbiguousFractionConnectorsRegex = "^[.]";
    const DecimalSeparatorChar = ",";
    const FractionMarkerToken = "sobre";
    const NonDecimalSeparatorChar = ".";
    const HalfADozenText = "seis";
    const WordSeparatorToken = "e";
    const WrittenDecimalSeparatorTexts: string[];
    const WrittenGroupSeparatorTexts: string[];
    const WrittenIntegerSeparatorTexts: string[];
    const WrittenFractionSeparatorTexts: string[];
    const WrittenFractionSuffix: string[];
    const PluralSuffix = "s";
    const HalfADozenRegex = "meia\\s+d[u\u00FA]zia";
    const DigitalNumberRegex: string;
    const CardinalNumberMap: ReadonlyMap<string, number>;
    const OrdinalNumberMap: ReadonlyMap<string, number>;
    const PrefixCardinalMap: ReadonlyMap<string, number>;
    const SuffixOrdinalMap: ReadonlyMap<string, number>;
    const RoundNumberMap: ReadonlyMap<string, number>;
    const AmbiguityFiltersDict: ReadonlyMap<string, string>;
    const RelativeReferenceOffsetMap: ReadonlyMap<string, string>;
    const RelativeReferenceRelativeToMap: ReadonlyMap<string, string>;
}
