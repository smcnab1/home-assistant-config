export declare namespace JapaneseNumeric {
    const LangMarker = "Jpn";
    const CompoundNumberLanguage = true;
    const MultiDecimalSeparatorCulture = false;
    const DecimalSeparatorChar = ".";
    const FractionMarkerToken = "";
    const NonDecimalSeparatorChar = " ";
    const HalfADozenText = "";
    const WordSeparatorToken = "";
    const ZeroChar = "\u96F6";
    const PairChar = "\u5BFE";
    const RoundNumberMap: ReadonlyMap<string, number>;
    const RoundNumberMapChar: ReadonlyMap<string, number>;
    const ZeroToNineMap: ReadonlyMap<string, number>;
    const FullToHalfMap: ReadonlyMap<string, string>;
    const UnitMap: ReadonlyMap<string, string>;
    const RoundDirectList: string[];
    const TenChars: string[];
    const DigitalNumberRegex: string;
    const ZeroToNineFullHalfRegex = "[\\d\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFF10]";
    const DigitNumRegex: string;
    const DozenRegex = ".*\u30C0\u30FC\u30B9$";
    const PercentageRegex = ".+(?=\u30D1\\s*\u30FC\\s*\u30BB\\s*\u30F3\\s*\u30C8)|.*(?=[\uFF05%])";
    const DoubleAndRoundRegex: string;
    const FracSplitRegex = "[\u306F\u3068]|\u5206\\s*\u306E";
    const ZeroToNineIntegerRegex = "[\u4E00\u4E8C\u4E09\u56DB\u4E94\u516D\u4E03\u516B\u4E5D]";
    const NegativeNumberTermsRegex = "(\u30DE\\s*\u30A4\\s*\u30CA\\s*\u30B9)";
    const NegativeNumberTermsRegexNum = "(?<!(\\d+\\s*)|[-\uFF0D])[-\uFF0D]";
    const NegativeNumberSignRegex: string;
    const SpeGetNumberRegex: string;
    const PairRegex = ".*[\u5BFE\u81B3\u8DB3]$";
    const RoundNumberIntegerRegex = "[\u5341\u767E\u5343\u4E07\u5104\u5146]";
    const AllowListRegex = "(\u3002|\uFF0C|\u3001|\uFF08|\uFF09|\u201D\uFF5C\u56FD|\u9031\u9593|\u6642\u9593|\u6642|\u5339|\u30AD\u30ED|\u30C8\u30F3|\u5E74|\u500B|\u8DB3|\u672C|\\s|$)";
    const NotSingleRegex: string;
    const SingleRegex: string;
    const AllIntRegex: string;
    const PlaceHolderPureNumber = "\\b";
    const PlaceHolderDefault = "\\D|\\b";
    const NumbersSpecialsChars: string;
    const NumbersSpecialsCharsWithSuffix: string;
    const DottedNumbersSpecialsChar: string;
    const NumbersWithHalfDozen: string;
    const NumbersWithDozen: string;
    const PointRegexStr = "[\\.\uFF0E]";
    const AllFloatRegex: string;
    const NumbersWithAllowListRegex: string;
    const NumbersAggressiveRegex: string;
    const PointRegex: string;
    const DoubleSpecialsChars: string;
    const DoubleSpecialsCharsWithNegatives: string;
    const SimpleDoubleSpecialsChars: string;
    const DoubleWithMultiplierRegex: string;
    const DoubleWithThousandsRegex: string;
    const DoubleAllFloatRegex: string;
    const DoubleExponentialNotationRegex: string;
    const DoubleScientificNotationRegex: string;
    const OrdinalRegex: string;
    const OrdinalNumbersRegex: string;
    const AllFractionNumber: string;
    const FractionNotationSpecialsCharsRegex: string;
    const FractionNotationRegex: string;
    const PercentagePointRegex: string;
    const SimplePercentageRegex: string;
    const NumbersPercentagePointRegex: string;
    const NumbersPercentageWithSeparatorRegex: string;
    const NumbersPercentageWithMultiplierRegex: string;
    const FractionPercentagePointRegex: string;
    const FractionPercentageWithSeparatorRegex: string;
    const FractionPercentageWithMultiplierRegex: string;
    const SimpleNumbersPercentageRegex: string;
    const SimpleNumbersPercentageWithMultiplierRegex: string;
    const SimpleNumbersPercentagePointRegex: string;
    const IntegerPercentageRegex: string;
    const IntegerPercentageWithMultiplierRegex: string;
    const NumbersFractionPercentageRegex: string;
    const SimpleIntegerPercentageRegex: string;
    const NumbersFoldsPercentageRegex: string;
    const FoldsPercentageRegex: string;
    const SimpleFoldsPercentageRegex: string;
    const SpecialsPercentageRegex: string;
    const NumbersSpecialsPercentageRegex: string;
    const SimpleSpecialsPercentageRegex: string;
    const SpecialsFoldsPercentageRegex = "\u534A\\s*\u5206|(?<=\u30C0\u30FC\u30B9)";
    const TillRegex = "(\u304B\u3089|--|-|\u2014|\u2014\u2014|~)";
    const MoreRegex = "(\u5927\u306A\u308A|\u5927\u304D\u3044|\u9AD8\u3044|\u5927\u304D\u304F|>)";
    const LessRegex = "(\u5C0F\u306A\u308A|\u5C0F\u3055\u3044|\u4F4E\u3044|<)";
    const EqualRegex = "(\u7B49\u3057\u3044|\u30A4\u30B3\u30FC\u30EB|=)";
    const MoreOrEqual = "((\u5927\u306A\u308A\u304B\u30A4\u30B3\u30FC\u30EB)|(\u5927\u304D\u3044\u304B\u30A4\u30B3\u30FC\u30EB)|(\u5927\u306A\u308A\u304B\u7B49\u3057\u3044)|(\u5927\u304D\u3044\u304B\u7B49\u3057\u3044)|\u5C0F\u3055\u304F\u306A\u3044|\u4EE5\u4E0A|\u6700\u4F4E)";
    const MoreOrEqualSuffix = "(\u3088\u308A(\u5927\u306A\u308A\u30A4\u30B3\u30FC\u30EB|\u5C0F\u3055\u304F\u306A\u3044))";
    const LessOrEqual: string;
    const LessOrEqualSuffix = "(\u5C0F\u306A\u308A\u30A4\u30B3\u30FC\u30EB|\u5927\u3055\u304F\u306A\u3044)";
    const OneNumberRangeMoreRegex1: string;
    const OneNumberRangeMoreRegex2 = "(?<number1>((?!((\uFF0C|\u3001(?!\\d+))|(,|\u3001(?!\\d+))|\u3002)).)+)\\s*(\u3088\u308A)?(\u5927\u306A\u308A)";
    const OneNumberRangeMoreRegex3 = "(?<number1>((?!((\uFF0C(?!\\d+))|(,(?!\\d+))|\u3002)).)+)\\s*(\u4EE5\u4E0A|\u6700\u4F4E)(?![\u4E07\u5104]{1,2})";
    const OneNumberRangeMoreRegex4: string;
    const OneNumberRangeMoreSeparateRegex = "^[.]";
    const OneNumberRangeLessSeparateRegex = "^[.]";
    const OneNumberRangeLessRegex1: string;
    const OneNumberRangeLessRegex2 = "(?<number2>((?!((\uFF0C(?!\\d+))|(,(?!\\d+))|\u3002)).)+)\\s*(\u3088\u308A)?(\u5C0F\u306A)";
    const OneNumberRangeLessRegex3 = "(?<number2>((?!((\uFF0C(?!\\d+))|(,(?!\\d+))|\u3002)).)+)\\s*(\u4EE5\u4E0B|\u672A\u6E80)(?![\u4E07\u5104]{1,2})";
    const OneNumberRangeLessRegex4: string;
    const OneNumberRangeEqualRegex: string;
    const TwoNumberRangeRegex1: string;
    const TwoNumberRangeRegex2: string;
    const TwoNumberRangeRegex3: string;
    const TwoNumberRangeRegex4: string;
    const AmbiguousFractionConnectorsRegex = "^[.]";
    const RelativeReferenceOffsetMap: ReadonlyMap<string, string>;
    const RelativeReferenceRelativeToMap: ReadonlyMap<string, string>;
}
