export declare namespace SpanishNumeric {
    const LangMarker = "Spa";
    const CompoundNumberLanguage = false;
    const MultiDecimalSeparatorCulture = true;
    const HundredsNumberIntegerRegex = "(cuatrocient[ao]s|trescient[ao]s|seiscient[ao]s|setecient[ao]s|ochocient[ao]s|novecient[ao]s|doscient[ao]s|quinient[ao]s|(?<!por\\s+)(cien(to)?))";
    const RoundNumberIntegerRegex = "(mil millones|millones|mill[o\u00F3]n|mil|billones|bill[o\u00F3]n|trillones|trill[o\u00F3]n|cuatrillones|cuatrill[o\u00F3]n|quintillones|quintill[o\u00F3]n|sextillones|sextill[o\u00F3]n|septillones|septill[o\u00F3]n)";
    const ZeroToNineIntegerRegex = "(cuatro|cinco|siete|nueve|cero|tres|seis|ocho|dos|un[ao]?)";
    const TenToNineteenIntegerRegex = "(diecisiete|diecinueve|diecis[e\u00E9]is|dieciocho|catorce|quince|trece|diez|once|doce)";
    const TwentiesIntegerRegex = "(veinticuatro|veinticinco|veintisiete|veintinueve|veintitr[e\u00E9]s|veintis[e\u00E9]is|veintiocho|veintid[o\u00F3]s|ventiun[ao]|veinti[u\u00FA]n[oa]?|veinte)";
    const TensNumberIntegerRegex = "(cincuenta|cuarenta|treinta|sesenta|setenta|ochenta|noventa)";
    const NegativeNumberTermsRegex = "(?<negTerm>(?<!(al|lo)\\s+)menos\\s+)";
    const NegativeNumberSignRegex: string;
    const DigitsNumberRegex = "\\d|\\d{1,3}(\\.\\d{3})";
    const BelowHundredsRegex: string;
    const BelowThousandsRegex: string;
    const SupportThousandsRegex: string;
    const SeparaIntRegex: string;
    const AllIntRegex: string;
    const PlaceHolderPureNumber = "\\b";
    const PlaceHolderDefault = "\\D|\\b";
    const NumbersWithPlaceHolder: (placeholder: string) => string;
    const NumbersWithSuffix: string;
    const RoundNumberIntegerRegexWithLocks: string;
    const NumbersWithDozenSuffix = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+docenas?(?=\\b)";
    const AllIntRegexWithLocks: string;
    const AllIntRegexWithDozenSuffixLocks: string;
    const SimpleRoundOrdinalRegex = "(mil[e\u00E9]simo|millon[e\u00E9]sim[oa]|billon[e\u00E9]sim[oa]|trillon[e\u00E9]sim[oa]|cuatrillon[e\u00E9]sim[oa]|quintillon[e\u00E9]sim[oa]|sextillon[e\u00E9]sim[oa]|septillon[e\u00E9]sim[oa])";
    const OneToNineOrdinalRegex = "(primer[oa]?|segund[oa]|tercer[oa]?|cuart[oa]|quint[oa]|sext[oa]|s[e\u00E9]ptim[oa]|octav[oa]|noven[oa])";
    const TensOrdinalRegex = "(nonag[e\u00E9]sim[oa]|octog[e\u00E9]sim[oa]|septuag[e\u00E9]sim[oa]|sexag[e\u00E9]sim[oa]|quincuag[e\u00E9]sim[oa]|cuadrag[e\u00E9]sim[oa]|trig[e\u00E9]sim[oa]|vig[e\u00E9]sim[oa]|d[e\u00E9]cim[oa])";
    const HundredOrdinalRegex = "(cent[e\u00E9]sim[oa]|ducent[e\u00E9]sim[oa]|tricent[e\u00E9]sim[oa]|cuadringent[e\u00E9]sim[oa]|quingent[e\u00E9]sim[oa]|sexcent[e\u00E9]sim[oa]|septingent[e\u00E9]sim[oa]|octingent[e\u00E9]sim[oa]|noningent[e\u00E9]sim[oa])";
    const SpecialUnderHundredOrdinalRegex = "(und[e\u00E9]cim[oa]|duod[e\u00E9]cimo|decimoctav[oa])";
    const UnderHundredOrdinalRegex: string;
    const UnderThousandOrdinalRegex: string;
    const OverThousandOrdinalRegex: string;
    const ComplexOrdinalRegex: string;
    const SufixRoundOrdinalRegex: string;
    const ComplexRoundOrdinalRegex: string;
    const AllOrdinalRegex: string;
    const OrdinalSuffixRegex = "(?<=\\b)(\\d*(1r[oa]|2d[oa]|3r[oa]|4t[oa]|5t[oa]|6t[oa]|7m[oa]|8v[oa]|9n[oa]|0m[oa]|11[vm][oa]|12[vm][oa]))(?=\\b)";
    const OrdinalNounRegex: string;
    const SpecialFractionInteger: string;
    const FractionNotationRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))";
    const FractionNotationWithSpacesRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))";
    const FractionNounRegex: string;
    const FractionNounWithArticleRegex: string;
    const FractionPrepositionRegex: string;
    const AllPointRegex: string;
    const AllFloatRegex: string;
    const DoubleDecimalPointRegex: (placeholder: string) => string;
    const DoubleWithoutIntegralRegex: (placeholder: string) => string;
    const DoubleWithMultiplierRegex: string;
    const DoubleWithRoundNumber: string;
    const DoubleAllFloatRegex: string;
    const DoubleExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+([\\.,]\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)";
    const DoubleCaretExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+([\\.,]\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)";
    const NumberWithPrefixPercentage: string;
    const TillRegex = "(\\ba\\b|hasta|--|-|\u2014|\u2014\u2014|~|\u2013)";
    const MoreRegex = "(m\u00E1s\\s+alt[oa]\\s+que|(m[\u00E1a]s|mayor(es)?|por\\s+encima)(\\s+(que|de|del))?|(?<!<|=)>)";
    const LessRegex = "((menos|menor|menores|por\\s+debajo)(\\s+(que|de|del))?|m\u00E1s\\s+baj[oa]\\s+que|(?<!>|=)<)";
    const EqualRegex = "((igual(es)?|equivalente(s)?|equivale|equivalen|son)(\\s+(a|que|de|al|del))?|(?<!<|>)=)";
    const MoreOrEqualPrefix: string;
    const MoreOrEqual: string;
    const MoreOrEqualSuffix = "((\\b(y|o)\\b\\s+(m[\u00E1a]s|mayor|mayores)((?!\\s+(alt[oa]|baj[oa]|que|de|del))|(\\s+(que|de|del)(?!(\\s*\\d+)))))|como\\s+m[\u00EDi]nimo|por\\s+lo\\s+menos|al\\s+menos)";
    const LessOrEqualPrefix: string;
    const LessOrEqual: string;
    const LessOrEqualSuffix = "((\\b(y|o)\\b\\s+(menos|menor|menores)((?!\\s+(alt[oa]|baj[oa]|que|de|del))|(\\s+(que|de|del)(?!(\\s*\\d+)))))|como\\s+m[\u00E1a]ximo)";
    const NumberSplitMark = "(?![,.](?!\\d+))";
    const MoreRegexNoNumberSucceed = "((m[\u00E1a]s|mayor|mayores)((?!\\s+(que|de|del))|\\s+((que|de|del)(?!(\\s*\\d+))))|(por encima)(?!(\\s*\\d+)))";
    const LessRegexNoNumberSucceed = "((menos|menor|menores)((?!\\s+(que|de|del))|\\s+((que|de|del)(?!(\\s*\\d+))))|(por debajo)(?!(\\s*\\d+)))";
    const EqualRegexNoNumberSucceed = "((igual|iguales|equivalente|equivalentes|equivale|equivalen)((?!\\s+(a|que|de|al|del))|(\\s+(a|que|de|al|del)(?!(\\s*\\d+)))))";
    const OneNumberRangeMoreRegex1: string;
    const OneNumberRangeMoreRegex2: string;
    const OneNumberRangeMoreSeparateRegex: string;
    const OneNumberRangeLessRegex1: string;
    const OneNumberRangeLessRegex2: string;
    const OneNumberRangeLessSeparateRegex: string;
    const OneNumberRangeEqualRegex: string;
    const TwoNumberRangeRegex1: string;
    const TwoNumberRangeRegex2: string;
    const TwoNumberRangeRegex3: string;
    const TwoNumberRangeRegex4: string;
    const AmbiguousFractionConnectorsRegex = "(\\b(en|de)\\b)";
    const DecimalSeparatorChar = ",";
    const FractionMarkerToken = "sobre";
    const NonDecimalSeparatorChar = ".";
    const HalfADozenText = "seis";
    const WordSeparatorToken = "y";
    const WrittenDecimalSeparatorTexts: string[];
    const WrittenGroupSeparatorTexts: string[];
    const WrittenIntegerSeparatorTexts: string[];
    const WrittenFractionSeparatorTexts: string[];
    const HalfADozenRegex = "media\\s+docena";
    const DigitalNumberRegex: string;
    const CardinalNumberMap: ReadonlyMap<string, number>;
    const OrdinalNumberMap: ReadonlyMap<string, number>;
    const PrefixCardinalMap: ReadonlyMap<string, number>;
    const SuffixOrdinalMap: ReadonlyMap<string, number>;
    const RoundNumberMap: ReadonlyMap<string, number>;
    const AmbiguityFiltersDict: ReadonlyMap<string, string>;
    const RelativeReferenceOffsetMap: ReadonlyMap<string, string>;
    const RelativeReferenceRelativeToMap: ReadonlyMap<string, string>;
}
