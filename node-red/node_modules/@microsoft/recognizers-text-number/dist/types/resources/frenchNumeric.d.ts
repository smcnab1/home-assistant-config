export declare namespace FrenchNumeric {
    const LangMarker = "Fre";
    const CompoundNumberLanguage = false;
    const MultiDecimalSeparatorCulture = true;
    const RoundNumberIntegerRegex = "(cent|mille|millions|million|milliard|milliards|billion|billions)";
    const ZeroToNineIntegerRegex = "(et un|un|une|deux|trois|quatre|cinq|six|sept|huit|neuf)";
    const TenToNineteenIntegerRegex = "((seize|quinze|quatorze|treize|douze|onze)|dix(\\Wneuf|\\Whuit|\\Wsept)?)";
    const TensNumberIntegerRegex = "(quatre\\Wvingt(s|\\Wdix)?|soixante\\Wdix|vingt|trente|quarante|cinquante|soixante|septante|octante|huitante|nonante)";
    const DigitsNumberRegex = "\\d|\\d{1,3}(\\.\\d{3})";
    const NegativeNumberTermsRegex = "^[.]";
    const NegativeNumberSignRegex: string;
    const HundredsNumberIntegerRegex: string;
    const BelowHundredsRegex: string;
    const BelowThousandsRegex: string;
    const SupportThousandsRegex: string;
    const SeparaIntRegex: string;
    const AllIntRegex: string;
    const NumbersWithPlaceHolder: (placeholder: string) => string;
    const NumbersWithSuffix: string;
    const RoundNumberIntegerRegexWithLocks: string;
    const NumbersWithDozenSuffix = "(((?<!\\d+\\s*)-\\s*)|(?<=\\b))\\d+\\s+douzaine(s)?(?=\\b)";
    const AllIntRegexWithLocks: string;
    const AllIntRegexWithDozenSuffixLocks: string;
    const SimpleRoundOrdinalRegex = "(centi[e\u00E8]me|milli[e\u00E8]me|millioni[e\u00E8]me|milliardi[e\u00E8]me|billioni[e\u00E8]me)";
    const OneToNineOrdinalRegex = "(premier|premi[e\u00E8]re|deuxi[e\u00E8]me|second[e]|troisi[e\u00E8]me|tiers|tierce|quatri[e\u00E8]me|cinqui[e\u00E8]me|sixi[e\u00E8]me|septi[e\u00E8]me|huiti[e\u00E8]me|neuvi[e\u00E8]me)";
    const SpecialUnderHundredOrdinalRegex = "(onzi[e\u00E8]me|douzi[e\u00E8]me)";
    const TensOrdinalRegex = "(quatre-vingt-dixi[e\u00E8]me|quatre-vingti[e\u00E8]me|huitanti[e\u00E8]me|octanti[e\u00E8]me|soixante-dixi[e\u00E8]me|septanti[e\u00E8]me|soixanti[e\u00E8]me|cinquanti[e\u00E8]me|quaranti[e\u00E8]me|trenti[e\u00E8]me|vingti[e\u00E8]me)";
    const HundredOrdinalRegex: string;
    const UnderHundredOrdinalRegex: string;
    const UnderThousandOrdinalRegex: string;
    const OverThousandOrdinalRegex: string;
    const ComplexOrdinalRegex: string;
    const SuffixOrdinalRegex: string;
    const ComplexRoundOrdinalRegex: string;
    const AllOrdinalRegex: string;
    const PlaceHolderPureNumber = "\\b";
    const PlaceHolderDefault = "\\D|\\b";
    const OrdinalSuffixRegex = "(?<=\\b)((\\d*(1er|2e|2eme|3e|3eme|4e|4eme|5e|5eme|6e|6eme|7e|7eme|8e|8eme|9e|9eme|0e|0eme))|(11e|11eme|12e|12eme))(?=\\b)";
    const OrdinalFrenchRegex: string;
    const FractionNotationWithSpacesRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))";
    const FractionNotationRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))";
    const FractionNounRegex: string;
    const FractionNounWithArticleRegex: string;
    const FractionPrepositionRegex: string;
    const AllPointRegex: string;
    const AllFloatRegex: string;
    const DoubleDecimalPointRegex: (placeholder: string) => string;
    const DoubleWithoutIntegralRegex: (placeholder: string) => string;
    const DoubleWithMultiplierRegex: string;
    const DoubleWithRoundNumber: string;
    const DoubleAllFloatRegex: string;
    const DoubleExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[,\\.])))(\\d+([,\\.]\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)";
    const DoubleCaretExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[,\\.])))(\\d+([,\\.]\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)";
    const NumberWithSuffixPercentage: string;
    const NumberWithPrefixPercentage: string;
    const DecimalSeparatorChar = ",";
    const FractionMarkerToken = "sur";
    const NonDecimalSeparatorChar = ".";
    const HalfADozenText = "six";
    const WordSeparatorToken = "et";
    const WrittenDecimalSeparatorTexts: string[];
    const WrittenGroupSeparatorTexts: string[];
    const WrittenIntegerSeparatorTexts: string[];
    const WrittenFractionSeparatorTexts: string[];
    const HalfADozenRegex = "(?<=\\b)demi\\s+douzaine";
    const DigitalNumberRegex: string;
    const AmbiguousFractionConnectorsRegex = "^[.]";
    const CardinalNumberMap: ReadonlyMap<string, number>;
    const OrdinalNumberMap: ReadonlyMap<string, number>;
    const PrefixCardinalMap: ReadonlyMap<string, number>;
    const SuffixOrdinalMap: ReadonlyMap<string, number>;
    const RoundNumberMap: ReadonlyMap<string, number>;
    const AmbiguityFiltersDict: ReadonlyMap<string, string>;
    const RelativeReferenceOffsetMap: ReadonlyMap<string, string>;
    const RelativeReferenceRelativeToMap: ReadonlyMap<string, string>;
}
