{"version":3,"file":"notion-to-md.js","sourceRoot":"","sources":["../src/notion-to-md.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,+CAAiC;AACjC,2CAAkD;AAElD;;GAEG;AACH,MAAa,gBAAgB;IAG3B,YAAY,OAAgC;QAC1C,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;QACzC,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;IAC/B,CAAC;IACD,oBAAoB,CAClB,IAAY,EACZ,WAA8B;QAE9B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC;QAE5C,OAAO,IAAI,CAAC;IACd,CAAC;IACD;;;;;OAKG;IACH,gBAAgB,CAAC,WAAsB,EAAE,EAAE,eAAuB,CAAC;QACjE,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,QAAQ,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC5B,wBAAwB;YACxB,IAAI,QAAQ,CAAC,MAAM,EAAE;gBACnB,IACE,QAAQ,CAAC,IAAI,KAAK,OAAO;oBACzB,QAAQ,CAAC,IAAI,KAAK,oBAAoB;oBACtC,QAAQ,CAAC,IAAI,KAAK,oBAAoB,EACtC;oBACA,wCAAwC;oBACxC,QAAQ,IAAI,KAAK,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC;iBACtE;qBAAM;oBACL,QAAQ,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,EAAE,YAAY,CAAC,IAAI,CAAC;iBAClE;aACF;YAED,uBAAuB;YACvB,IAAI,QAAQ,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBACrD,IAAG,QAAQ,CAAC,IAAI,KAAK,cAAc,EAAC;oBAClC,QAAQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;iBACpE;qBAAM;oBACL,QAAQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,EAAE,YAAY,GAAG,CAAC,CAAC,CAAC;iBACxE;aACF;QACH,CAAC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,cAAc,CAClB,EAAU,EACV,YAA2B,IAAI;QAE/B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,IAAI,KAAK,CACb,wGAAwG,CACzG,CAAC;SACH;QAED,MAAM,MAAM,GAAG,MAAM,IAAA,yBAAgB,EAAC,IAAI,CAAC,YAAY,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;QAExE,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACvD,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,gBAAgB,CACpB,MAAyC,EACzC,YAA2B,IAAI,EAC/B,WAAsB,EAAE;QAExB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;YACtB,MAAM,IAAI,KAAK,CACb,wGAAwG,CACzG,CAAC;SACH;QAED,IAAI,CAAC,MAAM;YAAE,OAAO,QAAQ,CAAC;QAE7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACtC,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACtB,IACE,cAAc,IAAI,KAAK;gBACvB,KAAK,CAAC,YAAY;gBAClB,KAAK,CAAC,IAAI,KAAK,aAAa;gBAC5B,KAAK,CAAC,IAAI,KAAK,QAAQ,EACvB;gBACA,IAAI,YAAY,GAAG,MAAM,IAAA,yBAAgB,EACvC,IAAI,CAAC,YAAY,EACjB,KAAK,CAAC,EAAE,EACR,SAAS,CACV,CAAC;gBACF,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,KAAK,CAAC,IAAI;oBAChB,MAAM,EAAE,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC;oBACzC,QAAQ,EAAE,EAAE;iBACb,CAAC,CAAC;gBAEH,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC;gBACxB,MAAM,IAAI,CAAC,gBAAgB,CACzB,YAAY,EACZ,SAAS,EACT,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CACzB,CAAC;gBACF,SAAS;aACV;YACD,IAAI,GAAG,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAC5C,sBAAsB;YACtB,aAAa;YACb,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;SAChE;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,eAAe,CAAC,KAAsC;;QAC1D,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC;YAAE,OAAO,EAAE,CAAC;QAE/D,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,MAAM,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC;QACvB,IAAI,IAAI,IAAI,IAAI,CAAC,kBAAkB,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC;YACpE,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;QAEpD,QAAQ,IAAI,EAAE;YACZ,KAAK,OAAO;gBACV;oBACE,IAAI,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;oBAC/B,MAAM,mBAAmB,GAAG,YAAY,CAAC,OAAO;yBAC7C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;yBAC9B,IAAI,CAAC,EAAE,CAAC,CAAC;oBACZ,MAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC;oBACrC,IAAI,UAAU,KAAK,UAAU;wBAC3B,OAAO,EAAE,CAAC,KAAK,CAAC,mBAAmB,EAAE,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;oBAClE,IAAI,UAAU,KAAK,MAAM;wBACvB,OAAO,EAAE,CAAC,KAAK,CAAC,mBAAmB,EAAE,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAC/D;gBACD,MAAM;YAER,KAAK,SAAS,CAAC,CAAC;gBACd,OAAO,EAAE,CAAC,OAAO,EAAE,CAAC;aACrB;YAED,KAAK,UAAU,CAAC,CAAC;gBACf,OAAO,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;aAChD;YAED,KAAK,OAAO,CAAC;YACb,KAAK,MAAM,CAAC;YACZ,KAAK,KAAK;gBACR;oBACE,IAAI,YAAY,CAAC;oBACjB,IAAI,IAAI,KAAK,OAAO;wBAAE,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;oBACjD,IAAI,IAAI,KAAK,MAAM;wBAAE,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC;oBAC/C,IAAI,IAAI,KAAK,KAAK;wBAAE,YAAY,GAAG,KAAK,CAAC,GAAG,CAAC;oBAC7C,IAAI,YAAY,EAAE;wBAChB,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC;wBACpC,IAAI,SAAS,KAAK,UAAU;4BAC1B,OAAO,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;wBACrD,IAAI,SAAS,KAAK,MAAM;4BACtB,OAAO,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;qBAClD;iBACF;gBACD,MAAM;YAER,KAAK,UAAU,CAAC;YAChB,KAAK,OAAO,CAAC;YACb,KAAK,cAAc,CAAC;YACpB,KAAK,cAAc,CAAC;YACpB,KAAK,YAAY,CAAC;YAClB,KAAK,gBAAgB;gBACnB;oBACE,IAAI,YAAY,CAAC;oBACjB,IAAI,KAAK,GAAW,IAAI,CAAC;oBACzB,IAAI,IAAI,KAAK,UAAU;wBAAE,YAAY,GAAG,KAAK,CAAC,QAAQ,CAAC;oBACvD,IAAI,IAAI,KAAK,OAAO;wBAAE,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;oBACjD,IAAI,IAAI,KAAK,cAAc;wBAAE,YAAY,GAAG,KAAK,CAAC,YAAY,CAAC;oBAC/D,IACE,IAAI,KAAK,cAAc;wBACvB,KAAK,CAAC,YAAY,CAAC,IAAI,KAAK,SAAS,EACrC;wBACA,YAAY,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;qBACpD;oBAED,IAAI,IAAI,KAAK,YAAY,EAAE;wBACzB,YAAY,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC;wBACjC,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC;qBAChC;oBAED,IAAI,IAAI,KAAK,gBAAgB,EAAE;wBAC7B,YAAY,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC;wBACjC,KAAK,GAAG,KAAK,CAAC,cAAc,CAAC,KAAK,IAAI,gBAAgB,CAAC;qBACxD;oBAED,IAAI,YAAY;wBAAE,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;iBAC3D;gBACD,MAAM;YAER,KAAK,OAAO,CAAC,CAAC;gBACZ,MAAM,EAAE,EAAE,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;gBACnC,IAAI,QAAQ,GAAe,EAAE,CAAC;gBAC9B,IAAI,YAAY,EAAE;oBAChB,MAAM,SAAS,GAAG,MAAM,IAAA,yBAAgB,EAAC,IAAI,CAAC,YAAY,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;oBACrE,gCAAgC;oBAChC,IAAI,WAAW,GAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;wBAC7C,MAAM,EAAE,IAAI,EAAE,GAAG,GAAU,CAAC;wBAC5B,MAAM,KAAK,GAAI,GAAW,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC;wBAE1C;;;;2BAIG;wBACH,IAAI,iBAAiB,GAAG,KAAK,CAAC,GAAG,CAC/B,KAAK,EAAE,IAAS,EAAE,EAAE,CAClB,MAAM,IAAI,CAAC,eAAe,CAAC;4BACzB,IAAI,EAAE,WAAW;4BACjB,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE;yBACI,CAAC,CACxC,CAAC;wBAEF,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;wBAC3D,oCAAoC;wBACpC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;wBAC7B,yBAAyB;oBAC3B,CAAC,CAAC,CAAC;oBACH,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;iBACtC;gBACD,OAAO,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aAC3B;YAED,KAAK,aAAa,CAAC,CAAC;gBAClB,MAAM,EAAE,EAAE,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;gBAEnC,IAAI,CAAC,YAAY;oBAAE,OAAO,EAAE,CAAC;gBAE7B,MAAM,oBAAoB,GAAG,MAAM,IAAA,yBAAgB,EACjD,IAAI,CAAC,YAAY,EACjB,EAAE,EACF,GAAG,CACJ,CAAC;gBAEF,IAAI,mBAAmB,GAAG,oBAAoB,CAAC,GAAG,CAChD,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CACrD,CAAC;gBAEF,IAAI,WAAW,GAAa,MAAM,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;gBAEnE,OAAO,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACjC;YAED,KAAK,QAAQ,CAAC,CAAC;gBACb,MAAM,EAAE,EAAE,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;gBACnC,IAAI,CAAC,YAAY;oBAAE,OAAO,EAAE,CAAC;gBAE7B,MAAM,eAAe,GAAG,MAAM,IAAA,yBAAgB,EAC5C,IAAI,CAAC,YAAY,EACjB,EAAE,EACF,GAAG,CACJ,CAAC;gBAEF,MAAM,uBAAuB,GAAG,eAAe,CAAC,GAAG,CACjD,KAAK,EAAE,YAAY,EAAE,EAAE,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CACjE,CAAC;gBAEF,IAAI,MAAM,GAAa,MAAM,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;gBAClE,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAC5B;YAED,KAAK,QAAQ,CAAC,CAAC;gBACb,MAAM,EAAE,EAAE,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;gBAEnC,MAAM,cAAc,GAAG,MAAA,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,0CAAE,UAAU,CAAC;gBAE7D,eAAe;gBACf,IAAI,CAAC,YAAY,EAAE;oBACjB,OAAO,EAAE,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;iBAClC;gBAED,MAAM,sBAAsB,GAAG,MAAM,IAAA,yBAAgB,EACnD,IAAI,CAAC,YAAY,EACjB,EAAE,EACF,GAAG,CACJ,CAAC;gBAEF,qCAAqC;gBACrC,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,gBAAgB,CACjD,sBAAsB,CACvB,CAAC;gBAEF,0CAA0C;gBAC1C,MAAM,yBAAyB,GAC7B,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;gBAEzC,OAAO,EAAE,CAAC,MAAM,CAAC,cAAc,EAAE,yBAAyB,CAAC,CAAC;aAC7D;YACD,oBAAoB;YACpB,cAAc;YACd,cAAc;YACd,cAAc;YACd,cAAc;YACd,uBAAuB;YACvB,uBAAuB;YACvB,UAAU;YACV,UAAU;YACV,aAAa;YACb,iBAAiB;YACjB,eAAe;YACf,mBAAmB;YACnB,SAAS;YACT,YAAY;YACZ,eAAe;YACf,sBAAsB;YACtB,gBAAgB;YAChB,WAAW;YACX,iBAAiB;YACjB,UAAU;YACV,gBAAgB;YAEhB,OAAO,CAAC,CAAC;gBACP,4FAA4F;gBAC5F,aAAa;gBACb,IAAI,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC;gBACnE,YAAY,CAAC,GAAG,CAAC,CAAC,OAAa,EAAE,EAAE;oBACjC,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;oBACxC,IAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;oBAEpC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;oBAE7D,IAAI,OAAO,CAAC,MAAM,CAAC;wBACjB,UAAU,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;oBAEpD,UAAU,IAAI,UAAU,CAAC;gBAC3B,CAAC,CAAC,CAAC;aACJ;SACF;QAED,QAAQ,IAAI,EAAE;YACZ,KAAK,MAAM;gBACT;oBACE,UAAU,GAAG,EAAE,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,CAAC;iBAC7D;gBACD,MAAM;YAER,KAAK,WAAW;gBACd;oBACE,UAAU,GAAG,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;iBACtC;gBACD,MAAM;YAER,KAAK,WAAW;gBACd;oBACE,UAAU,GAAG,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;iBACtC;gBACD,MAAM;YAER,KAAK,WAAW;gBACd;oBACE,UAAU,GAAG,EAAE,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;iBACtC;gBACD,MAAM;YAER,KAAK,OAAO;gBACV;oBACE,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;iBACnC;gBACD,MAAM;YAER,KAAK,SAAS;gBACZ;oBACE,UAAU,GAAG,EAAE,CAAC,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;iBACvD;gBACD,MAAM;YAER,KAAK,oBAAoB;gBACvB;oBACE,UAAU,GAAG,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;iBACpC;gBACD,MAAM;YAER,KAAK,oBAAoB;gBACvB;oBACE,UAAU,GAAG,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;iBACrE;gBACD,MAAM;YAER,KAAK,OAAO;gBACV;oBACE,UAAU,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;iBACvD;gBACD,MAAM;SACT;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IACH,iBAAiB,CAAC,IAAY,EAAE,WAAwB;QACtD,wCAAwC;QACxC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;YAAE,OAAO,IAAI,CAAC;QAErC,MAAM,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC/C,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAEhD,MAAM,aAAa,GAAG,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACpE,MAAM,cAAc,GAAG,kBAAkB,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEvE,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAEnB,IAAI,IAAI,KAAK,EAAE,EAAE;YACf,IAAI,WAAW,CAAC,IAAI;gBAAE,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,WAAW,CAAC,IAAI;gBAAE,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3C,IAAI,WAAW,CAAC,MAAM;gBAAE,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC/C,IAAI,WAAW,CAAC,aAAa;gBAAE,IAAI,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC7D,IAAI,WAAW,CAAC,SAAS;gBAAE,IAAI,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACtD;QAED,OAAO,aAAa,GAAG,IAAI,GAAG,cAAc,CAAC;IAC/C,CAAC;CACF;AAxbD,4CAwbC","sourcesContent":["import { Client } from \"@notionhq/client\";\r\nimport {\r\n  Annotations,\r\n  ListBlockChildrenResponseResult,\r\n  ListBlockChildrenResponseResults,\r\n  MdBlock,\r\n  Text,\r\n  NotionToMarkdownOptions,\r\n  CustomTransformer,\r\n} from \"./types\";\r\nimport * as md from \"./utils/md\";\r\nimport { getBlockChildren } from \"./utils/notion\";\r\n\r\n/**\r\n * Converts a Notion page to Markdown.\r\n */\r\nexport class NotionToMarkdown {\r\n  private notionClient: Client;\r\n  private customTransformers: Record<string, CustomTransformer>;\r\n  constructor(options: NotionToMarkdownOptions) {\r\n    this.notionClient = options.notionClient;\r\n    this.customTransformers = {};\r\n  }\r\n  setCustomTransformer(\r\n    type: string,\r\n    transformer: CustomTransformer\r\n  ): NotionToMarkdown {\r\n    this.customTransformers[type] = transformer;\r\n\r\n    return this;\r\n  }\r\n  /**\r\n   * Converts Markdown Blocks to string\r\n   * @param {MdBlock[]} mdBlocks - Array of markdown blocks\r\n   * @param {number} nestingLevel - Defines max depth of nesting\r\n   * @returns {string} - Returns markdown string\r\n   */\r\n  toMarkdownString(mdBlocks: MdBlock[] = [], nestingLevel: number = 0): string {\r\n    let mdString = \"\";\r\n    mdBlocks.forEach((mdBlocks) => {\r\n      // process parent blocks\r\n      if (mdBlocks.parent) {\r\n        if (\r\n          mdBlocks.type !== \"to_do\" &&\r\n          mdBlocks.type !== \"bulleted_list_item\" &&\r\n          mdBlocks.type !== \"numbered_list_item\"\r\n        ) {\r\n          // add extra line breaks non list blocks\r\n          mdString += `\\n${md.addTabSpace(mdBlocks.parent, nestingLevel)}\\n\\n`;\r\n        } else {\r\n          mdString += `${md.addTabSpace(mdBlocks.parent, nestingLevel)}\\n`;\r\n        }\r\n      }\r\n\r\n      // process child blocks\r\n      if (mdBlocks.children && mdBlocks.children.length > 0) {\r\n        if(mdBlocks.type === \"synced_block\"){\r\n          mdString += this.toMarkdownString(mdBlocks.children, nestingLevel);\r\n        } else {\r\n          mdString += this.toMarkdownString(mdBlocks.children, nestingLevel + 1);\r\n        }\r\n      }\r\n    });\r\n    return mdString;\r\n  }\r\n\r\n  /**\r\n   * Retrieves Notion Blocks based on ID and converts them to Markdown Blocks\r\n   * @param {string} id - notion page id (not database id)\r\n   * @param {number} totalPage - Retrieve block children request number, page_size Maximum = totalPage * 100 (Default=null)\r\n   * @returns {Promise<MdBlock[]>} - List of markdown blocks\r\n   */\r\n  async pageToMarkdown(\r\n    id: string,\r\n    totalPage: number | null = null\r\n  ): Promise<MdBlock[]> {\r\n    if (!this.notionClient) {\r\n      throw new Error(\r\n        \"notion client is not provided, for more details check out https://github.com/souvikinator/notion-to-md\"\r\n      );\r\n    }\r\n\r\n    const blocks = await getBlockChildren(this.notionClient, id, totalPage);\r\n\r\n    const parsedData = await this.blocksToMarkdown(blocks);\r\n    return parsedData;\r\n  }\r\n\r\n  /**\r\n   * Converts list of Notion Blocks to Markdown Blocks\r\n   * @param {ListBlockChildrenResponseResults | undefined} blocks - List of notion blocks\r\n   * @param {number} totalPage - Retrieve block children request number, page_size Maximum = totalPage * 100\r\n   * @param {MdBlock[]} mdBlocks - Defines max depth of nesting\r\n   * @returns {Promise<MdBlock[]>} - Array of markdown blocks with their children\r\n   */\r\n  async blocksToMarkdown(\r\n    blocks?: ListBlockChildrenResponseResults,\r\n    totalPage: number | null = null,\r\n    mdBlocks: MdBlock[] = []\r\n  ): Promise<MdBlock[]> {\r\n    if (!this.notionClient) {\r\n      throw new Error(\r\n        \"notion client is not provided, for more details check out https://github.com/souvikinator/notion-to-md\"\r\n      );\r\n    }\r\n\r\n    if (!blocks) return mdBlocks;\r\n\r\n    for (let i = 0; i < blocks.length; i++) {\r\n      let block = blocks[i];\r\n      if (\r\n        \"has_children\" in block &&\r\n        block.has_children &&\r\n        block.type !== \"column_list\" &&\r\n        block.type !== \"toggle\"\r\n      ) {\r\n        let child_blocks = await getBlockChildren(\r\n          this.notionClient,\r\n          block.id,\r\n          totalPage\r\n        );\r\n        mdBlocks.push({\r\n          type: block.type,\r\n          parent: await this.blockToMarkdown(block),\r\n          children: [],\r\n        });\r\n\r\n        let l = mdBlocks.length;\r\n        await this.blocksToMarkdown(\r\n          child_blocks,\r\n          totalPage,\r\n          mdBlocks[l - 1].children\r\n        );\r\n        continue;\r\n      }\r\n      let tmp = await this.blockToMarkdown(block);\r\n      // console.log(block);\r\n      // @ts-ignore\r\n      mdBlocks.push({ type: block.type, parent: tmp, children: [] });\r\n    }\r\n    return mdBlocks;\r\n  }\r\n\r\n  /**\r\n   * Converts a Notion Block to a Markdown Block\r\n   * @param {ListBlockChildrenResponseResult} block - single notion block\r\n   * @returns {string} corresponding markdown string of the passed block\r\n   */\r\n  async blockToMarkdown(block: ListBlockChildrenResponseResult) {\r\n    if (typeof block !== \"object\" || !(\"type\" in block)) return \"\";\r\n\r\n    let parsedData = \"\";\r\n    const { type } = block;\r\n    if (type in this.customTransformers && !!this.customTransformers[type])\r\n      return await this.customTransformers[type](block);\r\n\r\n    switch (type) {\r\n      case \"image\":\r\n        {\r\n          let blockContent = block.image;\r\n          const image_caption_plain = blockContent.caption\r\n            .map((item) => item.plain_text)\r\n            .join(\"\");\r\n          const image_type = blockContent.type;\r\n          if (image_type === \"external\")\r\n            return md.image(image_caption_plain, blockContent.external.url);\r\n          if (image_type === \"file\")\r\n            return md.image(image_caption_plain, blockContent.file.url);\r\n        }\r\n        break;\r\n\r\n      case \"divider\": {\r\n        return md.divider();\r\n      }\r\n\r\n      case \"equation\": {\r\n        return md.codeBlock(block.equation.expression);\r\n      }\r\n\r\n      case \"video\":\r\n      case \"file\":\r\n      case \"pdf\":\r\n        {\r\n          let blockContent;\r\n          if (type === \"video\") blockContent = block.video;\r\n          if (type === \"file\") blockContent = block.file;\r\n          if (type === \"pdf\") blockContent = block.pdf;\r\n          if (blockContent) {\r\n            const file_type = blockContent.type;\r\n            if (file_type === \"external\")\r\n              return md.link(\"image\", blockContent.external.url);\r\n            if (file_type === \"file\")\r\n              return md.link(\"image\", blockContent.file.url);\r\n          }\r\n        }\r\n        break;\r\n\r\n      case \"bookmark\":\r\n      case \"embed\":\r\n      case \"link_preview\":\r\n      case \"link_to_page\":\r\n      case \"child_page\":\r\n      case \"child_database\":\r\n        {\r\n          let blockContent;\r\n          let title: string = type;\r\n          if (type === \"bookmark\") blockContent = block.bookmark;\r\n          if (type === \"embed\") blockContent = block.embed;\r\n          if (type === \"link_preview\") blockContent = block.link_preview;\r\n          if (\r\n            type === \"link_to_page\" &&\r\n            block.link_to_page.type === \"page_id\"\r\n          ) {\r\n            blockContent = { url: block.link_to_page.page_id };\r\n          }\r\n\r\n          if (type === \"child_page\") {\r\n            blockContent = { url: block.id };\r\n            title = block.child_page.title;\r\n          }\r\n\r\n          if (type === \"child_database\") {\r\n            blockContent = { url: block.id };\r\n            title = block.child_database.title || \"child_database\";\r\n          }\r\n\r\n          if (blockContent) return md.link(title, blockContent.url);\r\n        }\r\n        break;\r\n\r\n      case \"table\": {\r\n        const { id, has_children } = block;\r\n        let tableArr: string[][] = [];\r\n        if (has_children) {\r\n          const tableRows = await getBlockChildren(this.notionClient, id, 100);\r\n          // console.log(\">>\", tableRows);\r\n          let rowsPromise = tableRows?.map(async (row) => {\r\n            const { type } = row as any;\r\n            const cells = (row as any)[type][\"cells\"];\r\n\r\n            /**\r\n             * this is more like a hack since matching the type text was\r\n             * difficult. So converting each cell to paragraph type to\r\n             * reuse the blockToMarkdown function\r\n             */\r\n            let cellStringPromise = cells.map(\r\n              async (cell: any) =>\r\n                await this.blockToMarkdown({\r\n                  type: \"paragraph\",\r\n                  paragraph: { rich_text: cell },\r\n                } as ListBlockChildrenResponseResult)\r\n            );\r\n\r\n            const cellStringArr = await Promise.all(cellStringPromise);\r\n            // console.log(\"~~\", cellStringArr);\r\n            tableArr.push(cellStringArr);\r\n            // console.log(tableArr);\r\n          });\r\n          await Promise.all(rowsPromise || []);\r\n        }\r\n        return md.table(tableArr);\r\n      }\r\n\r\n      case \"column_list\": {\r\n        const { id, has_children } = block;\r\n\r\n        if (!has_children) return \"\";\r\n\r\n        const column_list_children = await getBlockChildren(\r\n          this.notionClient,\r\n          id,\r\n          100\r\n        );\r\n\r\n        let column_list_promise = column_list_children.map(\r\n          async (column) => await this.blockToMarkdown(column)\r\n        );\r\n\r\n        let column_list: string[] = await Promise.all(column_list_promise);\r\n\r\n        return column_list.join(\"\\n\\n\");\r\n      }\r\n\r\n      case \"column\": {\r\n        const { id, has_children } = block;\r\n        if (!has_children) return \"\";\r\n\r\n        const column_children = await getBlockChildren(\r\n          this.notionClient,\r\n          id,\r\n          100\r\n        );\r\n\r\n        const column_children_promise = column_children.map(\r\n          async (column_child) => await this.blockToMarkdown(column_child)\r\n        );\r\n\r\n        let column: string[] = await Promise.all(column_children_promise);\r\n        return column.join(\"\\n\\n\");\r\n      }\r\n\r\n      case \"toggle\": {\r\n        const { id, has_children } = block;\r\n\r\n        const toggle_summary = block.toggle.rich_text[0]?.plain_text;\r\n\r\n        // empty toggle\r\n        if (!has_children) {\r\n          return md.toggle(toggle_summary);\r\n        }\r\n\r\n        const toggle_children_object = await getBlockChildren(\r\n          this.notionClient,\r\n          id,\r\n          100\r\n        );\r\n\r\n        // parse children blocks to md object\r\n        const toggle_children = await this.blocksToMarkdown(\r\n          toggle_children_object\r\n        );\r\n\r\n        // convert children md object to md string\r\n        const toggle_children_md_string =\r\n          this.toMarkdownString(toggle_children);\r\n\r\n        return md.toggle(toggle_summary, toggle_children_md_string);\r\n      }\r\n      // Rest of the types\r\n      // \"paragraph\"\r\n      // \"heading_1\"\r\n      // \"heading_2\"\r\n      // \"heading_3\"\r\n      // \"bulleted_list_item\"\r\n      // \"numbered_list_item\"\r\n      // \"quote\"\r\n      // \"to_do\"\r\n      // \"template\"\r\n      // \"synced_block\"\r\n      // \"child_page\"\r\n      // \"child_database\"\r\n      // \"code\"\r\n      // \"callout\"\r\n      // \"breadcrumb\"\r\n      // \"table_of_contents\"\r\n      // \"column_list\"\r\n      // \"column\"\r\n      // \"link_to_page\"\r\n      // \"audio\"\r\n      // \"unsupported\"\r\n\r\n      default: {\r\n        // In this case typescript is not able to index the types properly, hence ignoring the error\r\n        // @ts-ignore\r\n        let blockContent = block[type].text || block[type].rich_text || [];\r\n        blockContent.map((content: Text) => {\r\n          const annotations = content.annotations;\r\n          let plain_text = content.plain_text;\r\n\r\n          plain_text = this.annotatePlainText(plain_text, annotations);\r\n\r\n          if (content[\"href\"])\r\n            plain_text = md.link(plain_text, content[\"href\"]);\r\n\r\n          parsedData += plain_text;\r\n        });\r\n      }\r\n    }\r\n\r\n    switch (type) {\r\n      case \"code\":\r\n        {\r\n          parsedData = md.codeBlock(parsedData, block[type].language);\r\n        }\r\n        break;\r\n\r\n      case \"heading_1\":\r\n        {\r\n          parsedData = md.heading1(parsedData);\r\n        }\r\n        break;\r\n\r\n      case \"heading_2\":\r\n        {\r\n          parsedData = md.heading2(parsedData);\r\n        }\r\n        break;\r\n\r\n      case \"heading_3\":\r\n        {\r\n          parsedData = md.heading3(parsedData);\r\n        }\r\n        break;\r\n\r\n      case \"quote\":\r\n        {\r\n          parsedData = md.quote(parsedData);\r\n        }\r\n        break;\r\n\r\n      case \"callout\":\r\n        {\r\n          parsedData = md.callout(parsedData, block[type].icon);\r\n        }\r\n        break;\r\n\r\n      case \"bulleted_list_item\":\r\n        {\r\n          parsedData = md.bullet(parsedData);\r\n        }\r\n        break;\r\n\r\n      case \"numbered_list_item\":\r\n        {\r\n          parsedData = md.bullet(parsedData, block.numbered_list_item.number);\r\n        }\r\n        break;\r\n\r\n      case \"to_do\":\r\n        {\r\n          parsedData = md.todo(parsedData, block.to_do.checked);\r\n        }\r\n        break;\r\n    }\r\n\r\n    return parsedData;\r\n  }\r\n\r\n  /**\r\n   * Annoate text using provided annotations\r\n   * @param {string} text - String to be annotated\r\n   * @param {Annotations} annotations - Annotation object of a notion block\r\n   * @returns {string} - Annotated text\r\n   */\r\n  annotatePlainText(text: string, annotations: Annotations): string {\r\n    // if text is all spaces, don't annotate\r\n    if (text.match(/^\\s*$/)) return text;\r\n\r\n    const leadingSpaceMatch = text.match(/^(\\s*)/);\r\n    const trailingSpaceMatch = text.match(/(\\s*)$/);\r\n\r\n    const leading_space = leadingSpaceMatch ? leadingSpaceMatch[0] : \"\";\r\n    const trailing_space = trailingSpaceMatch ? trailingSpaceMatch[0] : \"\";\r\n\r\n    text = text.trim();\r\n\r\n    if (text !== \"\") {\r\n      if (annotations.code) text = md.inlineCode(text);\r\n      if (annotations.bold) text = md.bold(text);\r\n      if (annotations.italic) text = md.italic(text);\r\n      if (annotations.strikethrough) text = md.strikethrough(text);\r\n      if (annotations.underline) text = md.underline(text);\r\n    }\r\n\r\n    return leading_space + text + trailing_space;\r\n  }\r\n}\r\n"]}